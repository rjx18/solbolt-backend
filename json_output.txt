{'contracts': {'@openzeppelin/contracts/proxy/Proxy.sol': {'Proxy': {'evm': {'bytecode': {'functionDebugData': {}, 'generatedSources': [], 'linkReferences': {}, 'object': '', 'opcodes': '', 'sourceMap': ''}, 'deployedBytecode': {'functionDebugData': {}, 'generatedSources': [], 'immutableReferences': {}, 'linkReferences': {}, 'object': '', 'opcodes': '', 'sourceMap': ''}, 'legacyAssembly': None, 'methodIdentifiers': {}}, 'ir': '', 'metadata': '{"compiler":{"version":"0.8.7+commit.e28d00a7"},"language":"Solidity","output":{"abi":[{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"@openzeppelin/contracts/proxy/Proxy.sol":"Proxy"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":300},"remappings":[]},"sources":{"@openzeppelin/contracts/proxy/Proxy.sol":{"keccak256":"0x89f52157f90f3962cb9b784fbccd879748e9e937f0906123101c05d594bb88c8","license":"MIT","urls":["bzz-raw://3b2c3e179e16a9d67ec76aecc396288099691d903e2ad4bd77b6af8852518eab","dweb:/ipfs/QmQ3pWYxbDzp2HyMYKjp4ivqpVKMtVGtSQwgdZr2HG7Th9"]}},"version":1}'}}, '@openzeppelin/contracts/utils/Address.sol': {'Address': {'evm': {'bytecode': {'functionDebugData': {}, 'generatedSources': [], 'linkReferences': {}, 'object': '60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d88938fce725e36391918d15f541338b2b3a53ab141e97a095fea0e9a5fb28f064736f6c63430008070033', 'opcodes': 'PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 DUP10 CODESIZE 0xFC 0xE7 0x25 0xE3 PUSH4 0x91918D15 CREATE2 COINBASE CALLER DUP12 0x2B GASPRICE MSTORE8 0xAB EQ 0x1E SWAP8 LOG0 SWAP6 INVALID LOG0 0xE9 0xA5 0xFB 0x28 CREATE PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ', 'sourceMap': '194:8061:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8061:1;;;;;;;;;;;;;;;;;'}, 'deployedBytecode': {'functionDebugData': {}, 'generatedSources': [], 'immutableReferences': {}, 'linkReferences': {}, 'object': '73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d88938fce725e36391918d15f541338b2b3a53ab141e97a095fea0e9a5fb28f064736f6c63430008070033', 'opcodes': 'PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 DUP10 CODESIZE 0xFC 0xE7 0x25 0xE3 PUSH4 0x91918D15 CREATE2 COINBASE CALLER DUP12 0x2B GASPRICE MSTORE8 0xAB EQ 0x1E SWAP8 LOG0 SWAP6 INVALID LOG0 0xE9 0xA5 0xFB 0x28 CREATE PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ', 'sourceMap': '194:8061:1:-:0;;;;;;;;'}, 'legacyAssembly': {'.code': [{'begin': 194, 'end': 8255, 'name': 'PUSH #[$]', 'source': 1, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 194, 'end': 8255, 'name': 'PUSH [$]', 'source': 1, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': 'B'}, {'begin': 194, 'end': 8255, 'name': 'DUP3', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'DUP3', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'DUP3', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'CODECOPY', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'DUP1', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'MLOAD', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 194, 'end': 8255, 'name': 'BYTE', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '73'}, {'begin': 194, 'end': 8255, 'name': 'EQ', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH [tag]', 'source': 1, 'value': '1'}, {'begin': 194, 'end': 8255, 'name': 'JUMPI', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '4E487B71'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 194, 'end': 8255, 'name': 'MSTORE', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 194, 'end': 8255, 'name': 'MSTORE', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '24'}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 194, 'end': 8255, 'name': 'REVERT', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'tag', 'source': 1, 'value': '1'}, {'begin': 194, 'end': 8255, 'name': 'JUMPDEST', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'ADDRESS', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 194, 'end': 8255, 'name': 'MSTORE', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '73'}, {'begin': 194, 'end': 8255, 'name': 'DUP2', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'MSTORE8', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'DUP3', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'DUP2', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'RETURN', 'source': 1}], '.data': {'0': {'.auxdata': 'a2646970667358221220d88938fce725e36391918d15f541338b2b3a53ab141e97a095fea0e9a5fb28f064736f6c63430008070033', '.code': [{'begin': 194, 'end': 8255, 'name': 'PUSHDEPLOYADDRESS', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'ADDRESS', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'EQ', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '80'}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 194, 'end': 8255, 'name': 'MSTORE', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 194, 'end': 8255, 'name': 'DUP1', 'source': 1}, {'begin': 194, 'end': 8255, 'name': 'REVERT', 'source': 1}]}}}, 'methodIdentifiers': {}}, 'ir': '/*=====================================================*\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *=====================================================*/\n\n\n/// @use-src 0:"@openzeppelin/contracts/proxy/Proxy.sol", 1:"@openzeppelin/contracts/utils/Address.sol", 2:"@openzeppelin/contracts/utils/StorageSlot.sol", 3:"ERC1155Creator.sol", 4:"TREA.sol", 5:"#utility.yul"\nobject "Address_346" {\n    code {\n        /// @src 1:194:8255\n        mstore(64, 128)\n        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }\n\n        let _1 := allocate_unbounded()\n        codecopy(_1, dataoffset("Address_346_deployed"), datasize("Address_346_deployed"))\n\n        setimmutable(_1, "library_deploy_address", address())\n\n        return(_1, datasize("Address_346_deployed"))\n\n        function allocate_unbounded() -> memPtr {\n            memPtr := mload(64)\n        }\n\n        /// @src 1:194:8255\n        function constructor_Address_346() {\n\n            /// @src 1:194:8255\n\n        }\n        /// @src 1:194:8255\n\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {\n            revert(0, 0)\n        }\n\n    }\n    object "Address_346_deployed" {\n        code {\n            /// @src 1:194:8255\n            mstore(64, 128)\n\n            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))\n\n            if iszero(lt(calldatasize(), 4))\n            {\n                let selector := shift_right_224_unsigned(calldataload(0))\n                switch selector\n\n                default {}\n            }\n            if iszero(calldatasize()) {  }\n            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n\n            function allocate_unbounded() -> memPtr {\n                memPtr := mload(64)\n            }\n\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {\n                revert(0, 0)\n            }\n\n            function shift_right_224_unsigned(value) -> newValue {\n                newValue :=\n\n                shr(224, value)\n\n            }\n\n        }\n\n        data ".metadata" hex"a2646970667358221220d88938fce725e36391918d15f541338b2b3a53ab141e97a095fea0e9a5fb28f064736f6c63430008070033"\n    }\n\n}\n\n', 'metadata': '{"compiler":{"version":"0.8.7+commit.e28d00a7"},"language":"Solidity","output":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"@openzeppelin/contracts/utils/Address.sol":"Address"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":300},"remappings":[]},"sources":{"@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0x4f73eedf878079f3c11b05bb9db39c789ae782c0c1a15a8a31ad36aa7047a32f","license":"MIT","urls":["bzz-raw://c23c79bf4124e0b203677c5ab55ce73d8faf43f0d5c49b071c9f9f16fee74249","dweb:/ipfs/QmNsMhnyeFS22LXmGGG7j6eto36bz8SEGbfDGPVu1EZcB8"]}},"version":1}'}}, '@openzeppelin/contracts/utils/StorageSlot.sol': {'StorageSlot': {'evm': {'bytecode': {'functionDebugData': {}, 'generatedSources': [], 'linkReferences': {}, 'object': '60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a642ef853130cdbf62f38fbb6c0572533b27a0148cb2e048612fb69c23ba802464736f6c63430008070033', 'opcodes': 'PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 TIMESTAMP 0xEF DUP6 BALANCE ADDRESS 0xCD 0xBF PUSH3 0xF38FBB PUSH13 0x572533B27A0148CB2E048612F 0xB6 SWAP13 0x23 0xBA DUP1 0x24 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ', 'sourceMap': '1264:1219:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1264:1219:2;;;;;;;;;;;;;;;;;'}, 'deployedBytecode': {'functionDebugData': {}, 'generatedSources': [], 'immutableReferences': {}, 'linkReferences': {}, 'object': '73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a642ef853130cdbf62f38fbb6c0572533b27a0148cb2e048612fb69c23ba802464736f6c63430008070033', 'opcodes': 'PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 TIMESTAMP 0xEF DUP6 BALANCE ADDRESS 0xCD 0xBF PUSH3 0xF38FBB PUSH13 0x572533B27A0148CB2E048612F 0xB6 SWAP13 0x23 0xBA DUP1 0x24 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ', 'sourceMap': '1264:1219:2:-:0;;;;;;;;'}, 'legacyAssembly': {'.code': [{'begin': 1264, 'end': 2483, 'name': 'PUSH #[$]', 'source': 2, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 1264, 'end': 2483, 'name': 'PUSH [$]', 'source': 2, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': 'B'}, {'begin': 1264, 'end': 2483, 'name': 'DUP3', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'DUP3', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'DUP3', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'CODECOPY', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'DUP1', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'MLOAD', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '0'}, {'begin': 1264, 'end': 2483, 'name': 'BYTE', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '73'}, {'begin': 1264, 'end': 2483, 'name': 'EQ', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH [tag]', 'source': 2, 'value': '1'}, {'begin': 1264, 'end': 2483, 'name': 'JUMPI', 'source': 2}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '4E487B71'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '0'}, {'begin': 1264, 'end': 2483, 'name': 'MSTORE', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '0'}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '4'}, {'begin': 1264, 'end': 2483, 'name': 'MSTORE', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '24'}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '0'}, {'begin': 1264, 'end': 2483, 'name': 'REVERT', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'tag', 'source': 2, 'value': '1'}, {'begin': 1264, 'end': 2483, 'name': 'JUMPDEST', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'ADDRESS', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '0'}, {'begin': 1264, 'end': 2483, 'name': 'MSTORE', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '73'}, {'begin': 1264, 'end': 2483, 'name': 'DUP2', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'MSTORE8', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'DUP3', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'DUP2', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'RETURN', 'source': 2}], '.data': {'0': {'.auxdata': 'a2646970667358221220a642ef853130cdbf62f38fbb6c0572533b27a0148cb2e048612fb69c23ba802464736f6c63430008070033', '.code': [{'begin': 1264, 'end': 2483, 'name': 'PUSHDEPLOYADDRESS', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'ADDRESS', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'EQ', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '80'}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '40'}, {'begin': 1264, 'end': 2483, 'name': 'MSTORE', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'PUSH', 'source': 2, 'value': '0'}, {'begin': 1264, 'end': 2483, 'name': 'DUP1', 'source': 2}, {'begin': 1264, 'end': 2483, 'name': 'REVERT', 'source': 2}]}}}, 'methodIdentifiers': {}}, 'ir': '/*=====================================================*\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *=====================================================*/\n\n\n/// @use-src 0:"@openzeppelin/contracts/proxy/Proxy.sol", 1:"@openzeppelin/contracts/utils/Address.sol", 2:"@openzeppelin/contracts/utils/StorageSlot.sol", 3:"ERC1155Creator.sol", 4:"TREA.sol", 5:"#utility.yul"\nobject "StorageSlot_406" {\n    code {\n        /// @src 2:1264:2483\n        mstore(64, 128)\n        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }\n\n        let _1 := allocate_unbounded()\n        codecopy(_1, dataoffset("StorageSlot_406_deployed"), datasize("StorageSlot_406_deployed"))\n\n        setimmutable(_1, "library_deploy_address", address())\n\n        return(_1, datasize("StorageSlot_406_deployed"))\n\n        function allocate_unbounded() -> memPtr {\n            memPtr := mload(64)\n        }\n\n        /// @src 2:1264:2483\n        function constructor_StorageSlot_406() {\n\n            /// @src 2:1264:2483\n\n        }\n        /// @src 2:1264:2483\n\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {\n            revert(0, 0)\n        }\n\n    }\n    object "StorageSlot_406_deployed" {\n        code {\n            /// @src 2:1264:2483\n            mstore(64, 128)\n\n            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))\n\n            if iszero(lt(calldatasize(), 4))\n            {\n                let selector := shift_right_224_unsigned(calldataload(0))\n                switch selector\n\n                default {}\n            }\n            if iszero(calldatasize()) {  }\n            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n\n            function allocate_unbounded() -> memPtr {\n                memPtr := mload(64)\n            }\n\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {\n                revert(0, 0)\n            }\n\n            function shift_right_224_unsigned(value) -> newValue {\n                newValue :=\n\n                shr(224, value)\n\n            }\n\n        }\n\n        data ".metadata" hex"a2646970667358221220a642ef853130cdbf62f38fbb6c0572533b27a0148cb2e048612fb69c23ba802464736f6c63430008070033"\n    }\n\n}\n\n', 'metadata': '{"compiler":{"version":"0.8.7+commit.e28d00a7"},"language":"Solidity","output":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\"ERC1967: new implementation is not a contract\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"@openzeppelin/contracts/utils/StorageSlot.sol":"StorageSlot"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":300},"remappings":[]},"sources":{"@openzeppelin/contracts/utils/StorageSlot.sol":{"keccak256":"0xe90e5c5523f942613ebb55bd155de9489a185910338307b891adbd4b7604fc13","license":"MIT","urls":["bzz-raw://baa83fd3ea84f65b9d53eb42437f1c644d938582513b7e13d080ffdcb1a8653c","dweb:/ipfs/QmYF12uEQ1KmjqCxfPMc5HK7sCHXj1FNKtaaAwhVCgwKcn"]}},"version":1}'}}, 'ERC1155Creator.sol': {'ERC1155Creator': {'evm': {'bytecode': {'functionDebugData': {'@_452': {'entryPoint': None, 'id': 452, 'parameterSlots': 0, 'returnSlots': 0}, '@functionDelegateCall_279': {'entryPoint': 267, 'id': 279, 'parameterSlots': 2, 'returnSlots': 1}, '@functionDelegateCall_314': {'entryPoint': 311, 'id': 314, 'parameterSlots': 3, 'returnSlots': 1}, '@getAddressSlot_372': {'entryPoint': 264, 'id': 372, 'parameterSlots': 1, 'returnSlots': 1}, '@isContract_69': {'entryPoint': None, 'id': 69, 'parameterSlots': 1, 'returnSlots': 1}, '@verifyCallResult_345': {'entryPoint': 538, 'id': 345, 'parameterSlots': 3, 'returnSlots': 1}, 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed': {'entryPoint': 595, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': 623, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': None, 'id': None, 'parameterSlots': 1, 'returnSlots': 1}, 'checked_sub_t_uint256': {'entryPoint': 674, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'copy_memory_to_memory': {'entryPoint': 711, 'id': None, 'parameterSlots': 3, 'returnSlots': 0}, 'panic_error_0x01': {'entryPoint': 759, 'id': None, 'parameterSlots': 0, 'returnSlots': 0}}, 'generatedSources': [{'ast': {'nodeType': 'YulBlock', 'src': '0:1707:5', 'statements': [{'nodeType': 'YulBlock', 'src': '6:3:5', 'statements': []}, {'body': {'nodeType': 'YulBlock', 'src': '151:137:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '161:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '181:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '175:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '175:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '165:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '223:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '231:4:5', 'type': '', 'value': '0x20'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '219:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '219:17:5'}, {'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '238:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '243:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '197:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '197:53:5'}, 'nodeType': 'YulExpressionStatement', 'src': '197:53:5'}, {'nodeType': 'YulAssignment', 'src': '259:23:5', 'value': {'arguments': [{'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '270:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '275:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '266:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '266:16:5'}, 'variableNames': [{'name': 'end', 'nodeType': 'YulIdentifier', 'src': '259:3:5'}]}]}, 'name': 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'pos', 'nodeType': 'YulTypedName', 'src': '127:3:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '132:6:5', 'type': ''}], 'returnVariables': [{'name': 'end', 'nodeType': 'YulTypedName', 'src': '143:3:5', 'type': ''}], 'src': '14:274:5'}, {'body': {'nodeType': 'YulBlock', 'src': '414:262:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '431:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '442:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '424:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '424:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '424:21:5'}, {'nodeType': 'YulVariableDeclaration', 'src': '454:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '474:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '468:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '468:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '458:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '501:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '512:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '497:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '497:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '517:6:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '490:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '490:34:5'}, 'nodeType': 'YulExpressionStatement', 'src': '490:34:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '559:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '567:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '555:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '555:15:5'}, {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '576:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '587:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '572:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '572:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '592:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '533:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '533:66:5'}, 'nodeType': 'YulExpressionStatement', 'src': '533:66:5'}, {'nodeType': 'YulAssignment', 'src': '608:62:5', 'value': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '624:9:5'}, {'arguments': [{'arguments': [{'name': 'length', 'nodeType': 'YulIdentifier', 'src': '643:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '651:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '639:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '639:15:5'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '660:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'not', 'nodeType': 'YulIdentifier', 'src': '656:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '656:7:5'}], 'functionName': {'name': 'and', 'nodeType': 'YulIdentifier', 'src': '635:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '635:29:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '620:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '620:45:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '667:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '616:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '616:54:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '608:4:5'}]}]}, 'name': 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '383:9:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '394:6:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '405:4:5', 'type': ''}], 'src': '293:383:5'}, {'body': {'nodeType': 'YulBlock', 'src': '855:228:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '872:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '883:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '865:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '865:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '865:21:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '906:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '917:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '902:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '902:18:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '922:2:5', 'type': '', 'value': '38'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '895:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '895:30:5'}, 'nodeType': 'YulExpressionStatement', 'src': '895:30:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '945:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '956:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '941:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '941:18:5'}, {'hexValue': '416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '961:34:5', 'type': '', 'value': 'Address: delegate call to non-co'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '934:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '934:62:5'}, 'nodeType': 'YulExpressionStatement', 'src': '934:62:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1016:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1027:2:5', 'type': '', 'value': '96'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1012:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1012:18:5'}, {'hexValue': '6e7472616374', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '1032:8:5', 'type': '', 'value': 'ntract'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1005:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1005:36:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1005:36:5'}, {'nodeType': 'YulAssignment', 'src': '1050:27:5', 'value': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1062:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1073:3:5', 'type': '', 'value': '128'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1058:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1058:19:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '1050:4:5'}]}]}, 'name': 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '832:9:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '846:4:5', 'type': ''}], 'src': '681:402:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1137:173:5', 'statements': [{'body': {'nodeType': 'YulBlock', 'src': '1167:111:5', 'statements': [{'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1188:1:5', 'type': '', 'value': '0'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1195:3:5', 'type': '', 'value': '224'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1200:10:5', 'type': '', 'value': '0x4e487b71'}], 'functionName': {'name': 'shl', 'nodeType': 'YulIdentifier', 'src': '1191:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1191:20:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1181:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1181:31:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1181:31:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1232:1:5', 'type': '', 'value': '4'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1235:4:5', 'type': '', 'value': '0x11'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1225:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1225:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1225:15:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1260:1:5', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1263:4:5', 'type': '', 'value': '0x24'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '1253:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1253:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1253:15:5'}]}, 'condition': {'arguments': [{'name': 'x', 'nodeType': 'YulIdentifier', 'src': '1153:1:5'}, {'name': 'y', 'nodeType': 'YulIdentifier', 'src': '1156:1:5'}], 'functionName': {'name': 'lt', 'nodeType': 'YulIdentifier', 'src': '1150:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1150:8:5'}, 'nodeType': 'YulIf', 'src': '1147:131:5'}, {'nodeType': 'YulAssignment', 'src': '1287:17:5', 'value': {'arguments': [{'name': 'x', 'nodeType': 'YulIdentifier', 'src': '1299:1:5'}, {'name': 'y', 'nodeType': 'YulIdentifier', 'src': '1302:1:5'}], 'functionName': {'name': 'sub', 'nodeType': 'YulIdentifier', 'src': '1295:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1295:9:5'}, 'variableNames': [{'name': 'diff', 'nodeType': 'YulIdentifier', 'src': '1287:4:5'}]}]}, 'name': 'checked_sub_t_uint256', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'x', 'nodeType': 'YulTypedName', 'src': '1119:1:5', 'type': ''}, {'name': 'y', 'nodeType': 'YulTypedName', 'src': '1122:1:5', 'type': ''}], 'returnVariables': [{'name': 'diff', 'nodeType': 'YulTypedName', 'src': '1128:4:5', 'type': ''}], 'src': '1088:222:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1368:205:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '1378:10:5', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1387:1:5', 'type': '', 'value': '0'}, 'variables': [{'name': 'i', 'nodeType': 'YulTypedName', 'src': '1382:1:5', 'type': ''}]}, {'body': {'nodeType': 'YulBlock', 'src': '1447:63:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1472:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1477:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1468:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1468:11:5'}, {'arguments': [{'arguments': [{'name': 'src', 'nodeType': 'YulIdentifier', 'src': '1491:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1496:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1487:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1487:11:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '1481:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '1481:18:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1461:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1461:39:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1461:39:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1408:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1411:6:5'}], 'functionName': {'name': 'lt', 'nodeType': 'YulIdentifier', 'src': '1405:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1405:13:5'}, 'nodeType': 'YulForLoop', 'post': {'nodeType': 'YulBlock', 'src': '1419:19:5', 'statements': [{'nodeType': 'YulAssignment', 'src': '1421:15:5', 'value': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1430:1:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1433:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1426:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1426:10:5'}, 'variableNames': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1421:1:5'}]}]}, 'pre': {'nodeType': 'YulBlock', 'src': '1401:3:5', 'statements': []}, 'src': '1397:113:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1536:31:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1549:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1554:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1545:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1545:16:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1563:1:5', 'type': '', 'value': '0'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1538:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1538:27:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1538:27:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1525:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1528:6:5'}], 'functionName': {'name': 'gt', 'nodeType': 'YulIdentifier', 'src': '1522:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1522:13:5'}, 'nodeType': 'YulIf', 'src': '1519:48:5'}]}, 'name': 'copy_memory_to_memory', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'src', 'nodeType': 'YulTypedName', 'src': '1346:3:5', 'type': ''}, {'name': 'dst', 'nodeType': 'YulTypedName', 'src': '1351:3:5', 'type': ''}, {'name': 'length', 'nodeType': 'YulTypedName', 'src': '1356:6:5', 'type': ''}], 'src': '1315:258:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1610:95:5', 'statements': [{'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1627:1:5', 'type': '', 'value': '0'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1634:3:5', 'type': '', 'value': '224'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1639:10:5', 'type': '', 'value': '0x4e487b71'}], 'functionName': {'name': 'shl', 'nodeType': 'YulIdentifier', 'src': '1630:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1630:20:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1620:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1620:31:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1620:31:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1667:1:5', 'type': '', 'value': '4'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1670:4:5', 'type': '', 'value': '0x01'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1660:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1660:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1660:15:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1691:1:5', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1694:4:5', 'type': '', 'value': '0x24'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '1684:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1684:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1684:15:5'}]}, 'name': 'panic_error_0x01', 'nodeType': 'YulFunctionDefinition', 'src': '1578:127:5'}]}, 'contents': '{\n    { }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), "Address: delegate call to non-co")\n        mstore(add(headStart, 96), "ntract")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n}', 'id': 5, 'language': 'Yul', 'name': '#utility.yul'}], 'linkReferences': {}, 'object': '608060405234801561001057600080fd5b5061003c60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6102a2565b60008051602061064383398151915214610058576100586102f7565b73142fd5b9d67721efda3a5e2e9be47a96c9b724a461009160008051602061064383398151915260001b61010860201b6100dd1760201c565b80546001600160a01b03929092166001600160a01b0319909216919091179055604080516004815260248101909152602080820180516001600160e01b031663204a7f0760e21b1790526101029173142fd5b9d67721efda3a5e2e9be47a96c9b724a4916100e061010b821b17901c565b5061030d565b90565b6060610130838360405180606001604052806027815260200161066360279139610137565b9392505050565b60606001600160a01b0384163b6101a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101bf9190610253565b600060405180830381855af49150503d80600081146101fa576040519150601f19603f3d011682016040523d82523d6000602084013e6101ff565b606091505b50909250905061021082828661021a565b9695505050505050565b60608315610229575081610130565b8251156102395782518084602001fd5b8160405162461bcd60e51b815260040161019b919061026f565b600082516102658184602087016102c7565b9190910192915050565b602081526000825180602084015261028e8160408501602087016102c7565b601f01601f19169190910160400192915050565b6000828210156102c257634e487b7160e01b600052601160045260246000fd5b500390565b60005b838110156102e25781810151838201526020016102ca565b838111156102f1576000848401525b50505050565b634e487b7160e01b600052600160045260246000fd5b6103278061031c6000396000f3fe6080604052600436106100225760003560e01c80635c60da1b1461003957610031565b366100315761002f61006a565b005b61002f61006a565b34801561004557600080fd5b5061004e6100a5565b6040516001600160a01b03909116815260200160405180910390f35b6100a361009e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b61010c565b565b60006100d87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b90565b606061010583836040518060600160405280602781526020016102cb60279139610130565b9392505050565b3660008037600080366000845af43d6000803e80801561012b573d6000f35b3d6000fd5b60606001600160a01b0384163b61019d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101b8919061024b565b600060405180830381855af49150503d80600081146101f3576040519150601f19603f3d011682016040523d82523d6000602084013e6101f8565b606091505b5091509150610208828286610212565b9695505050505050565b60608315610221575081610105565b8251156102315782518084602001fd5b8160405162461bcd60e51b81526004016101949190610267565b6000825161025d81846020870161029a565b9190910192915050565b602081526000825180602084015261028681604085016020870161029a565b601f01601f19169190910160400192915050565b60005b838110156102b557818101518382015260200161029d565b838111156102c4576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122001f46ae50285ae0a6f161aec10a0c7e001b7dbb2b9ea6d5f9f8c5c932bbc999864736f6c63430008070033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564', 'opcodes': 'PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C PUSH1 0x1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD PUSH2 0x2A2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x643 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE EQ PUSH2 0x58 JUMPI PUSH2 0x58 PUSH2 0x2F7 JUMP JUMPDEST PUSH20 0x142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4 PUSH2 0x91 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x643 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHL PUSH2 0x108 PUSH1 0x20 SHL PUSH2 0xDD OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x204A7F07 PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0x102 SWAP2 PUSH20 0x142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4 SWAP2 PUSH2 0xE0 PUSH2 0x10B DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP PUSH2 0x30D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x130 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x663 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x137 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0x253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x210 DUP3 DUP3 DUP7 PUSH2 0x21A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x229 JUMPI POP DUP2 PUSH2 0x130 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x239 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x26F JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x265 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x28E DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2C2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2CA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x327 DUP1 PUSH2 0x31C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x39 JUMPI PUSH2 0x31 JUMP JUMPDEST CALLDATASIZE PUSH2 0x31 JUMPI PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH2 0x9E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD8 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x105 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2CB PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x130 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x12B JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0x24B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x208 DUP3 DUP3 DUP7 PUSH2 0x212 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x221 JUMPI POP DUP2 PUSH2 0x105 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x231 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x267 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x286 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x29D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122001F46A 0xE5 MUL DUP6 0xAE EXP PUSH16 0x161AEC10A0C7E001B7DBB2B9EA6D5F9F DUP13 0x5C SWAP4 0x2B 0xBC SWAP10 SWAP9 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x65640000000000000000000000 ', 'sourceMap': '244:1108:3:-:0;;;284:392;;;;;;;;;-1:-1:-1;347:54:3;400:1;355:41;347:54;:::i;:::-;-1:-1:-1;;;;;;;;;;;315:87:3;308:95;;;;:::i;:::-;470:42;413:48;-1:-1:-1;;;;;;;;;;;440:20:3;;413:26;;;;;:48;;:::i;:::-;:99;;-1:-1:-1;;;;;413:99:3;;;;-1:-1:-1;;;;;;413:99:3;;;;;;;;;620:39;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:39:3;-1:-1:-1;;;620:39:3;;;522:147;;564:42;;522:28;;;;;:147;;:::i;:::-;;244:1108;;1599:147:2;1726:4;1599:147::o;6570:198:1:-;6653:12;6684:77;6705:6;6713:4;6684:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6677:84;6570:198;-1:-1:-1;;;6570:198:1:o;6954:387::-;7095:12;-1:-1:-1;;;;;1465:19:1;;;7119:69;;;;-1:-1:-1;;;7119:69:1;;883:2:5;7119:69:1;;;865:21:5;922:2;902:18;;;895:30;961:34;941:18;;;934:62;-1:-1:-1;;;1012:18:5;;;1005:36;1058:19;;7119:69:1;;;;;;;;;7200:12;7214:23;7241:6;-1:-1:-1;;;;;7241:19:1;7261:4;7241:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7199:67:1;;-1:-1:-1;7199:67:1;-1:-1:-1;7283:51:1;7199:67;;7321:12;7283:16;:51::i;:::-;7276:58;6954:387;-1:-1:-1;;;;;;6954:387:1:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:1;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:1;;;;;;;;:::i;14:274:5:-;143:3;181:6;175:13;197:53;243:6;238:3;231:4;223:6;219:17;197:53;:::i;:::-;266:16;;;;;14:274;-1:-1:-1;;14:274:5:o;293:383::-;442:2;431:9;424:21;405:4;474:6;468:13;517:6;512:2;501:9;497:18;490:34;533:66;592:6;587:2;576:9;572:18;567:2;559:6;555:15;533:66;:::i;:::-;660:2;639:15;-1:-1:-1;;635:29:5;620:45;;;;667:2;616:54;;293:383;-1:-1:-1;;293:383:5:o;1088:222::-;1128:4;1156:1;1153;1150:8;1147:131;;;1200:10;1195:3;1191:20;1188:1;1181:31;1235:4;1232:1;1225:15;1263:4;1260:1;1253:15;1147:131;-1:-1:-1;1295:9:5;;1088:222::o;1315:258::-;1387:1;1397:113;1411:6;1408:1;1405:13;1397:113;;;1487:11;;;1481:18;1468:11;;;1461:39;1433:2;1426:10;1397:113;;;1528:6;1525:1;1522:13;1519:48;;;1563:1;1554:6;1549:3;1545:16;1538:27;1519:48;;1315:258;;;:::o;1578:127::-;1639:10;1634:3;1630:20;1627:1;1620:31;1670:4;1667:1;1660:15;1694:4;1691:1;1684:15;1578:127;244:1108:3;;;;;;'}, 'deployedBytecode': {'functionDebugData': {'@_37': {'entryPoint': None, 'id': 37, 'parameterSlots': 0, 'returnSlots': 0}, '@_45': {'entryPoint': None, 'id': 45, 'parameterSlots': 0, 'returnSlots': 0}, '@_beforeFallback_50': {'entryPoint': None, 'id': 50, 'parameterSlots': 0, 'returnSlots': 0}, '@_delegate_10': {'entryPoint': 268, 'id': 10, 'parameterSlots': 1, 'returnSlots': 0}, '@_fallback_29': {'entryPoint': 106, 'id': 29, 'parameterSlots': 0, 'returnSlots': 0}, '@_implementation_479': {'entryPoint': None, 'id': 479, 'parameterSlots': 0, 'returnSlots': 1}, '@functionDelegateCall_279': {'entryPoint': 224, 'id': 279, 'parameterSlots': 2, 'returnSlots': 1}, '@functionDelegateCall_314': {'entryPoint': 304, 'id': 314, 'parameterSlots': 3, 'returnSlots': 1}, '@getAddressSlot_372': {'entryPoint': 221, 'id': 372, 'parameterSlots': 1, 'returnSlots': 1}, '@implementation_466': {'entryPoint': 165, 'id': 466, 'parameterSlots': 0, 'returnSlots': 1}, '@isContract_69': {'entryPoint': None, 'id': 69, 'parameterSlots': 1, 'returnSlots': 1}, '@verifyCallResult_345': {'entryPoint': 530, 'id': 345, 'parameterSlots': 3, 'returnSlots': 1}, 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed': {'entryPoint': 587, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_address__to_t_address__fromStack_reversed': {'entryPoint': None, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': 615, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': None, 'id': None, 'parameterSlots': 1, 'returnSlots': 1}, 'copy_memory_to_memory': {'entryPoint': 666, 'id': None, 'parameterSlots': 3, 'returnSlots': 0}}, 'generatedSources': [{'ast': {'nodeType': 'YulBlock', 'src': '0:1579:5', 'statements': [{'nodeType': 'YulBlock', 'src': '6:3:5', 'statements': []}, {'body': {'nodeType': 'YulBlock', 'src': '151:137:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '161:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '181:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '175:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '175:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '165:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '223:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '231:4:5', 'type': '', 'value': '0x20'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '219:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '219:17:5'}, {'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '238:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '243:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '197:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '197:53:5'}, 'nodeType': 'YulExpressionStatement', 'src': '197:53:5'}, {'nodeType': 'YulAssignment', 'src': '259:23:5', 'value': {'arguments': [{'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '270:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '275:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '266:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '266:16:5'}, 'variableNames': [{'name': 'end', 'nodeType': 'YulIdentifier', 'src': '259:3:5'}]}]}, 'name': 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'pos', 'nodeType': 'YulTypedName', 'src': '127:3:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '132:6:5', 'type': ''}], 'returnVariables': [{'name': 'end', 'nodeType': 'YulTypedName', 'src': '143:3:5', 'type': ''}], 'src': '14:274:5'}, {'body': {'nodeType': 'YulBlock', 'src': '394:125:5', 'statements': [{'nodeType': 'YulAssignment', 'src': '404:26:5', 'value': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '416:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '427:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '412:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '412:18:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '404:4:5'}]}, {'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '446:9:5'}, {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '461:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '469:42:5', 'type': '', 'value': '0xffffffffffffffffffffffffffffffffffffffff'}], 'functionName': {'name': 'and', 'nodeType': 'YulIdentifier', 'src': '457:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '457:55:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '439:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '439:74:5'}, 'nodeType': 'YulExpressionStatement', 'src': '439:74:5'}]}, 'name': 'abi_encode_tuple_t_address__to_t_address__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '363:9:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '374:6:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '385:4:5', 'type': ''}], 'src': '293:226:5'}, {'body': {'nodeType': 'YulBlock', 'src': '645:262:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '662:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '673:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '655:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '655:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '655:21:5'}, {'nodeType': 'YulVariableDeclaration', 'src': '685:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '705:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '699:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '699:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '689:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '732:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '743:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '728:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '728:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '748:6:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '721:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '721:34:5'}, 'nodeType': 'YulExpressionStatement', 'src': '721:34:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '790:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '798:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '786:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '786:15:5'}, {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '807:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '818:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '803:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '803:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '823:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '764:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '764:66:5'}, 'nodeType': 'YulExpressionStatement', 'src': '764:66:5'}, {'nodeType': 'YulAssignment', 'src': '839:62:5', 'value': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '855:9:5'}, {'arguments': [{'arguments': [{'name': 'length', 'nodeType': 'YulIdentifier', 'src': '874:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '882:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '870:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '870:15:5'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '891:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'not', 'nodeType': 'YulIdentifier', 'src': '887:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '887:7:5'}], 'functionName': {'name': 'and', 'nodeType': 'YulIdentifier', 'src': '866:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '866:29:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '851:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '851:45:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '898:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '847:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '847:54:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '839:4:5'}]}]}, 'name': 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '614:9:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '625:6:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '636:4:5', 'type': ''}], 'src': '524:383:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1086:228:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1103:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1114:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1096:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1096:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1096:21:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1137:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1148:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1133:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1133:18:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1153:2:5', 'type': '', 'value': '38'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1126:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1126:30:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1126:30:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1176:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1187:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1172:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1172:18:5'}, {'hexValue': '416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '1192:34:5', 'type': '', 'value': 'Address: delegate call to non-co'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1165:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1165:62:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1165:62:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1247:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1258:2:5', 'type': '', 'value': '96'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1243:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1243:18:5'}, {'hexValue': '6e7472616374', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '1263:8:5', 'type': '', 'value': 'ntract'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1236:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1236:36:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1236:36:5'}, {'nodeType': 'YulAssignment', 'src': '1281:27:5', 'value': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1293:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1304:3:5', 'type': '', 'value': '128'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1289:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1289:19:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '1281:4:5'}]}]}, 'name': 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '1063:9:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '1077:4:5', 'type': ''}], 'src': '912:402:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1372:205:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '1382:10:5', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1391:1:5', 'type': '', 'value': '0'}, 'variables': [{'name': 'i', 'nodeType': 'YulTypedName', 'src': '1386:1:5', 'type': ''}]}, {'body': {'nodeType': 'YulBlock', 'src': '1451:63:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1476:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1481:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1472:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1472:11:5'}, {'arguments': [{'arguments': [{'name': 'src', 'nodeType': 'YulIdentifier', 'src': '1495:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1500:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1491:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1491:11:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '1485:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '1485:18:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1465:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1465:39:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1465:39:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1412:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1415:6:5'}], 'functionName': {'name': 'lt', 'nodeType': 'YulIdentifier', 'src': '1409:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1409:13:5'}, 'nodeType': 'YulForLoop', 'post': {'nodeType': 'YulBlock', 'src': '1423:19:5', 'statements': [{'nodeType': 'YulAssignment', 'src': '1425:15:5', 'value': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1434:1:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1437:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1430:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1430:10:5'}, 'variableNames': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1425:1:5'}]}]}, 'pre': {'nodeType': 'YulBlock', 'src': '1405:3:5', 'statements': []}, 'src': '1401:113:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1540:31:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1553:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1558:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1549:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1549:16:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1567:1:5', 'type': '', 'value': '0'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1542:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1542:27:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1542:27:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1529:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1532:6:5'}], 'functionName': {'name': 'gt', 'nodeType': 'YulIdentifier', 'src': '1526:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1526:13:5'}, 'nodeType': 'YulIf', 'src': '1523:48:5'}]}, 'name': 'copy_memory_to_memory', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'src', 'nodeType': 'YulTypedName', 'src': '1350:3:5', 'type': ''}, {'name': 'dst', 'nodeType': 'YulTypedName', 'src': '1355:3:5', 'type': ''}, {'name': 'length', 'nodeType': 'YulTypedName', 'src': '1360:6:5', 'type': ''}], 'src': '1319:258:5'}]}, 'contents': '{\n    { }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), "Address: delegate call to non-co")\n        mstore(add(headStart, 96), "ntract")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n}', 'id': 5, 'language': 'Yul', 'name': '#utility.yul'}], 'immutableReferences': {}, 'linkReferences': {}, 'object': '6080604052600436106100225760003560e01c80635c60da1b1461003957610031565b366100315761002f61006a565b005b61002f61006a565b34801561004557600080fd5b5061004e6100a5565b6040516001600160a01b03909116815260200160405180910390f35b6100a361009e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b61010c565b565b60006100d87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b90565b606061010583836040518060600160405280602781526020016102cb60279139610130565b9392505050565b3660008037600080366000845af43d6000803e80801561012b573d6000f35b3d6000fd5b60606001600160a01b0384163b61019d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101b8919061024b565b600060405180830381855af49150503d80600081146101f3576040519150601f19603f3d011682016040523d82523d6000602084013e6101f8565b606091505b5091509150610208828286610212565b9695505050505050565b60608315610221575081610105565b8251156102315782518084602001fd5b8160405162461bcd60e51b81526004016101949190610267565b6000825161025d81846020870161029a565b9190910192915050565b602081526000825180602084015261028681604085016020870161029a565b601f01601f19169190910160400192915050565b60005b838110156102b557818101518382015260200161029d565b838111156102c4576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122001f46ae50285ae0a6f161aec10a0c7e001b7dbb2b9ea6d5f9f8c5c932bbc999864736f6c63430008070033', 'opcodes': 'PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x39 JUMPI PUSH2 0x31 JUMP JUMPDEST CALLDATASIZE PUSH2 0x31 JUMPI PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH2 0x9E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD8 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x105 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2CB PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x130 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x12B JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0x24B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x208 DUP3 DUP3 DUP7 PUSH2 0x212 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x221 JUMPI POP DUP2 PUSH2 0x105 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x231 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x267 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x286 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x29D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122001F46A 0xE5 MUL DUP6 0xAE EXP PUSH16 0x161AEC10A0C7E001B7DBB2B9EA6D5F9F DUP13 0x5C SWAP4 0x2B 0xBC SWAP10 SWAP9 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ', 'sourceMap': '244:1108:3:-:0;;;;;;;;;;;;;;;;;;;;;;;2898:11:0;:9;:11::i;:::-;244:1108:3;;2675:11:0;:9;:11::i;1096:97:3:-;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;457:55:5;;;439:74;;427:2;412:18;1096:97:3;;;;;;;2322:110:0;2397:28;2407:17;950:66:3;1284:54;-1:-1:-1;;;;;1284:54:3;;1199:146;2407:17:0;2397:9;:28::i;:::-;2322:110::o;1096:97:3:-;1143:7;1169:17;950:66;1284:54;-1:-1:-1;;;;;1284:54:3;;1199:146;1169:17;1162:24;;1096:97;:::o;1599:147:2:-;1726:4;1599:147::o;6570:198:1:-;6653:12;6684:77;6705:6;6713:4;6684:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6677:84;6570:198;-1:-1:-1;;;6570:198:1:o;948:895:0:-;1286:14;1283:1;1280;1267:34;1500:1;1497;1481:14;1478:1;1462:14;1455:5;1442:60;1576:16;1573:1;1570;1555:38;1614:6;1681:66;;;;1796:16;1793:1;1786:27;1681:66;1716:16;1713:1;1706:27;6954:387:1;7095:12;-1:-1:-1;;;;;1465:19:1;;;7119:69;;;;-1:-1:-1;;;7119:69:1;;1114:2:5;7119:69:1;;;1096:21:5;1153:2;1133:18;;;1126:30;1192:34;1172:18;;;1165:62;-1:-1:-1;;;1243:18:5;;;1236:36;1289:19;;7119:69:1;;;;;;;;;7200:12;7214:23;7241:6;-1:-1:-1;;;;;7241:19:1;7261:4;7241:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7199:67;;;;7283:51;7300:7;7309:10;7321:12;7283:16;:51::i;:::-;7276:58;6954:387;-1:-1:-1;;;;;;6954:387:1:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:1;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:1;;;;;;;;:::i;14:274:5:-;143:3;181:6;175:13;197:53;243:6;238:3;231:4;223:6;219:17;197:53;:::i;:::-;266:16;;;;;14:274;-1:-1:-1;;14:274:5:o;524:383::-;673:2;662:9;655:21;636:4;705:6;699:13;748:6;743:2;732:9;728:18;721:34;764:66;823:6;818:2;807:9;803:18;798:2;790:6;786:15;764:66;:::i;:::-;891:2;870:15;-1:-1:-1;;866:29:5;851:45;;;;898:2;847:54;;524:383;-1:-1:-1;;524:383:5:o;1319:258::-;1391:1;1401:113;1415:6;1412:1;1409:13;1401:113;;;1491:11;;;1485:18;1472:11;;;1465:39;1437:2;1430:10;1401:113;;;1532:6;1529:1;1526:13;1523:48;;;1567:1;1558:6;1553:3;1549:16;1542:27;1523:48;;1319:258;;;:::o'}, 'legacyAssembly': {'.code': [{'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '80'}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 244, 'end': 1352, 'name': 'MSTORE', 'source': 3}, {'begin': 284, 'end': 676, 'name': 'CALLVALUE', 'source': 3}, {'begin': 284, 'end': 676, 'name': 'DUP1', 'source': 3}, {'begin': 284, 'end': 676, 'name': 'ISZERO', 'source': 3}, {'begin': 284, 'end': 676, 'name': 'PUSH [tag]', 'source': 3, 'value': '1'}, {'begin': 284, 'end': 676, 'name': 'JUMPI', 'source': 3}, {'begin': 284, 'end': 676, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 284, 'end': 676, 'name': 'DUP1', 'source': 3}, {'begin': 284, 'end': 676, 'name': 'REVERT', 'source': 3}, {'begin': 284, 'end': 676, 'name': 'tag', 'source': 3, 'value': '1'}, {'begin': 284, 'end': 676, 'name': 'JUMPDEST', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 347, 'end': 401, 'name': 'PUSH [tag]', 'source': 3, 'value': '4'}, {'begin': 400, 'end': 401, 'name': 'PUSH', 'source': 3, 'value': '1'}, {'begin': 355, 'end': 396, 'name': 'PUSH', 'source': 3, 'value': '360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD'}, {'begin': 347, 'end': 401, 'name': 'PUSH [tag]', 'source': 3, 'value': '5'}, {'begin': 347, 'end': 401, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 347, 'end': 401, 'name': 'tag', 'source': 3, 'value': '4'}, {'begin': 347, 'end': 401, 'name': 'JUMPDEST', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '0'}, {'begin': -1, 'end': -1, 'name': 'DUP1', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '20'}, {'begin': -1, 'end': -1, 'name': 'PUSH data', 'source': -1, 'value': '75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D'}, {'begin': -1, 'end': -1, 'name': 'DUP4', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'CODECOPY', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'DUP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SWAP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MSTORE', 'source': -1}, {'begin': 315, 'end': 402, 'name': 'EQ', 'source': 3}, {'begin': 308, 'end': 403, 'name': 'PUSH [tag]', 'source': 3, 'value': '7'}, {'begin': 308, 'end': 403, 'name': 'JUMPI', 'source': 3}, {'begin': 308, 'end': 403, 'name': 'PUSH [tag]', 'source': 3, 'value': '7'}, {'begin': 308, 'end': 403, 'name': 'PUSH [tag]', 'source': 3, 'value': '8'}, {'begin': 308, 'end': 403, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 308, 'end': 403, 'name': 'tag', 'source': 3, 'value': '7'}, {'begin': 308, 'end': 403, 'name': 'JUMPDEST', 'source': 3}, {'begin': 470, 'end': 512, 'name': 'PUSH', 'source': 3, 'value': '142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4'}, {'begin': 413, 'end': 461, 'name': 'PUSH [tag]', 'source': 3, 'value': '9'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '0'}, {'begin': -1, 'end': -1, 'name': 'DUP1', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '20'}, {'begin': -1, 'end': -1, 'name': 'PUSH data', 'source': -1, 'value': '75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D'}, {'begin': -1, 'end': -1, 'name': 'DUP4', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'CODECOPY', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'DUP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SWAP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MSTORE', 'source': -1}, {'begin': 440, 'end': 460, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 440, 'end': 460, 'name': 'SHL', 'source': 3}, {'begin': 413, 'end': 439, 'name': 'PUSH [tag]', 'source': 3, 'value': '10'}, {'begin': 413, 'end': 439, 'name': 'PUSH', 'source': 3, 'value': '20'}, {'begin': 413, 'end': 439, 'name': 'SHL', 'source': 3}, {'begin': 413, 'end': 439, 'name': 'PUSH [tag]', 'source': 3, 'value': '18446744073709551632'}, {'begin': 413, 'end': 439, 'name': 'OR', 'source': 3}, {'begin': 413, 'end': 461, 'name': 'PUSH', 'source': 3, 'value': '20'}, {'begin': 413, 'end': 461, 'name': 'SHR', 'source': 3}, {'begin': 413, 'end': 461, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 413, 'end': 461, 'name': 'tag', 'source': 3, 'value': '9'}, {'begin': 413, 'end': 461, 'name': 'JUMPDEST', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'DUP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 413, 'end': 512, 'name': 'SWAP3', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP3', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'AND', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'NOT', 'source': -1}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP3', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'AND', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP2', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP2', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'OR', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SSTORE', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 620, 'end': 659, 'name': 'DUP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MLOAD', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '4'}, {'begin': 620, 'end': 659, 'name': 'DUP2', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MSTORE', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '24'}, {'begin': 620, 'end': 659, 'name': 'DUP2', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'ADD', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'SWAP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'SWAP2', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MSTORE', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '20'}, {'begin': 620, 'end': 659, 'name': 'DUP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'DUP3', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'ADD', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'DUP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 620, 'end': 659, 'name': 'AND', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '204A7F07'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E2'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 620, 'end': 659, 'name': 'OR', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'SWAP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MSTORE', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'PUSH [tag]', 'source': 3, 'value': '11'}, {'begin': 522, 'end': 669, 'name': 'SWAP2', 'source': 3}, {'begin': 564, 'end': 606, 'name': 'PUSH', 'source': 3, 'value': '142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4'}, {'begin': 564, 'end': 606, 'name': 'SWAP2', 'source': 3}, {'begin': 522, 'end': 550, 'name': 'PUSH [tag]', 'source': 3, 'value': '18446744073709551633'}, {'begin': 522, 'end': 550, 'name': 'PUSH [tag]', 'source': 3, 'value': '12'}, {'begin': 522, 'end': 550, 'name': 'DUP3', 'source': 3}, {'begin': 522, 'end': 550, 'name': 'SHL', 'source': 3}, {'begin': 522, 'end': 550, 'name': 'OR', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'SWAP1', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'SHR', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 522, 'end': 669, 'name': 'tag', 'source': 3, 'value': '11'}, {'begin': 522, 'end': 669, 'name': 'JUMPDEST', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'POP', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH [tag]', 'source': 3, 'value': '39'}, {'begin': 244, 'end': 1352, 'name': 'JUMP', 'source': 3}, {'begin': 1599, 'end': 1746, 'name': 'tag', 'source': 2, 'value': '10'}, {'begin': 1599, 'end': 1746, 'name': 'JUMPDEST', 'source': 2}, {'begin': 1726, 'end': 1730, 'name': 'SWAP1', 'source': 2}, {'begin': 1599, 'end': 1746, 'name': 'JUMP', 'source': 2, 'value': '[out]'}, {'begin': 6570, 'end': 6768, 'name': 'tag', 'source': 1, 'value': '12'}, {'begin': 6570, 'end': 6768, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6653, 'end': 6665, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH [tag]', 'source': 1, 'value': '16'}, {'begin': 6705, 'end': 6711, 'name': 'DUP4', 'source': 1}, {'begin': 6713, 'end': 6717, 'name': 'DUP4', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MLOAD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'DUP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH data', 'source': 1, 'value': '9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'SWAP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'CODECOPY', 'source': 1}, {'begin': 6684, 'end': 6704, 'name': 'PUSH [tag]', 'source': 1, 'value': '17'}, {'begin': 6684, 'end': 6761, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 6684, 'end': 6761, 'name': 'tag', 'source': 1, 'value': '16'}, {'begin': 6684, 'end': 6761, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6677, 'end': 6761, 'name': 'SWAP4', 'source': 1}, {'begin': 6570, 'end': 6768, 'name': 'SWAP3', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6570, 'end': 6768, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 6954, 'end': 7341, 'name': 'tag', 'source': 1, 'value': '17'}, {'begin': 6954, 'end': 7341, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7095, 'end': 7107, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1465, 'end': 1484, 'name': 'DUP5', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'AND', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'EXTCODESIZE', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH [tag]', 'source': 1, 'value': '21'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPI', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 7119, 'end': 7188, 'name': 'DUP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'MSTORE', 'source': 1}, {'begin': 883, 'end': 885, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 7119, 'end': 7188, 'name': 'DUP3', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'ADD', 'source': 1}, {'begin': 865, 'end': 886, 'name': 'MSTORE', 'source': 5}, {'begin': 922, 'end': 924, 'name': 'PUSH', 'source': 5, 'value': '26'}, {'begin': 902, 'end': 920, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 902, 'end': 920, 'name': 'DUP3', 'source': 5}, {'begin': 902, 'end': 920, 'name': 'ADD', 'source': 5}, {'begin': 895, 'end': 925, 'name': 'MSTORE', 'source': 5}, {'begin': 961, 'end': 995, 'name': 'PUSH', 'source': 5, 'value': '416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F'}, {'begin': 941, 'end': 959, 'name': 'PUSH', 'source': 5, 'value': '44'}, {'begin': 941, 'end': 959, 'name': 'DUP3', 'source': 5}, {'begin': 941, 'end': 959, 'name': 'ADD', 'source': 5}, {'begin': 934, 'end': 996, 'name': 'MSTORE', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1B9D1C9858DD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'D2'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 1012, 'end': 1030, 'name': 'PUSH', 'source': 5, 'value': '64'}, {'begin': 1012, 'end': 1030, 'name': 'DUP3', 'source': 5}, {'begin': 1012, 'end': 1030, 'name': 'ADD', 'source': 5}, {'begin': 1005, 'end': 1041, 'name': 'MSTORE', 'source': 5}, {'begin': 1058, 'end': 1077, 'name': 'PUSH', 'source': 5, 'value': '84'}, {'begin': 1058, 'end': 1077, 'name': 'ADD', 'source': 5}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '22'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'DUP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SUB', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'REVERT', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '21'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7200, 'end': 7212, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7214, 'end': 7237, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7247, 'name': 'DUP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 7241, 'end': 7260, 'name': 'AND', 'source': 1}, {'begin': 7261, 'end': 7265, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '24'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '25'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '24'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP4', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SUB', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'GAS', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DELEGATECALL', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'EQ', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '28'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPI', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '1F'}, {'begin': 7241, 'end': 7266, 'name': 'NOT', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '3F'}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'AND', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 7241, 'end': 7266, 'name': 'DUP5', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATACOPY', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '27'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '28'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '27'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP3', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7283, 'end': 7334, 'name': 'PUSH [tag]', 'source': 1, 'value': '29'}, {'begin': 7199, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7321, 'end': 7333, 'name': 'DUP7', 'source': 1}, {'begin': 7283, 'end': 7299, 'name': 'PUSH [tag]', 'source': 1, 'value': '30'}, {'begin': 7283, 'end': 7334, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7283, 'end': 7334, 'name': 'tag', 'source': 1, 'value': '29'}, {'begin': 7283, 'end': 7334, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7276, 'end': 7334, 'name': 'SWAP7', 'source': 1}, {'begin': 6954, 'end': 7341, 'name': 'SWAP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6954, 'end': 7341, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 7561, 'end': 8253, 'name': 'tag', 'source': 1, 'value': '30'}, {'begin': 7561, 'end': 8253, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7707, 'end': 7719, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7735, 'end': 7742, 'name': 'DUP4', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'ISZERO', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'PUSH [tag]', 'source': 1, 'value': '33'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPI', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7765, 'end': 7775, 'name': 'DUP2', 'source': 1}, {'begin': 7758, 'end': 7775, 'name': 'PUSH [tag]', 'source': 1, 'value': '16'}, {'begin': 7758, 'end': 7775, 'name': 'JUMP', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'tag', 'source': 1, 'value': '33'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'DUP3', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'MLOAD', 'source': 1}, {'begin': 7876, 'end': 7897, 'name': 'ISZERO', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'PUSH [tag]', 'source': 1, 'value': '35'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPI', 'source': 1}, {'begin': 8070, 'end': 8080, 'name': 'DUP3', 'source': 1}, {'begin': 8064, 'end': 8081, 'name': 'MLOAD', 'source': 1}, {'begin': 8130, 'end': 8145, 'name': 'DUP1', 'source': 1}, {'begin': 8117, 'end': 8127, 'name': 'DUP5', 'source': 1}, {'begin': 8113, 'end': 8115, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 8109, 'end': 8128, 'name': 'ADD', 'source': 1}, {'begin': 8102, 'end': 8146, 'name': 'REVERT', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'tag', 'source': 1, 'value': '35'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPDEST', 'source': 1}, {'begin': 8209, 'end': 8221, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 8202, 'end': 8222, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 8202, 'end': 8222, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'MSTORE', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 8202, 'end': 8222, 'name': 'ADD', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '22'}, {'begin': 8202, 'end': 8222, 'name': 'SWAP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'SWAP1', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '38'}, {'begin': 8202, 'end': 8222, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 14, 'end': 288, 'name': 'tag', 'source': 5, 'value': '25'}, {'begin': 14, 'end': 288, 'name': 'JUMPDEST', 'source': 5}, {'begin': 143, 'end': 146, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 181, 'end': 187, 'name': 'DUP3', 'source': 5}, {'begin': 175, 'end': 188, 'name': 'MLOAD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '41'}, {'begin': 243, 'end': 249, 'name': 'DUP2', 'source': 5}, {'begin': 238, 'end': 241, 'name': 'DUP5', 'source': 5}, {'begin': 231, 'end': 235, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 223, 'end': 229, 'name': 'DUP8', 'source': 5}, {'begin': 219, 'end': 236, 'name': 'ADD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '42'}, {'begin': 197, 'end': 250, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 197, 'end': 250, 'name': 'tag', 'source': 5, 'value': '41'}, {'begin': 197, 'end': 250, 'name': 'JUMPDEST', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP1', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'ADD', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP3', 'source': 5}, {'begin': 14, 'end': 288, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 14, 'end': 288, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 293, 'end': 676, 'name': 'tag', 'source': 5, 'value': '38'}, {'begin': 293, 'end': 676, 'name': 'JUMPDEST', 'source': 5}, {'begin': 442, 'end': 444, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 431, 'end': 440, 'name': 'DUP2', 'source': 5}, {'begin': 424, 'end': 445, 'name': 'MSTORE', 'source': 5}, {'begin': 405, 'end': 409, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 474, 'end': 480, 'name': 'DUP3', 'source': 5}, {'begin': 468, 'end': 481, 'name': 'MLOAD', 'source': 5}, {'begin': 517, 'end': 523, 'name': 'DUP1', 'source': 5}, {'begin': 512, 'end': 514, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 501, 'end': 510, 'name': 'DUP5', 'source': 5}, {'begin': 497, 'end': 515, 'name': 'ADD', 'source': 5}, {'begin': 490, 'end': 524, 'name': 'MSTORE', 'source': 5}, {'begin': 533, 'end': 599, 'name': 'PUSH [tag]', 'source': 5, 'value': '44'}, {'begin': 592, 'end': 598, 'name': 'DUP2', 'source': 5}, {'begin': 587, 'end': 589, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 576, 'end': 585, 'name': 'DUP6', 'source': 5}, {'begin': 572, 'end': 590, 'name': 'ADD', 'source': 5}, {'begin': 567, 'end': 569, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 559, 'end': 565, 'name': 'DUP8', 'source': 5}, {'begin': 555, 'end': 570, 'name': 'ADD', 'source': 5}, {'begin': 533, 'end': 599, 'name': 'PUSH [tag]', 'source': 5, 'value': '42'}, {'begin': 533, 'end': 599, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 533, 'end': 599, 'name': 'tag', 'source': 5, 'value': '44'}, {'begin': 533, 'end': 599, 'name': 'JUMPDEST', 'source': 5}, {'begin': 660, 'end': 662, 'name': 'PUSH', 'source': 5, 'value': '1F'}, {'begin': 639, 'end': 654, 'name': 'ADD', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1F'}, {'begin': -1, 'end': -1, 'name': 'NOT', 'source': -1}, {'begin': 635, 'end': 664, 'name': 'AND', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'SWAP2', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'SWAP1', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'SWAP2', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'ADD', 'source': 5}, {'begin': 667, 'end': 669, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 616, 'end': 670, 'name': 'ADD', 'source': 5}, {'begin': 616, 'end': 670, 'name': 'SWAP3', 'source': 5}, {'begin': 293, 'end': 676, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 293, 'end': 676, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1088, 'end': 1310, 'name': 'tag', 'source': 5, 'value': '5'}, {'begin': 1088, 'end': 1310, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1128, 'end': 1132, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1156, 'end': 1157, 'name': 'DUP3', 'source': 5}, {'begin': 1153, 'end': 1154, 'name': 'DUP3', 'source': 5}, {'begin': 1150, 'end': 1158, 'name': 'LT', 'source': 5}, {'begin': 1147, 'end': 1278, 'name': 'ISZERO', 'source': 5}, {'begin': 1147, 'end': 1278, 'name': 'PUSH [tag]', 'source': 5, 'value': '47'}, {'begin': 1147, 'end': 1278, 'name': 'JUMPI', 'source': 5}, {'begin': 1200, 'end': 1210, 'name': 'PUSH', 'source': 5, 'value': '4E487B71'}, {'begin': 1195, 'end': 1198, 'name': 'PUSH', 'source': 5, 'value': 'E0'}, {'begin': 1191, 'end': 1211, 'name': 'SHL', 'source': 5}, {'begin': 1188, 'end': 1189, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1181, 'end': 1212, 'name': 'MSTORE', 'source': 5}, {'begin': 1235, 'end': 1239, 'name': 'PUSH', 'source': 5, 'value': '11'}, {'begin': 1232, 'end': 1233, 'name': 'PUSH', 'source': 5, 'value': '4'}, {'begin': 1225, 'end': 1240, 'name': 'MSTORE', 'source': 5}, {'begin': 1263, 'end': 1267, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 1260, 'end': 1261, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1253, 'end': 1268, 'name': 'REVERT', 'source': 5}, {'begin': 1147, 'end': 1278, 'name': 'tag', 'source': 5, 'value': '47'}, {'begin': 1147, 'end': 1278, 'name': 'JUMPDEST', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 1295, 'end': 1304, 'name': 'SUB', 'source': 5}, {'begin': 1295, 'end': 1304, 'name': 'SWAP1', 'source': 5}, {'begin': 1088, 'end': 1310, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1315, 'end': 1573, 'name': 'tag', 'source': 5, 'value': '42'}, {'begin': 1315, 'end': 1573, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1387, 'end': 1388, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1397, 'end': 1510, 'name': 'tag', 'source': 5, 'value': '49'}, {'begin': 1397, 'end': 1510, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1411, 'end': 1417, 'name': 'DUP4', 'source': 5}, {'begin': 1408, 'end': 1409, 'name': 'DUP2', 'source': 5}, {'begin': 1405, 'end': 1418, 'name': 'LT', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'ISZERO', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'PUSH [tag]', 'source': 5, 'value': '51'}, {'begin': 1397, 'end': 1510, 'name': 'JUMPI', 'source': 5}, {'begin': 1487, 'end': 1498, 'name': 'DUP2', 'source': 5}, {'begin': 1487, 'end': 1498, 'name': 'DUP2', 'source': 5}, {'begin': 1487, 'end': 1498, 'name': 'ADD', 'source': 5}, {'begin': 1481, 'end': 1499, 'name': 'MLOAD', 'source': 5}, {'begin': 1468, 'end': 1479, 'name': 'DUP4', 'source': 5}, {'begin': 1468, 'end': 1479, 'name': 'DUP3', 'source': 5}, {'begin': 1468, 'end': 1479, 'name': 'ADD', 'source': 5}, {'begin': 1461, 'end': 1500, 'name': 'MSTORE', 'source': 5}, {'begin': 1433, 'end': 1435, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 1426, 'end': 1436, 'name': 'ADD', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'PUSH [tag]', 'source': 5, 'value': '49'}, {'begin': 1397, 'end': 1510, 'name': 'JUMP', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'tag', 'source': 5, 'value': '51'}, {'begin': 1397, 'end': 1510, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1528, 'end': 1534, 'name': 'DUP4', 'source': 5}, {'begin': 1525, 'end': 1526, 'name': 'DUP2', 'source': 5}, {'begin': 1522, 'end': 1535, 'name': 'GT', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'ISZERO', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'PUSH [tag]', 'source': 5, 'value': '52'}, {'begin': 1519, 'end': 1567, 'name': 'JUMPI', 'source': 5}, {'begin': 1563, 'end': 1564, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1554, 'end': 1560, 'name': 'DUP5', 'source': 5}, {'begin': 1549, 'end': 1552, 'name': 'DUP5', 'source': 5}, {'begin': 1545, 'end': 1561, 'name': 'ADD', 'source': 5}, {'begin': 1538, 'end': 1565, 'name': 'MSTORE', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'tag', 'source': 5, 'value': '52'}, {'begin': 1519, 'end': 1567, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1578, 'end': 1705, 'name': 'tag', 'source': 5, 'value': '8'}, {'begin': 1578, 'end': 1705, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1639, 'end': 1649, 'name': 'PUSH', 'source': 5, 'value': '4E487B71'}, {'begin': 1634, 'end': 1637, 'name': 'PUSH', 'source': 5, 'value': 'E0'}, {'begin': 1630, 'end': 1650, 'name': 'SHL', 'source': 5}, {'begin': 1627, 'end': 1628, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1620, 'end': 1651, 'name': 'MSTORE', 'source': 5}, {'begin': 1670, 'end': 1674, 'name': 'PUSH', 'source': 5, 'value': '1'}, {'begin': 1667, 'end': 1668, 'name': 'PUSH', 'source': 5, 'value': '4'}, {'begin': 1660, 'end': 1675, 'name': 'MSTORE', 'source': 5}, {'begin': 1694, 'end': 1698, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 1691, 'end': 1692, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1684, 'end': 1699, 'name': 'REVERT', 'source': 5}, {'begin': 1578, 'end': 1705, 'name': 'tag', 'source': 5, 'value': '39'}, {'begin': 1578, 'end': 1705, 'name': 'JUMPDEST', 'source': 5}, {'begin': 244, 'end': 1352, 'name': 'PUSH #[$]', 'source': 3, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 244, 'end': 1352, 'name': 'DUP1', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH [$]', 'source': 3, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 244, 'end': 1352, 'name': 'CODECOPY', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 244, 'end': 1352, 'name': 'RETURN', 'source': 3}], '.data': {'0': {'.auxdata': 'a264697066735822122001f46ae50285ae0a6f161aec10a0c7e001b7dbb2b9ea6d5f9f8c5c932bbc999864736f6c63430008070033', '.code': [{'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '80'}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 244, 'end': 1352, 'name': 'MSTORE', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '4'}, {'begin': 244, 'end': 1352, 'name': 'CALLDATASIZE', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'LT', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH [tag]', 'source': 3, 'value': '1'}, {'begin': 244, 'end': 1352, 'name': 'JUMPI', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 244, 'end': 1352, 'name': 'CALLDATALOAD', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': 'E0'}, {'begin': 244, 'end': 1352, 'name': 'SHR', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'DUP1', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH', 'source': 3, 'value': '5C60DA1B'}, {'begin': 244, 'end': 1352, 'name': 'EQ', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH [tag]', 'source': 3, 'value': '3'}, {'begin': 244, 'end': 1352, 'name': 'JUMPI', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH [tag]', 'source': 3, 'value': '2'}, {'begin': 244, 'end': 1352, 'name': 'JUMP', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'tag', 'source': 3, 'value': '1'}, {'begin': 244, 'end': 1352, 'name': 'JUMPDEST', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'CALLDATASIZE', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'PUSH [tag]', 'source': 3, 'value': '2'}, {'begin': 244, 'end': 1352, 'name': 'JUMPI', 'source': 3}, {'begin': 2898, 'end': 2909, 'name': 'PUSH [tag]', 'source': 0, 'value': '6'}, {'begin': 2898, 'end': 2907, 'name': 'PUSH [tag]', 'source': 0, 'value': '7'}, {'begin': 2898, 'end': 2909, 'name': 'JUMP', 'source': 0, 'value': '[in]'}, {'begin': 2898, 'end': 2909, 'name': 'tag', 'source': 0, 'value': '6'}, {'begin': 2898, 'end': 2909, 'name': 'JUMPDEST', 'source': 0}, {'begin': 244, 'end': 1352, 'name': 'STOP', 'source': 3}, {'begin': 244, 'end': 1352, 'name': 'tag', 'source': 3, 'value': '2'}, {'begin': 244, 'end': 1352, 'name': 'JUMPDEST', 'source': 3}, {'begin': 2675, 'end': 2686, 'name': 'PUSH [tag]', 'source': 0, 'value': '6'}, {'begin': 2675, 'end': 2684, 'name': 'PUSH [tag]', 'source': 0, 'value': '7'}, {'begin': 2675, 'end': 2686, 'name': 'JUMP', 'source': 0, 'value': '[in]'}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '3'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'CALLVALUE', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'DUP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'ISZERO', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH [tag]', 'source': 3, 'value': '11'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPI', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 1096, 'end': 1193, 'name': 'DUP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'REVERT', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '11'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'POP', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH [tag]', 'source': 3, 'value': '12'}, {'begin': 1096, 'end': 1193, 'name': 'PUSH [tag]', 'source': 3, 'value': '13'}, {'begin': 1096, 'end': 1193, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '12'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 1096, 'end': 1193, 'name': 'MLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 457, 'end': 512, 'name': 'SWAP1', 'source': 5}, {'begin': 457, 'end': 512, 'name': 'SWAP2', 'source': 5}, {'begin': 457, 'end': 512, 'name': 'AND', 'source': 5}, {'begin': 439, 'end': 513, 'name': 'DUP2', 'source': 5}, {'begin': 439, 'end': 513, 'name': 'MSTORE', 'source': 5}, {'begin': 427, 'end': 429, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 412, 'end': 430, 'name': 'ADD', 'source': 5}, {'begin': 1096, 'end': 1193, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 1096, 'end': 1193, 'name': 'MLOAD', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'DUP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SWAP2', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SUB', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SWAP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'RETURN', 'source': 3}, {'begin': 2322, 'end': 2432, 'name': 'tag', 'source': 0, 'value': '7'}, {'begin': 2322, 'end': 2432, 'name': 'JUMPDEST', 'source': 0}, {'begin': 2397, 'end': 2425, 'name': 'PUSH [tag]', 'source': 0, 'value': '21'}, {'begin': 2407, 'end': 2424, 'name': 'PUSH [tag]', 'source': 0, 'value': '22'}, {'begin': 950, 'end': 1016, 'name': 'PUSH', 'source': 3, 'value': '360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC'}, {'begin': 1284, 'end': 1338, 'name': 'SLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1284, 'end': 1338, 'name': 'AND', 'source': 3}, {'begin': 1284, 'end': 1338, 'name': 'SWAP1', 'source': 3}, {'begin': 1199, 'end': 1345, 'name': 'JUMP', 'source': 3}, {'begin': 2407, 'end': 2424, 'name': 'tag', 'source': 0, 'value': '22'}, {'begin': 2407, 'end': 2424, 'name': 'JUMPDEST', 'source': 0}, {'begin': 2397, 'end': 2406, 'name': 'PUSH [tag]', 'source': 0, 'value': '24'}, {'begin': 2397, 'end': 2425, 'name': 'JUMP', 'source': 0, 'value': '[in]'}, {'begin': 2397, 'end': 2425, 'name': 'tag', 'source': 0, 'value': '21'}, {'begin': 2397, 'end': 2425, 'name': 'JUMPDEST', 'source': 0}, {'begin': 2322, 'end': 2432, 'name': 'JUMP', 'source': 0, 'value': '[out]'}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '13'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1143, 'end': 1150, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 1169, 'end': 1186, 'name': 'PUSH [tag]', 'source': 3, 'value': '26'}, {'begin': 950, 'end': 1016, 'name': 'PUSH', 'source': 3, 'value': '360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC'}, {'begin': 1284, 'end': 1338, 'name': 'SLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1284, 'end': 1338, 'name': 'AND', 'source': 3}, {'begin': 1284, 'end': 1338, 'name': 'SWAP1', 'source': 3}, {'begin': 1199, 'end': 1345, 'name': 'JUMP', 'source': 3}, {'begin': 1169, 'end': 1186, 'name': 'tag', 'source': 3, 'value': '26'}, {'begin': 1169, 'end': 1186, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1162, 'end': 1186, 'name': 'SWAP1', 'source': 3}, {'begin': 1162, 'end': 1186, 'name': 'POP', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SWAP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'JUMP', 'source': 3, 'value': '[out]'}, {'begin': 1599, 'end': 1746, 'name': 'tag', 'source': 2, 'value': '16'}, {'begin': 1599, 'end': 1746, 'name': 'JUMPDEST', 'source': 2}, {'begin': 1726, 'end': 1730, 'name': 'SWAP1', 'source': 2}, {'begin': 1599, 'end': 1746, 'name': 'JUMP', 'source': 2, 'value': '[out]'}, {'begin': 6570, 'end': 6768, 'name': 'tag', 'source': 1, 'value': '17'}, {'begin': 6570, 'end': 6768, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6653, 'end': 6665, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH [tag]', 'source': 1, 'value': '29'}, {'begin': 6705, 'end': 6711, 'name': 'DUP4', 'source': 1}, {'begin': 6713, 'end': 6717, 'name': 'DUP4', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MLOAD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'DUP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH data', 'source': 1, 'value': '9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'SWAP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'CODECOPY', 'source': 1}, {'begin': 6684, 'end': 6704, 'name': 'PUSH [tag]', 'source': 1, 'value': '30'}, {'begin': 6684, 'end': 6761, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 6684, 'end': 6761, 'name': 'tag', 'source': 1, 'value': '29'}, {'begin': 6684, 'end': 6761, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6677, 'end': 6761, 'name': 'SWAP4', 'source': 1}, {'begin': 6570, 'end': 6768, 'name': 'SWAP3', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6570, 'end': 6768, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 948, 'end': 1843, 'name': 'tag', 'source': 0, 'value': '24'}, {'begin': 948, 'end': 1843, 'name': 'JUMPDEST', 'source': 0}, {'begin': 1286, 'end': 1300, 'name': 'CALLDATASIZE', 'source': 0}, {'begin': 1283, 'end': 1284, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1280, 'end': 1281, 'name': 'DUP1', 'source': 0}, {'begin': 1267, 'end': 1301, 'name': 'CALLDATACOPY', 'source': 0}, {'begin': 1500, 'end': 1501, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1497, 'end': 1498, 'name': 'DUP1', 'source': 0}, {'begin': 1481, 'end': 1495, 'name': 'CALLDATASIZE', 'source': 0}, {'begin': 1478, 'end': 1479, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1462, 'end': 1476, 'name': 'DUP5', 'source': 0}, {'begin': 1455, 'end': 1460, 'name': 'GAS', 'source': 0}, {'begin': 1442, 'end': 1502, 'name': 'DELEGATECALL', 'source': 0}, {'begin': 1576, 'end': 1592, 'name': 'RETURNDATASIZE', 'source': 0}, {'begin': 1573, 'end': 1574, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1570, 'end': 1571, 'name': 'DUP1', 'source': 0}, {'begin': 1555, 'end': 1593, 'name': 'RETURNDATACOPY', 'source': 0}, {'begin': 1614, 'end': 1620, 'name': 'DUP1', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'DUP1', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'ISZERO', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'PUSH [tag]', 'source': 0, 'value': '36'}, {'begin': 1681, 'end': 1747, 'name': 'JUMPI', 'source': 0}, {'begin': 1796, 'end': 1812, 'name': 'RETURNDATASIZE', 'source': 0}, {'begin': 1793, 'end': 1794, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1786, 'end': 1813, 'name': 'RETURN', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'tag', 'source': 0, 'value': '36'}, {'begin': 1681, 'end': 1747, 'name': 'JUMPDEST', 'source': 0}, {'begin': 1716, 'end': 1732, 'name': 'RETURNDATASIZE', 'source': 0}, {'begin': 1713, 'end': 1714, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1706, 'end': 1733, 'name': 'REVERT', 'source': 0}, {'begin': 6954, 'end': 7341, 'name': 'tag', 'source': 1, 'value': '30'}, {'begin': 6954, 'end': 7341, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7095, 'end': 7107, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1465, 'end': 1484, 'name': 'DUP5', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'AND', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'EXTCODESIZE', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH [tag]', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPI', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 7119, 'end': 7188, 'name': 'DUP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'MSTORE', 'source': 1}, {'begin': 1114, 'end': 1116, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 7119, 'end': 7188, 'name': 'DUP3', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'ADD', 'source': 1}, {'begin': 1096, 'end': 1117, 'name': 'MSTORE', 'source': 5}, {'begin': 1153, 'end': 1155, 'name': 'PUSH', 'source': 5, 'value': '26'}, {'begin': 1133, 'end': 1151, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 1133, 'end': 1151, 'name': 'DUP3', 'source': 5}, {'begin': 1133, 'end': 1151, 'name': 'ADD', 'source': 5}, {'begin': 1126, 'end': 1156, 'name': 'MSTORE', 'source': 5}, {'begin': 1192, 'end': 1226, 'name': 'PUSH', 'source': 5, 'value': '416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F'}, {'begin': 1172, 'end': 1190, 'name': 'PUSH', 'source': 5, 'value': '44'}, {'begin': 1172, 'end': 1190, 'name': 'DUP3', 'source': 5}, {'begin': 1172, 'end': 1190, 'name': 'ADD', 'source': 5}, {'begin': 1165, 'end': 1227, 'name': 'MSTORE', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1B9D1C9858DD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'D2'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 1243, 'end': 1261, 'name': 'PUSH', 'source': 5, 'value': '64'}, {'begin': 1243, 'end': 1261, 'name': 'DUP3', 'source': 5}, {'begin': 1243, 'end': 1261, 'name': 'ADD', 'source': 5}, {'begin': 1236, 'end': 1272, 'name': 'MSTORE', 'source': 5}, {'begin': 1289, 'end': 1308, 'name': 'PUSH', 'source': 5, 'value': '84'}, {'begin': 1289, 'end': 1308, 'name': 'ADD', 'source': 5}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '41'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'DUP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SUB', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'REVERT', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7200, 'end': 7212, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7214, 'end': 7237, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7247, 'name': 'DUP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 7241, 'end': 7260, 'name': 'AND', 'source': 1}, {'begin': 7261, 'end': 7265, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '43'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '44'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '43'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP4', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SUB', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'GAS', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DELEGATECALL', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'EQ', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '47'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPI', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '1F'}, {'begin': 7241, 'end': 7266, 'name': 'NOT', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '3F'}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'AND', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 7241, 'end': 7266, 'name': 'DUP5', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATACOPY', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '46'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '47'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '46'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7283, 'end': 7334, 'name': 'PUSH [tag]', 'source': 1, 'value': '48'}, {'begin': 7300, 'end': 7307, 'name': 'DUP3', 'source': 1}, {'begin': 7309, 'end': 7319, 'name': 'DUP3', 'source': 1}, {'begin': 7321, 'end': 7333, 'name': 'DUP7', 'source': 1}, {'begin': 7283, 'end': 7299, 'name': 'PUSH [tag]', 'source': 1, 'value': '49'}, {'begin': 7283, 'end': 7334, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7283, 'end': 7334, 'name': 'tag', 'source': 1, 'value': '48'}, {'begin': 7283, 'end': 7334, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7276, 'end': 7334, 'name': 'SWAP7', 'source': 1}, {'begin': 6954, 'end': 7341, 'name': 'SWAP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6954, 'end': 7341, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 7561, 'end': 8253, 'name': 'tag', 'source': 1, 'value': '49'}, {'begin': 7561, 'end': 8253, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7707, 'end': 7719, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7735, 'end': 7742, 'name': 'DUP4', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'ISZERO', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'PUSH [tag]', 'source': 1, 'value': '52'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPI', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7765, 'end': 7775, 'name': 'DUP2', 'source': 1}, {'begin': 7758, 'end': 7775, 'name': 'PUSH [tag]', 'source': 1, 'value': '29'}, {'begin': 7758, 'end': 7775, 'name': 'JUMP', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'tag', 'source': 1, 'value': '52'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'DUP3', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'MLOAD', 'source': 1}, {'begin': 7876, 'end': 7897, 'name': 'ISZERO', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'PUSH [tag]', 'source': 1, 'value': '54'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPI', 'source': 1}, {'begin': 8070, 'end': 8080, 'name': 'DUP3', 'source': 1}, {'begin': 8064, 'end': 8081, 'name': 'MLOAD', 'source': 1}, {'begin': 8130, 'end': 8145, 'name': 'DUP1', 'source': 1}, {'begin': 8117, 'end': 8127, 'name': 'DUP5', 'source': 1}, {'begin': 8113, 'end': 8115, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 8109, 'end': 8128, 'name': 'ADD', 'source': 1}, {'begin': 8102, 'end': 8146, 'name': 'REVERT', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'tag', 'source': 1, 'value': '54'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPDEST', 'source': 1}, {'begin': 8209, 'end': 8221, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 8202, 'end': 8222, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 8202, 'end': 8222, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'MSTORE', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 8202, 'end': 8222, 'name': 'ADD', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '41'}, {'begin': 8202, 'end': 8222, 'name': 'SWAP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'SWAP1', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '57'}, {'begin': 8202, 'end': 8222, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 14, 'end': 288, 'name': 'tag', 'source': 5, 'value': '44'}, {'begin': 14, 'end': 288, 'name': 'JUMPDEST', 'source': 5}, {'begin': 143, 'end': 146, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 181, 'end': 187, 'name': 'DUP3', 'source': 5}, {'begin': 175, 'end': 188, 'name': 'MLOAD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '60'}, {'begin': 243, 'end': 249, 'name': 'DUP2', 'source': 5}, {'begin': 238, 'end': 241, 'name': 'DUP5', 'source': 5}, {'begin': 231, 'end': 235, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 223, 'end': 229, 'name': 'DUP8', 'source': 5}, {'begin': 219, 'end': 236, 'name': 'ADD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '61'}, {'begin': 197, 'end': 250, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 197, 'end': 250, 'name': 'tag', 'source': 5, 'value': '60'}, {'begin': 197, 'end': 250, 'name': 'JUMPDEST', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP1', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'ADD', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP3', 'source': 5}, {'begin': 14, 'end': 288, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 14, 'end': 288, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 524, 'end': 907, 'name': 'tag', 'source': 5, 'value': '57'}, {'begin': 524, 'end': 907, 'name': 'JUMPDEST', 'source': 5}, {'begin': 673, 'end': 675, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 662, 'end': 671, 'name': 'DUP2', 'source': 5}, {'begin': 655, 'end': 676, 'name': 'MSTORE', 'source': 5}, {'begin': 636, 'end': 640, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 705, 'end': 711, 'name': 'DUP3', 'source': 5}, {'begin': 699, 'end': 712, 'name': 'MLOAD', 'source': 5}, {'begin': 748, 'end': 754, 'name': 'DUP1', 'source': 5}, {'begin': 743, 'end': 745, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 732, 'end': 741, 'name': 'DUP5', 'source': 5}, {'begin': 728, 'end': 746, 'name': 'ADD', 'source': 5}, {'begin': 721, 'end': 755, 'name': 'MSTORE', 'source': 5}, {'begin': 764, 'end': 830, 'name': 'PUSH [tag]', 'source': 5, 'value': '64'}, {'begin': 823, 'end': 829, 'name': 'DUP2', 'source': 5}, {'begin': 818, 'end': 820, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 807, 'end': 816, 'name': 'DUP6', 'source': 5}, {'begin': 803, 'end': 821, 'name': 'ADD', 'source': 5}, {'begin': 798, 'end': 800, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 790, 'end': 796, 'name': 'DUP8', 'source': 5}, {'begin': 786, 'end': 801, 'name': 'ADD', 'source': 5}, {'begin': 764, 'end': 830, 'name': 'PUSH [tag]', 'source': 5, 'value': '61'}, {'begin': 764, 'end': 830, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 764, 'end': 830, 'name': 'tag', 'source': 5, 'value': '64'}, {'begin': 764, 'end': 830, 'name': 'JUMPDEST', 'source': 5}, {'begin': 891, 'end': 893, 'name': 'PUSH', 'source': 5, 'value': '1F'}, {'begin': 870, 'end': 885, 'name': 'ADD', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1F'}, {'begin': -1, 'end': -1, 'name': 'NOT', 'source': -1}, {'begin': 866, 'end': 895, 'name': 'AND', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'SWAP2', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'SWAP1', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'SWAP2', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'ADD', 'source': 5}, {'begin': 898, 'end': 900, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 847, 'end': 901, 'name': 'ADD', 'source': 5}, {'begin': 847, 'end': 901, 'name': 'SWAP3', 'source': 5}, {'begin': 524, 'end': 907, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 524, 'end': 907, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1319, 'end': 1577, 'name': 'tag', 'source': 5, 'value': '61'}, {'begin': 1319, 'end': 1577, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1391, 'end': 1392, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1401, 'end': 1514, 'name': 'tag', 'source': 5, 'value': '67'}, {'begin': 1401, 'end': 1514, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1415, 'end': 1421, 'name': 'DUP4', 'source': 5}, {'begin': 1412, 'end': 1413, 'name': 'DUP2', 'source': 5}, {'begin': 1409, 'end': 1422, 'name': 'LT', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'ISZERO', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'PUSH [tag]', 'source': 5, 'value': '69'}, {'begin': 1401, 'end': 1514, 'name': 'JUMPI', 'source': 5}, {'begin': 1491, 'end': 1502, 'name': 'DUP2', 'source': 5}, {'begin': 1491, 'end': 1502, 'name': 'DUP2', 'source': 5}, {'begin': 1491, 'end': 1502, 'name': 'ADD', 'source': 5}, {'begin': 1485, 'end': 1503, 'name': 'MLOAD', 'source': 5}, {'begin': 1472, 'end': 1483, 'name': 'DUP4', 'source': 5}, {'begin': 1472, 'end': 1483, 'name': 'DUP3', 'source': 5}, {'begin': 1472, 'end': 1483, 'name': 'ADD', 'source': 5}, {'begin': 1465, 'end': 1504, 'name': 'MSTORE', 'source': 5}, {'begin': 1437, 'end': 1439, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 1430, 'end': 1440, 'name': 'ADD', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'PUSH [tag]', 'source': 5, 'value': '67'}, {'begin': 1401, 'end': 1514, 'name': 'JUMP', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'tag', 'source': 5, 'value': '69'}, {'begin': 1401, 'end': 1514, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1532, 'end': 1538, 'name': 'DUP4', 'source': 5}, {'begin': 1529, 'end': 1530, 'name': 'DUP2', 'source': 5}, {'begin': 1526, 'end': 1539, 'name': 'GT', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'ISZERO', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'PUSH [tag]', 'source': 5, 'value': '70'}, {'begin': 1523, 'end': 1571, 'name': 'JUMPI', 'source': 5}, {'begin': 1567, 'end': 1568, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1558, 'end': 1564, 'name': 'DUP5', 'source': 5}, {'begin': 1553, 'end': 1556, 'name': 'DUP5', 'source': 5}, {'begin': 1549, 'end': 1565, 'name': 'ADD', 'source': 5}, {'begin': 1542, 'end': 1569, 'name': 'MSTORE', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'tag', 'source': 5, 'value': '70'}, {'begin': 1523, 'end': 1571, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'JUMP', 'source': 5, 'value': '[out]'}], '.data': {'9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398': '416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564'}}, '75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D': '360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc', '9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398': '416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564'}}, 'methodIdentifiers': {'implementation()': '5c60da1b'}}, 'ir': '/*=====================================================*\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *=====================================================*/\n\n\n/// @use-src 0:"@openzeppelin/contracts/proxy/Proxy.sol", 1:"@openzeppelin/contracts/utils/Address.sol", 2:"@openzeppelin/contracts/utils/StorageSlot.sol", 3:"ERC1155Creator.sol", 4:"TREA.sol", 5:"#utility.yul"\nobject "ERC1155Creator_480" {\n    code {\n        /// @src 3:244:1352\n        mstore(64, 128)\n        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }\n\n        constructor_ERC1155Creator_480()\n\n        let _1 := allocate_unbounded()\n        codecopy(_1, dataoffset("ERC1155Creator_480_deployed"), datasize("ERC1155Creator_480_deployed"))\n\n        return(_1, datasize("ERC1155Creator_480_deployed"))\n\n        function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n            let length := array_length_t_string_memory_ptr(value)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n            copy_memory_to_memory(add(value, 0x20), pos, length)\n            end := add(pos, round_up_to_mul_of_32(length))\n        }\n\n        function abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n            store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple__to__fromStack(headStart ) -> tail {\n            tail := add(headStart, 0)\n\n        }\n\n        function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        }\n\n        function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function allocate_memory(size) -> memPtr {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n\n        function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr {\n            let allocSize := array_allocation_size_t_bytes_memory_ptr(length)\n            memPtr := allocate_memory(allocSize)\n\n            mstore(memPtr, length)\n\n        }\n\n        function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {\n            let allocSize := array_allocation_size_t_string_memory_ptr(length)\n            memPtr := allocate_memory(allocSize)\n\n            mstore(memPtr, length)\n\n        }\n\n        function allocate_unbounded() -> memPtr {\n            memPtr := mload(64)\n        }\n\n        function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n            // Make sure we can allocate memory without overflow\n            if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n            size := round_up_to_mul_of_32(length)\n\n            // add length slot\n            size := add(size, 0x20)\n\n        }\n\n        function array_allocation_size_t_string_memory_ptr(length) -> size {\n            // Make sure we can allocate memory without overflow\n            if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n            size := round_up_to_mul_of_32(length)\n\n            // add length slot\n            size := add(size, 0x20)\n\n        }\n\n        function array_length_t_bytes_memory_ptr(value) -> length {\n\n            length := mload(value)\n\n        }\n\n        function array_length_t_string_memory_ptr(value) -> length {\n\n            length := mload(value)\n\n        }\n\n        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n            mstore(pos, length)\n            updated_pos := add(pos, 0x20)\n        }\n\n        function assert_helper(condition) {\n            if iszero(condition) { panic_error_0x01() }\n        }\n\n        function checked_sub_t_uint256(x, y) -> diff {\n            x := cleanup_t_uint256(x)\n            y := cleanup_t_uint256(y)\n\n            if lt(x, y) { panic_error_0x11() }\n\n            diff := sub(x, y)\n        }\n\n        function cleanup_t_bytes32(value) -> cleaned {\n            cleaned := value\n        }\n\n        function cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value) -> cleaned {\n            cleaned := value\n        }\n\n        function cleanup_t_uint160(value) -> cleaned {\n            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n\n        function cleanup_t_uint256(value) -> cleaned {\n            cleaned := value\n        }\n\n        /// @src 3:901:1016\n        function constant__IMPLEMENTATION_SLOT_456() -> ret {\n            /// @src 3:950:1016\n            let expr_455 := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n            let _2 := convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(expr_455)\n\n            ret := _2\n        }\n\n        /// @src 3:284:676\n        function constructor_ERC1155Creator_480() {\n\n            /// @src 3:284:676\n            constructor_Proxy_51()\n\n            /// @src 3:315:335\n            let expr_417 := constant__IMPLEMENTATION_SLOT_456()\n            /// @src 3:355:396\n            let expr_424 := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd\n            /// @src 3:347:397\n            let expr_425 := convert_t_bytes32_to_t_uint256(expr_424)\n            /// @src 3:400:401\n            let expr_426 := 0x01\n            /// @src 3:347:401\n            let expr_427 := checked_sub_t_uint256(expr_425, convert_t_rational_1_by_1_to_t_uint256(expr_426))\n\n            /// @src 3:339:402\n            let expr_428 := convert_t_uint256_to_t_bytes32(expr_427)\n            /// @src 3:315:402\n            let expr_429 := eq(cleanup_t_bytes32(expr_417), cleanup_t_bytes32(expr_428))\n            /// @src 3:308:403\n            assert_helper(expr_429)\n            /// @src 3:470:512\n            let expr_438 := 0x142fd5b9d67721efda3a5e2e9be47a96c9b724a4\n            /// @src 3:413:424\n            let expr_432_address := linkersymbol("@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot")\n            /// @src 3:440:460\n            let expr_435 := constant__IMPLEMENTATION_SLOT_456()\n            /// @src 3:413:461\n            let expr_436_slot := fun_getAddressSlot_372(expr_435)\n            /// @src 3:413:467\n            let _3 := add(expr_436_slot, 0)\n            /// @src 3:413:512\n            update_storage_value_offset_0t_address_to_t_address(_3, expr_438)\n            let expr_439 := expr_438\n            /// @src 3:522:529\n            let expr_441_address := linkersymbol("@openzeppelin/contracts/utils/Address.sol:Address")\n            /// @src 3:564:606\n            let expr_444 := 0x142fd5b9d67721efda3a5e2e9be47a96c9b724a4\n            /// @src 3:620:659\n\n            let expr_448_mpos := allocate_unbounded()\n            let _4 := add(expr_448_mpos, 0x20)\n\n            mstore(_4, 0x8129fc1c00000000000000000000000000000000000000000000000000000000)\n            _4 := add(_4, 4)\n\n            let _5 := abi_encode_tuple__to__fromStack(_4)\n            mstore(expr_448_mpos, sub(_5, add(expr_448_mpos, 0x20)))\n            finalize_allocation(expr_448_mpos, sub(_5, expr_448_mpos))\n            /// @src 3:522:669\n            let expr_449_mpos := fun_functionDelegateCall_279(expr_444, expr_448_mpos)\n\n        }\n        /// @src 3:244:1352\n\n        /// @src 0:723:3245\n        function constructor_Proxy_51() {\n\n            /// @src 0:723:3245\n\n        }\n        /// @src 3:244:1352\n\n        function convert_t_address_to_t_address(value) -> converted {\n            converted := convert_t_uint160_to_t_address(value)\n        }\n\n        function convert_t_bytes32_to_t_uint256(value) -> converted {\n            converted := convert_t_uint256_to_t_uint256(shift_right_0_unsigned(value))\n        }\n\n        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {\n            converted := cleanup_t_uint256(value)\n        }\n\n        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {\n            converted := cleanup_t_uint256(value)\n        }\n\n        function convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(value) -> converted {\n            converted := shift_left_0(cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value))\n        }\n\n        function convert_t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398_to_t_string_memory_ptr() -> converted {\n            converted := copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398()\n        }\n\n        function convert_t_uint160_to_t_address(value) -> converted {\n            converted := convert_t_uint160_to_t_uint160(value)\n        }\n\n        function convert_t_uint160_to_t_uint160(value) -> converted {\n            converted := cleanup_t_uint160(value)\n        }\n\n        function convert_t_uint256_to_t_bytes32(value) -> converted {\n            converted := shift_left_0(cleanup_t_uint256(value))\n        }\n\n        function convert_t_uint256_to_t_uint256(value) -> converted {\n            converted := cleanup_t_uint256(value)\n        }\n\n        function copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398() -> memPtr {\n            memPtr := allocate_memory_array_t_string_memory_ptr(39)\n            store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398(add(memPtr, 32))\n        }\n\n        function copy_memory_to_memory(src, dst, length) {\n            let i := 0\n            for { } lt(i, length) { i := add(i, 32) }\n            {\n                mstore(add(dst, i), mload(add(src, i)))\n            }\n            if gt(i, length)\n            {\n                // clear end\n                mstore(add(dst, length), 0)\n            }\n        }\n\n        function extract_returndata() -> data {\n\n            switch returndatasize()\n            case 0 {\n                data := zero_value_for_split_t_bytes_memory_ptr()\n            }\n            default {\n                data := allocate_memory_array_t_bytes_memory_ptr(returndatasize())\n                returndatacopy(add(data, 0x20), 0, returndatasize())\n            }\n\n        }\n\n        function finalize_allocation(memPtr, size) {\n            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n            // protect against overflow\n            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n\n        /// @src 1:6570:6768\n        function fun_functionDelegateCall_279(var_target_265, var_data_267_mpos) -> var__270_mpos {\n            /// @src 1:6653:6665\n            let zero_t_bytes_memory_ptr_6_mpos := zero_value_for_split_t_bytes_memory_ptr()\n            var__270_mpos := zero_t_bytes_memory_ptr_6_mpos\n\n            /// @src 1:6705:6711\n            let _7 := var_target_265\n            let expr_273 := _7\n            /// @src 1:6713:6717\n            let _8_mpos := var_data_267_mpos\n            let expr_274_mpos := _8_mpos\n            /// @src 1:6684:6761\n            let _9_mpos := convert_t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398_to_t_string_memory_ptr()\n            let expr_276_mpos := fun_functionDelegateCall_314(expr_273, expr_274_mpos, _9_mpos)\n            /// @src 1:6677:6761\n            var__270_mpos := expr_276_mpos\n            leave\n\n        }\n        /// @src 3:244:1352\n\n        /// @src 1:6954:7341\n        function fun_functionDelegateCall_314(var_target_282, var_data_284_mpos, var_errorMessage_286_mpos) -> var__289_mpos {\n            /// @src 1:7095:7107\n            let zero_t_bytes_memory_ptr_10_mpos := zero_value_for_split_t_bytes_memory_ptr()\n            var__289_mpos := zero_t_bytes_memory_ptr_10_mpos\n\n            /// @src 1:7138:7144\n            let _11 := var_target_282\n            let expr_293 := _11\n            /// @src 1:7127:7145\n            let expr_294 := fun_isContract_69(expr_293)\n            /// @src 1:7119:7188\n            require_helper_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(expr_294)\n            /// @src 1:7241:7247\n            let _12 := var_target_282\n            let expr_302 := _12\n            /// @src 1:7241:7260\n            let expr_303_address := expr_302\n            /// @src 1:7261:7265\n            let _13_mpos := var_data_284_mpos\n            let expr_304_mpos := _13_mpos\n            /// @src 1:7241:7266\n\n            let _14 := add(expr_304_mpos, 0x20)\n            let _15 := mload(expr_304_mpos)\n\n            let expr_305_component_1 := delegatecall(gas(), expr_303_address,  _14, _15, 0, 0)\n            let expr_305_component_2_mpos := extract_returndata()\n            /// @src 1:7199:7266\n            let var_success_299 := expr_305_component_1\n            let var_returndata_301_mpos := expr_305_component_2_mpos\n            /// @src 1:7300:7307\n            let _16 := var_success_299\n            let expr_308 := _16\n            /// @src 1:7309:7319\n            let _17_mpos := var_returndata_301_mpos\n            let expr_309_mpos := _17_mpos\n            /// @src 1:7321:7333\n            let _18_mpos := var_errorMessage_286_mpos\n            let expr_310_mpos := _18_mpos\n            /// @src 1:7283:7334\n            let expr_311_mpos := fun_verifyCallResult_345(expr_308, expr_309_mpos, expr_310_mpos)\n            /// @src 1:7276:7334\n            var__289_mpos := expr_311_mpos\n            leave\n\n        }\n        /// @src 3:244:1352\n\n        /// @src 2:1599:1746\n        function fun_getAddressSlot_372(var_slot_364) -> var_r_368_slot {\n\n            /// @src 2:1693:1740\n            {\n                var_r_368_slot := var_slot_364\n            }\n\n        }\n        /// @src 3:244:1352\n\n        /// @src 1:1175:1495\n        function fun_isContract_69(var_account_57) -> var__60 {\n            /// @src 1:1235:1239\n            let zero_t_bool_19 := zero_value_for_split_t_bool()\n            var__60 := zero_t_bool_19\n\n            /// @src 1:1465:1472\n            let _20 := var_account_57\n            let expr_62 := _20\n            /// @src 1:1465:1484\n            let expr_64 := extcodesize(expr_62)\n            /// @src 1:1487:1488\n            let expr_65 := 0x00\n            /// @src 1:1465:1488\n            let expr_66 := gt(cleanup_t_uint256(expr_64), convert_t_rational_0_by_1_to_t_uint256(expr_65))\n            /// @src 1:1458:1488\n            var__60 := expr_66\n            leave\n\n        }\n        /// @src 3:244:1352\n\n        /// @src 1:7561:8253\n        function fun_verifyCallResult_345(var_success_317, var_returndata_319_mpos, var_errorMessage_321_mpos) -> var__324_mpos {\n            /// @src 1:7707:7719\n            let zero_t_bytes_memory_ptr_21_mpos := zero_value_for_split_t_bytes_memory_ptr()\n            var__324_mpos := zero_t_bytes_memory_ptr_21_mpos\n\n            /// @src 1:7735:7742\n            let _22 := var_success_317\n            let expr_326 := _22\n            /// @src 1:7731:8247\n            switch expr_326\n            case 0 {\n                /// @src 1:7876:7886\n                let _23_mpos := var_returndata_319_mpos\n                let expr_330_mpos := _23_mpos\n                /// @src 1:7876:7893\n                let expr_331 := array_length_t_bytes_memory_ptr(expr_330_mpos)\n                /// @src 1:7896:7897\n                let expr_332 := 0x00\n                /// @src 1:7876:7897\n                let expr_333 := gt(cleanup_t_uint256(expr_331), convert_t_rational_0_by_1_to_t_uint256(expr_332))\n                /// @src 1:7872:8237\n                switch expr_333\n                case 0 {\n                    /// @src 1:8209:8221\n                    let _24_mpos := var_errorMessage_321_mpos\n                    let expr_337_mpos := _24_mpos\n                    /// @src 1:8202:8222\n                    {\n                        let _25 := allocate_unbounded()\n                        mstore(_25, 3963877391197344453575983046348115674221700746820753546331534351508065746944)\n                        let _26 := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(add(_25, 4) , expr_337_mpos)\n                        revert(_25, sub(_26, _25))\n                    }/// @src 1:7872:8237\n                }\n                default {\n                    /// @src 1:8010:8164\n                    {\n                        let usr$returndata_size := mload(var_returndata_319_mpos)\n                        revert(add(32, var_returndata_319_mpos), usr$returndata_size)\n                    }\n                    /// @src 1:7872:8237\n                }\n                /// @src 1:7731:8247\n            }\n            default {\n                /// @src 1:7765:7775\n                let _27_mpos := var_returndata_319_mpos\n                let expr_327_mpos := _27_mpos\n                /// @src 1:7758:7775\n                var__324_mpos := expr_327_mpos\n                leave\n                /// @src 1:7731:8247\n            }\n\n        }\n        /// @src 3:244:1352\n\n        function panic_error_0x01() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x01)\n            revert(0, 0x24)\n        }\n\n        function panic_error_0x11() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n\n        function panic_error_0x41() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n\n        function prepare_store_t_address(value) -> ret {\n            ret := value\n        }\n\n        function require_helper_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(condition ) {\n            if iszero(condition) {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                let end := abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {\n            revert(0, 0)\n        }\n\n        function round_up_to_mul_of_32(value) -> result {\n            result := and(add(value, 31), not(31))\n        }\n\n        function shift_left_0(value) -> newValue {\n            newValue :=\n\n            shl(0, value)\n\n        }\n\n        function shift_right_0_unsigned(value) -> newValue {\n            newValue :=\n\n            shr(0, value)\n\n        }\n\n        function store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398(memPtr) {\n\n            mstore(add(memPtr, 0), "Address: low-level delegate call")\n\n            mstore(add(memPtr, 32), " failed")\n\n        }\n\n        function store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(memPtr) {\n\n            mstore(add(memPtr, 0), "Address: delegate call to non-co")\n\n            mstore(add(memPtr, 32), "ntract")\n\n        }\n\n        function update_byte_slice_20_shift_0(value, toInsert) -> result {\n            let mask := 0xffffffffffffffffffffffffffffffffffffffff\n            toInsert := shift_left_0(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n\n        function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {\n            let convertedValue_0 := convert_t_address_to_t_address(value_0)\n            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))\n        }\n\n        function zero_value_for_split_t_bool() -> ret {\n            ret := 0\n        }\n\n        function zero_value_for_split_t_bytes_memory_ptr() -> ret {\n            ret := 96\n        }\n\n    }\n    object "ERC1155Creator_480_deployed" {\n        code {\n            /// @src 3:244:1352\n            mstore(64, 128)\n\n            if iszero(lt(calldatasize(), 4))\n            {\n                let selector := shift_right_224_unsigned(calldataload(0))\n                switch selector\n\n                case 0x5c60da1b\n                {\n                    // implementation()\n\n                    if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }\n                    abi_decode_tuple_(4, calldatasize())\n                    let ret_0 :=  fun_implementation_466()\n                    let memPos := allocate_unbounded()\n                    let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)\n                    return(memPos, sub(memEnd, memPos))\n                }\n\n                default {}\n            }\n            if iszero(calldatasize()) { fun__45() stop() }\n            fun__37() stop()\n\n            function abi_decode_tuple_(headStart, dataEnd)   {\n                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n            }\n\n            function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n                mstore(pos, cleanup_t_address(value))\n            }\n\n            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart , value0) -> tail {\n                tail := add(headStart, 32)\n\n                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n            }\n\n            function allocate_unbounded() -> memPtr {\n                memPtr := mload(64)\n            }\n\n            function cleanup_from_storage_t_address(value) -> cleaned {\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n\n            function cleanup_t_address(value) -> cleaned {\n                cleaned := cleanup_t_uint160(value)\n            }\n\n            function cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value) -> cleaned {\n                cleaned := value\n            }\n\n            function cleanup_t_uint160(value) -> cleaned {\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n\n            /// @src 3:901:1016\n            function constant__IMPLEMENTATION_SLOT_456() -> ret {\n                /// @src 3:950:1016\n                let expr_455 := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n                let _3 := convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(expr_455)\n\n                ret := _3\n            }\n\n            function convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(value) -> converted {\n                converted := shift_left_0(cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value))\n            }\n\n            function extract_from_storage_value_offset_0t_address(slot_value) -> value {\n                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))\n            }\n\n            /// @src 0:2629:2693\n            function fun__37() {\n\n                fun__fallback_29()\n\n            }\n            /// @src 3:244:1352\n\n            /// @src 0:2853:2916\n            function fun__45() {\n\n                fun__fallback_29()\n\n            }\n            /// @src 3:244:1352\n\n            /// @src 0:3197:3243\n            function fun__beforeFallback_50() {\n\n            }\n            /// @src 3:244:1352\n\n            /// @src 0:948:1843\n            function fun__delegate_10(var_implementation_5) {\n\n                /// @src 0:1018:1837\n                {\n                    calldatacopy(0, 0, calldatasize())\n                    let usr$result := delegatecall(gas(), var_implementation_5, 0, calldatasize(), 0, 0)\n                    returndatacopy(0, 0, returndatasize())\n                    switch usr$result\n                    case 0 { revert(0, returndatasize()) }\n                    default { return(0, returndatasize()) }\n                }\n\n            }\n            /// @src 3:244:1352\n\n            /// @src 0:2322:2432\n            function fun__fallback_29() {\n\n                fun__beforeFallback_50()\n                /// @src 0:2407:2424\n                let expr_25 := fun__implementation_479()\n                fun__delegate_10(expr_25)\n\n            }\n            /// @src 3:244:1352\n\n            /// @src 3:1199:1345\n            function fun__implementation_479() -> var__470 {\n                /// @src 3:1258:1265\n                let zero_t_address_2 := zero_value_for_split_t_address()\n                var__470 := zero_t_address_2\n\n                /// @src 3:1284:1295\n                let expr_472_address := linkersymbol("@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot")\n                /// @src 3:1311:1331\n                let expr_474 := constant__IMPLEMENTATION_SLOT_456()\n                /// @src 3:1284:1332\n                let expr_475_slot := fun_getAddressSlot_372(expr_474)\n                /// @src 3:1284:1338\n                let _4 := add(expr_475_slot, 0)\n                let _5 := read_from_storage_split_offset_0_t_address(_4)\n                let expr_476 := _5\n                /// @src 3:1277:1338\n                var__470 := expr_476\n                leave\n\n            }\n            /// @src 3:244:1352\n\n            /// @src 2:1599:1746\n            function fun_getAddressSlot_372(var_slot_364) -> var_r_368_slot {\n\n                /// @src 2:1693:1740\n                {\n                    var_r_368_slot := var_slot_364\n                }\n\n            }\n            /// @src 3:244:1352\n\n            /// @src 3:1096:1193\n            function fun_implementation_466() -> var__460 {\n                /// @src 3:1143:1150\n                let zero_t_address_1 := zero_value_for_split_t_address()\n                var__460 := zero_t_address_1\n\n                /// @src 3:1169:1186\n                let expr_463 := fun__implementation_479()\n                /// @src 3:1162:1186\n                var__460 := expr_463\n                leave\n\n            }\n            /// @src 3:244:1352\n\n            function read_from_storage_split_offset_0_t_address(slot) -> value {\n                value := extract_from_storage_value_offset_0t_address(sload(slot))\n\n            }\n\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {\n                revert(0, 0)\n            }\n\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n                revert(0, 0)\n            }\n\n            function shift_left_0(value) -> newValue {\n                newValue :=\n\n                shl(0, value)\n\n            }\n\n            function shift_right_0_unsigned(value) -> newValue {\n                newValue :=\n\n                shr(0, value)\n\n            }\n\n            function shift_right_224_unsigned(value) -> newValue {\n                newValue :=\n\n                shr(224, value)\n\n            }\n\n            function zero_value_for_split_t_address() -> ret {\n                ret := 0\n            }\n\n        }\n\n        data ".metadata" hex"a264697066735822122001f46ae50285ae0a6f161aec10a0c7e001b7dbb2b9ea6d5f9f8c5c932bbc999864736f6c63430008070033"\n    }\n\n}\n\n', 'metadata': '{"compiler":{"version":"0.8.7+commit.e28d00a7"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"implementation()":{"details":"Returns the current implementation address."}},"stateVariables":{"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\"eip1967.proxy.implementation\\" subtracted by 1, and is validated in the constructor."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"ERC1155Creator.sol":"ERC1155Creator"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":300},"remappings":[]},"sources":{"@openzeppelin/contracts/proxy/Proxy.sol":{"keccak256":"0x89f52157f90f3962cb9b784fbccd879748e9e937f0906123101c05d594bb88c8","license":"MIT","urls":["bzz-raw://3b2c3e179e16a9d67ec76aecc396288099691d903e2ad4bd77b6af8852518eab","dweb:/ipfs/QmQ3pWYxbDzp2HyMYKjp4ivqpVKMtVGtSQwgdZr2HG7Th9"]},"@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0x4f73eedf878079f3c11b05bb9db39c789ae782c0c1a15a8a31ad36aa7047a32f","license":"MIT","urls":["bzz-raw://c23c79bf4124e0b203677c5ab55ce73d8faf43f0d5c49b071c9f9f16fee74249","dweb:/ipfs/QmNsMhnyeFS22LXmGGG7j6eto36bz8SEGbfDGPVu1EZcB8"]},"@openzeppelin/contracts/utils/StorageSlot.sol":{"keccak256":"0xe90e5c5523f942613ebb55bd155de9489a185910338307b891adbd4b7604fc13","license":"MIT","urls":["bzz-raw://baa83fd3ea84f65b9d53eb42437f1c644d938582513b7e13d080ffdcb1a8653c","dweb:/ipfs/QmYF12uEQ1KmjqCxfPMc5HK7sCHXj1FNKtaaAwhVCgwKcn"]},"ERC1155Creator.sol":{"keccak256":"0x5dfe7f94d2fe99d399ae2904f472429271f479e0311d91e4f325eb7704c223fa","license":"MIT","urls":["bzz-raw://39feb1e3431ad72287a88e25e3af6765f64e7f4d1be2c37159d5271a20fdb2eb","dweb:/ipfs/QmXATFZmAUfBKcpkWNdNahKTPiQFVo69vdqW9zXTKeJcD9"]}},"version":1}'}}, 'TREA.sol': {'TREA': {'evm': {'bytecode': {'functionDebugData': {'@_452': {'entryPoint': None, 'id': 452, 'parameterSlots': 0, 'returnSlots': 0}, '@_491': {'entryPoint': None, 'id': 491, 'parameterSlots': 0, 'returnSlots': 0}, '@functionDelegateCall_279': {'entryPoint': 267, 'id': 279, 'parameterSlots': 2, 'returnSlots': 1}, '@functionDelegateCall_314': {'entryPoint': 311, 'id': 314, 'parameterSlots': 3, 'returnSlots': 1}, '@getAddressSlot_372': {'entryPoint': 264, 'id': 372, 'parameterSlots': 1, 'returnSlots': 1}, '@isContract_69': {'entryPoint': None, 'id': 69, 'parameterSlots': 1, 'returnSlots': 1}, '@verifyCallResult_345': {'entryPoint': 538, 'id': 345, 'parameterSlots': 3, 'returnSlots': 1}, 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed': {'entryPoint': 595, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': 623, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': None, 'id': None, 'parameterSlots': 1, 'returnSlots': 1}, 'checked_sub_t_uint256': {'entryPoint': 674, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'copy_memory_to_memory': {'entryPoint': 711, 'id': None, 'parameterSlots': 3, 'returnSlots': 0}, 'panic_error_0x01': {'entryPoint': 759, 'id': None, 'parameterSlots': 0, 'returnSlots': 0}}, 'generatedSources': [{'ast': {'nodeType': 'YulBlock', 'src': '0:1707:5', 'statements': [{'nodeType': 'YulBlock', 'src': '6:3:5', 'statements': []}, {'body': {'nodeType': 'YulBlock', 'src': '151:137:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '161:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '181:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '175:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '175:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '165:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '223:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '231:4:5', 'type': '', 'value': '0x20'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '219:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '219:17:5'}, {'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '238:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '243:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '197:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '197:53:5'}, 'nodeType': 'YulExpressionStatement', 'src': '197:53:5'}, {'nodeType': 'YulAssignment', 'src': '259:23:5', 'value': {'arguments': [{'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '270:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '275:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '266:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '266:16:5'}, 'variableNames': [{'name': 'end', 'nodeType': 'YulIdentifier', 'src': '259:3:5'}]}]}, 'name': 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'pos', 'nodeType': 'YulTypedName', 'src': '127:3:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '132:6:5', 'type': ''}], 'returnVariables': [{'name': 'end', 'nodeType': 'YulTypedName', 'src': '143:3:5', 'type': ''}], 'src': '14:274:5'}, {'body': {'nodeType': 'YulBlock', 'src': '414:262:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '431:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '442:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '424:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '424:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '424:21:5'}, {'nodeType': 'YulVariableDeclaration', 'src': '454:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '474:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '468:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '468:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '458:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '501:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '512:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '497:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '497:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '517:6:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '490:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '490:34:5'}, 'nodeType': 'YulExpressionStatement', 'src': '490:34:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '559:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '567:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '555:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '555:15:5'}, {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '576:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '587:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '572:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '572:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '592:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '533:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '533:66:5'}, 'nodeType': 'YulExpressionStatement', 'src': '533:66:5'}, {'nodeType': 'YulAssignment', 'src': '608:62:5', 'value': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '624:9:5'}, {'arguments': [{'arguments': [{'name': 'length', 'nodeType': 'YulIdentifier', 'src': '643:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '651:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '639:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '639:15:5'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '660:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'not', 'nodeType': 'YulIdentifier', 'src': '656:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '656:7:5'}], 'functionName': {'name': 'and', 'nodeType': 'YulIdentifier', 'src': '635:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '635:29:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '620:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '620:45:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '667:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '616:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '616:54:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '608:4:5'}]}]}, 'name': 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '383:9:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '394:6:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '405:4:5', 'type': ''}], 'src': '293:383:5'}, {'body': {'nodeType': 'YulBlock', 'src': '855:228:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '872:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '883:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '865:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '865:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '865:21:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '906:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '917:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '902:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '902:18:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '922:2:5', 'type': '', 'value': '38'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '895:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '895:30:5'}, 'nodeType': 'YulExpressionStatement', 'src': '895:30:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '945:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '956:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '941:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '941:18:5'}, {'hexValue': '416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '961:34:5', 'type': '', 'value': 'Address: delegate call to non-co'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '934:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '934:62:5'}, 'nodeType': 'YulExpressionStatement', 'src': '934:62:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1016:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1027:2:5', 'type': '', 'value': '96'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1012:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1012:18:5'}, {'hexValue': '6e7472616374', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '1032:8:5', 'type': '', 'value': 'ntract'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1005:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1005:36:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1005:36:5'}, {'nodeType': 'YulAssignment', 'src': '1050:27:5', 'value': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1062:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1073:3:5', 'type': '', 'value': '128'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1058:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1058:19:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '1050:4:5'}]}]}, 'name': 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '832:9:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '846:4:5', 'type': ''}], 'src': '681:402:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1137:173:5', 'statements': [{'body': {'nodeType': 'YulBlock', 'src': '1167:111:5', 'statements': [{'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1188:1:5', 'type': '', 'value': '0'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1195:3:5', 'type': '', 'value': '224'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1200:10:5', 'type': '', 'value': '0x4e487b71'}], 'functionName': {'name': 'shl', 'nodeType': 'YulIdentifier', 'src': '1191:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1191:20:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1181:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1181:31:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1181:31:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1232:1:5', 'type': '', 'value': '4'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1235:4:5', 'type': '', 'value': '0x11'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1225:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1225:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1225:15:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1260:1:5', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1263:4:5', 'type': '', 'value': '0x24'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '1253:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1253:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1253:15:5'}]}, 'condition': {'arguments': [{'name': 'x', 'nodeType': 'YulIdentifier', 'src': '1153:1:5'}, {'name': 'y', 'nodeType': 'YulIdentifier', 'src': '1156:1:5'}], 'functionName': {'name': 'lt', 'nodeType': 'YulIdentifier', 'src': '1150:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1150:8:5'}, 'nodeType': 'YulIf', 'src': '1147:131:5'}, {'nodeType': 'YulAssignment', 'src': '1287:17:5', 'value': {'arguments': [{'name': 'x', 'nodeType': 'YulIdentifier', 'src': '1299:1:5'}, {'name': 'y', 'nodeType': 'YulIdentifier', 'src': '1302:1:5'}], 'functionName': {'name': 'sub', 'nodeType': 'YulIdentifier', 'src': '1295:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1295:9:5'}, 'variableNames': [{'name': 'diff', 'nodeType': 'YulIdentifier', 'src': '1287:4:5'}]}]}, 'name': 'checked_sub_t_uint256', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'x', 'nodeType': 'YulTypedName', 'src': '1119:1:5', 'type': ''}, {'name': 'y', 'nodeType': 'YulTypedName', 'src': '1122:1:5', 'type': ''}], 'returnVariables': [{'name': 'diff', 'nodeType': 'YulTypedName', 'src': '1128:4:5', 'type': ''}], 'src': '1088:222:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1368:205:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '1378:10:5', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1387:1:5', 'type': '', 'value': '0'}, 'variables': [{'name': 'i', 'nodeType': 'YulTypedName', 'src': '1382:1:5', 'type': ''}]}, {'body': {'nodeType': 'YulBlock', 'src': '1447:63:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1472:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1477:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1468:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1468:11:5'}, {'arguments': [{'arguments': [{'name': 'src', 'nodeType': 'YulIdentifier', 'src': '1491:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1496:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1487:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1487:11:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '1481:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '1481:18:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1461:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1461:39:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1461:39:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1408:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1411:6:5'}], 'functionName': {'name': 'lt', 'nodeType': 'YulIdentifier', 'src': '1405:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1405:13:5'}, 'nodeType': 'YulForLoop', 'post': {'nodeType': 'YulBlock', 'src': '1419:19:5', 'statements': [{'nodeType': 'YulAssignment', 'src': '1421:15:5', 'value': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1430:1:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1433:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1426:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1426:10:5'}, 'variableNames': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1421:1:5'}]}]}, 'pre': {'nodeType': 'YulBlock', 'src': '1401:3:5', 'statements': []}, 'src': '1397:113:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1536:31:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1549:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1554:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1545:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1545:16:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1563:1:5', 'type': '', 'value': '0'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1538:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1538:27:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1538:27:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1525:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1528:6:5'}], 'functionName': {'name': 'gt', 'nodeType': 'YulIdentifier', 'src': '1522:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1522:13:5'}, 'nodeType': 'YulIf', 'src': '1519:48:5'}]}, 'name': 'copy_memory_to_memory', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'src', 'nodeType': 'YulTypedName', 'src': '1346:3:5', 'type': ''}, {'name': 'dst', 'nodeType': 'YulTypedName', 'src': '1351:3:5', 'type': ''}, {'name': 'length', 'nodeType': 'YulTypedName', 'src': '1356:6:5', 'type': ''}], 'src': '1315:258:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1610:95:5', 'statements': [{'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1627:1:5', 'type': '', 'value': '0'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1634:3:5', 'type': '', 'value': '224'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1639:10:5', 'type': '', 'value': '0x4e487b71'}], 'functionName': {'name': 'shl', 'nodeType': 'YulIdentifier', 'src': '1630:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1630:20:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1620:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1620:31:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1620:31:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1667:1:5', 'type': '', 'value': '4'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1670:4:5', 'type': '', 'value': '0x01'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1660:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1660:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1660:15:5'}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1691:1:5', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1694:4:5', 'type': '', 'value': '0x24'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '1684:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1684:15:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1684:15:5'}]}, 'name': 'panic_error_0x01', 'nodeType': 'YulFunctionDefinition', 'src': '1578:127:5'}]}, 'contents': '{\n    { }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), "Address: delegate call to non-co")\n        mstore(add(headStart, 96), "ntract")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n}', 'id': 5, 'language': 'Yul', 'name': '#utility.yul'}], 'linkReferences': {}, 'object': '608060405234801561001057600080fd5b5061003c60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6102a2565b60008051602061064383398151915214610058576100586102f7565b73142fd5b9d67721efda3a5e2e9be47a96c9b724a461009160008051602061064383398151915260001b61010860201b6100dd1760201c565b80546001600160a01b03929092166001600160a01b0319909216919091179055604080516004815260248101909152602080820180516001600160e01b031663204a7f0760e21b1790526101029173142fd5b9d67721efda3a5e2e9be47a96c9b724a4916100e061010b821b17901c565b5061030d565b90565b6060610130838360405180606001604052806027815260200161066360279139610137565b9392505050565b60606001600160a01b0384163b6101a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101bf9190610253565b600060405180830381855af49150503d80600081146101fa576040519150601f19603f3d011682016040523d82523d6000602084013e6101ff565b606091505b50909250905061021082828661021a565b9695505050505050565b60608315610229575081610130565b8251156102395782518084602001fd5b8160405162461bcd60e51b815260040161019b919061026f565b600082516102658184602087016102c7565b9190910192915050565b602081526000825180602084015261028e8160408501602087016102c7565b601f01601f19169190910160400192915050565b6000828210156102c257634e487b7160e01b600052601160045260246000fd5b500390565b60005b838110156102e25781810151838201526020016102ca565b838111156102f1576000848401525b50505050565b634e487b7160e01b600052600160045260246000fd5b6103278061031c6000396000f3fe6080604052600436106100225760003560e01c80635c60da1b1461003957610031565b366100315761002f61006a565b005b61002f61006a565b34801561004557600080fd5b5061004e6100a5565b6040516001600160a01b03909116815260200160405180910390f35b6100a361009e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b61010c565b565b60006100d87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b90565b606061010583836040518060600160405280602781526020016102cb60279139610130565b9392505050565b3660008037600080366000845af43d6000803e80801561012b573d6000f35b3d6000fd5b60606001600160a01b0384163b61019d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101b8919061024b565b600060405180830381855af49150503d80600081146101f3576040519150601f19603f3d011682016040523d82523d6000602084013e6101f8565b606091505b5091509150610208828286610212565b9695505050505050565b60608315610221575081610105565b8251156102315782518084602001fd5b8160405162461bcd60e51b81526004016101949190610267565b6000825161025d81846020870161029a565b9190910192915050565b602081526000825180602084015261028681604085016020870161029a565b601f01601f19169190910160400192915050565b60005b838110156102b557818101518382015260200161029d565b838111156102c4576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122045b505fcd678db15d8e5208e301112e80077189909f1fcd0ef96d40c8b24d2fe64736f6c63430008070033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564', 'opcodes': 'PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C PUSH1 0x1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD PUSH2 0x2A2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x643 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE EQ PUSH2 0x58 JUMPI PUSH2 0x58 PUSH2 0x2F7 JUMP JUMPDEST PUSH20 0x142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4 PUSH2 0x91 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x643 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHL PUSH2 0x108 PUSH1 0x20 SHL PUSH2 0xDD OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x204A7F07 PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0x102 SWAP2 PUSH20 0x142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4 SWAP2 PUSH2 0xE0 PUSH2 0x10B DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP PUSH2 0x30D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x130 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x663 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x137 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0x253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x210 DUP3 DUP3 DUP7 PUSH2 0x21A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x229 JUMPI POP DUP2 PUSH2 0x130 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x239 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x26F JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x265 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x28E DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2C2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2CA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x327 DUP1 PUSH2 0x31C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x39 JUMPI PUSH2 0x31 JUMP JUMPDEST CALLDATASIZE PUSH2 0x31 JUMPI PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH2 0x9E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD8 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x105 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2CB PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x130 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x12B JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0x24B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x208 DUP3 DUP3 DUP7 PUSH2 0x212 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x221 JUMPI POP DUP2 PUSH2 0x105 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x231 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x267 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x286 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x29D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122045B505 0xFC 0xD6 PUSH25 0xDB15D8E5208E301112E80077189909F1FCD0EF96D40C8B24D2 INVALID PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x65640000000000000000000000 ', 'sourceMap': '987:73:4:-:0;;;1025:33;;;;;;;;;-1:-1:-1;347:54:3;400:1;355:41;347:54;:::i;:::-;-1:-1:-1;;;;;;;;;;;315:87:3;308:95;;;;:::i;:::-;470:42;413:48;-1:-1:-1;;;;;;;;;;;440:20:3;;413:26;;;;;:48;;:::i;:::-;:99;;-1:-1:-1;;;;;413:99:3;;;;-1:-1:-1;;;;;;413:99:3;;;;;;;;;620:39;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:39:3;-1:-1:-1;;;620:39:3;;;522:147;;564:42;;522:28;;;;;:147;;:::i;:::-;;987:73:4;;1599:147:2;1726:4;1599:147::o;6570:198:1:-;6653:12;6684:77;6705:6;6713:4;6684:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6677:84;6570:198;-1:-1:-1;;;6570:198:1:o;6954:387::-;7095:12;-1:-1:-1;;;;;1465:19:1;;;7119:69;;;;-1:-1:-1;;;7119:69:1;;883:2:5;7119:69:1;;;865:21:5;922:2;902:18;;;895:30;961:34;941:18;;;934:62;-1:-1:-1;;;1012:18:5;;;1005:36;1058:19;;7119:69:1;;;;;;;;;7200:12;7214:23;7241:6;-1:-1:-1;;;;;7241:19:1;7261:4;7241:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7199:67:1;;-1:-1:-1;7199:67:1;-1:-1:-1;7283:51:1;7199:67;;7321:12;7283:16;:51::i;:::-;7276:58;6954:387;-1:-1:-1;;;;;;6954:387:1:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:1;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:1;;;;;;;;:::i;14:274:5:-;143:3;181:6;175:13;197:53;243:6;238:3;231:4;223:6;219:17;197:53;:::i;:::-;266:16;;;;;14:274;-1:-1:-1;;14:274:5:o;293:383::-;442:2;431:9;424:21;405:4;474:6;468:13;517:6;512:2;501:9;497:18;490:34;533:66;592:6;587:2;576:9;572:18;567:2;559:6;555:15;533:66;:::i;:::-;660:2;639:15;-1:-1:-1;;635:29:5;620:45;;;;667:2;616:54;;293:383;-1:-1:-1;;293:383:5:o;1088:222::-;1128:4;1156:1;1153;1150:8;1147:131;;;1200:10;1195:3;1191:20;1188:1;1181:31;1235:4;1232:1;1225:15;1263:4;1260:1;1253:15;1147:131;-1:-1:-1;1295:9:5;;1088:222::o;1315:258::-;1387:1;1397:113;1411:6;1408:1;1405:13;1397:113;;;1487:11;;;1481:18;1468:11;;;1461:39;1433:2;1426:10;1397:113;;;1528:6;1525:1;1522:13;1519:48;;;1563:1;1554:6;1549:3;1545:16;1538:27;1519:48;;1315:258;;;:::o;1578:127::-;1639:10;1634:3;1630:20;1627:1;1620:31;1670:4;1667:1;1660:15;1694:4;1691:1;1684:15;1578:127;987:73:4;;;;;;'}, 'deployedBytecode': {'functionDebugData': {'@_37': {'entryPoint': None, 'id': 37, 'parameterSlots': 0, 'returnSlots': 0}, '@_45': {'entryPoint': None, 'id': 45, 'parameterSlots': 0, 'returnSlots': 0}, '@_beforeFallback_50': {'entryPoint': None, 'id': 50, 'parameterSlots': 0, 'returnSlots': 0}, '@_delegate_10': {'entryPoint': 268, 'id': 10, 'parameterSlots': 1, 'returnSlots': 0}, '@_fallback_29': {'entryPoint': 106, 'id': 29, 'parameterSlots': 0, 'returnSlots': 0}, '@_implementation_479': {'entryPoint': None, 'id': 479, 'parameterSlots': 0, 'returnSlots': 1}, '@functionDelegateCall_279': {'entryPoint': 224, 'id': 279, 'parameterSlots': 2, 'returnSlots': 1}, '@functionDelegateCall_314': {'entryPoint': 304, 'id': 314, 'parameterSlots': 3, 'returnSlots': 1}, '@getAddressSlot_372': {'entryPoint': 221, 'id': 372, 'parameterSlots': 1, 'returnSlots': 1}, '@implementation_466': {'entryPoint': 165, 'id': 466, 'parameterSlots': 0, 'returnSlots': 1}, '@isContract_69': {'entryPoint': None, 'id': 69, 'parameterSlots': 1, 'returnSlots': 1}, '@verifyCallResult_345': {'entryPoint': 530, 'id': 345, 'parameterSlots': 3, 'returnSlots': 1}, 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed': {'entryPoint': 587, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_address__to_t_address__fromStack_reversed': {'entryPoint': None, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': 615, 'id': None, 'parameterSlots': 2, 'returnSlots': 1}, 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed': {'entryPoint': None, 'id': None, 'parameterSlots': 1, 'returnSlots': 1}, 'copy_memory_to_memory': {'entryPoint': 666, 'id': None, 'parameterSlots': 3, 'returnSlots': 0}}, 'generatedSources': [{'ast': {'nodeType': 'YulBlock', 'src': '0:1579:5', 'statements': [{'nodeType': 'YulBlock', 'src': '6:3:5', 'statements': []}, {'body': {'nodeType': 'YulBlock', 'src': '151:137:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '161:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '181:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '175:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '175:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '165:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '223:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '231:4:5', 'type': '', 'value': '0x20'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '219:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '219:17:5'}, {'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '238:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '243:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '197:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '197:53:5'}, 'nodeType': 'YulExpressionStatement', 'src': '197:53:5'}, {'nodeType': 'YulAssignment', 'src': '259:23:5', 'value': {'arguments': [{'name': 'pos', 'nodeType': 'YulIdentifier', 'src': '270:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '275:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '266:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '266:16:5'}, 'variableNames': [{'name': 'end', 'nodeType': 'YulIdentifier', 'src': '259:3:5'}]}]}, 'name': 'abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'pos', 'nodeType': 'YulTypedName', 'src': '127:3:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '132:6:5', 'type': ''}], 'returnVariables': [{'name': 'end', 'nodeType': 'YulTypedName', 'src': '143:3:5', 'type': ''}], 'src': '14:274:5'}, {'body': {'nodeType': 'YulBlock', 'src': '394:125:5', 'statements': [{'nodeType': 'YulAssignment', 'src': '404:26:5', 'value': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '416:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '427:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '412:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '412:18:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '404:4:5'}]}, {'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '446:9:5'}, {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '461:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '469:42:5', 'type': '', 'value': '0xffffffffffffffffffffffffffffffffffffffff'}], 'functionName': {'name': 'and', 'nodeType': 'YulIdentifier', 'src': '457:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '457:55:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '439:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '439:74:5'}, 'nodeType': 'YulExpressionStatement', 'src': '439:74:5'}]}, 'name': 'abi_encode_tuple_t_address__to_t_address__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '363:9:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '374:6:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '385:4:5', 'type': ''}], 'src': '293:226:5'}, {'body': {'nodeType': 'YulBlock', 'src': '645:262:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '662:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '673:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '655:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '655:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '655:21:5'}, {'nodeType': 'YulVariableDeclaration', 'src': '685:27:5', 'value': {'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '705:6:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '699:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '699:13:5'}, 'variables': [{'name': 'length', 'nodeType': 'YulTypedName', 'src': '689:6:5', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '732:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '743:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '728:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '728:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '748:6:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '721:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '721:34:5'}, 'nodeType': 'YulExpressionStatement', 'src': '721:34:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'value0', 'nodeType': 'YulIdentifier', 'src': '790:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '798:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '786:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '786:15:5'}, {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '807:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '818:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '803:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '803:18:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '823:6:5'}], 'functionName': {'name': 'copy_memory_to_memory', 'nodeType': 'YulIdentifier', 'src': '764:21:5'}, 'nodeType': 'YulFunctionCall', 'src': '764:66:5'}, 'nodeType': 'YulExpressionStatement', 'src': '764:66:5'}, {'nodeType': 'YulAssignment', 'src': '839:62:5', 'value': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '855:9:5'}, {'arguments': [{'arguments': [{'name': 'length', 'nodeType': 'YulIdentifier', 'src': '874:6:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '882:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '870:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '870:15:5'}, {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '891:2:5', 'type': '', 'value': '31'}], 'functionName': {'name': 'not', 'nodeType': 'YulIdentifier', 'src': '887:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '887:7:5'}], 'functionName': {'name': 'and', 'nodeType': 'YulIdentifier', 'src': '866:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '866:29:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '851:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '851:45:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '898:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '847:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '847:54:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '839:4:5'}]}]}, 'name': 'abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '614:9:5', 'type': ''}, {'name': 'value0', 'nodeType': 'YulTypedName', 'src': '625:6:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '636:4:5', 'type': ''}], 'src': '524:383:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1086:228:5', 'statements': [{'expression': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1103:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1114:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1096:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1096:21:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1096:21:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1137:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1148:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1133:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1133:18:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1153:2:5', 'type': '', 'value': '38'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1126:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1126:30:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1126:30:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1176:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1187:2:5', 'type': '', 'value': '64'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1172:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1172:18:5'}, {'hexValue': '416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '1192:34:5', 'type': '', 'value': 'Address: delegate call to non-co'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1165:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1165:62:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1165:62:5'}, {'expression': {'arguments': [{'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1247:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1258:2:5', 'type': '', 'value': '96'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1243:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1243:18:5'}, {'hexValue': '6e7472616374', 'kind': 'string', 'nodeType': 'YulLiteral', 'src': '1263:8:5', 'type': '', 'value': 'ntract'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1236:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1236:36:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1236:36:5'}, {'nodeType': 'YulAssignment', 'src': '1281:27:5', 'value': {'arguments': [{'name': 'headStart', 'nodeType': 'YulIdentifier', 'src': '1293:9:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1304:3:5', 'type': '', 'value': '128'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1289:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1289:19:5'}, 'variableNames': [{'name': 'tail', 'nodeType': 'YulIdentifier', 'src': '1281:4:5'}]}]}, 'name': 'abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'headStart', 'nodeType': 'YulTypedName', 'src': '1063:9:5', 'type': ''}], 'returnVariables': [{'name': 'tail', 'nodeType': 'YulTypedName', 'src': '1077:4:5', 'type': ''}], 'src': '912:402:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1372:205:5', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '1382:10:5', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1391:1:5', 'type': '', 'value': '0'}, 'variables': [{'name': 'i', 'nodeType': 'YulTypedName', 'src': '1386:1:5', 'type': ''}]}, {'body': {'nodeType': 'YulBlock', 'src': '1451:63:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1476:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1481:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1472:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1472:11:5'}, {'arguments': [{'arguments': [{'name': 'src', 'nodeType': 'YulIdentifier', 'src': '1495:3:5'}, {'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1500:1:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1491:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1491:11:5'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '1485:5:5'}, 'nodeType': 'YulFunctionCall', 'src': '1485:18:5'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1465:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1465:39:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1465:39:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1412:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1415:6:5'}], 'functionName': {'name': 'lt', 'nodeType': 'YulIdentifier', 'src': '1409:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1409:13:5'}, 'nodeType': 'YulForLoop', 'post': {'nodeType': 'YulBlock', 'src': '1423:19:5', 'statements': [{'nodeType': 'YulAssignment', 'src': '1425:15:5', 'value': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1434:1:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1437:2:5', 'type': '', 'value': '32'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1430:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1430:10:5'}, 'variableNames': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1425:1:5'}]}]}, 'pre': {'nodeType': 'YulBlock', 'src': '1405:3:5', 'statements': []}, 'src': '1401:113:5'}, {'body': {'nodeType': 'YulBlock', 'src': '1540:31:5', 'statements': [{'expression': {'arguments': [{'arguments': [{'name': 'dst', 'nodeType': 'YulIdentifier', 'src': '1553:3:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1558:6:5'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '1549:3:5'}, 'nodeType': 'YulFunctionCall', 'src': '1549:16:5'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1567:1:5', 'type': '', 'value': '0'}], 'functionName': {'name': 'mstore', 'nodeType': 'YulIdentifier', 'src': '1542:6:5'}, 'nodeType': 'YulFunctionCall', 'src': '1542:27:5'}, 'nodeType': 'YulExpressionStatement', 'src': '1542:27:5'}]}, 'condition': {'arguments': [{'name': 'i', 'nodeType': 'YulIdentifier', 'src': '1529:1:5'}, {'name': 'length', 'nodeType': 'YulIdentifier', 'src': '1532:6:5'}], 'functionName': {'name': 'gt', 'nodeType': 'YulIdentifier', 'src': '1526:2:5'}, 'nodeType': 'YulFunctionCall', 'src': '1526:13:5'}, 'nodeType': 'YulIf', 'src': '1523:48:5'}]}, 'name': 'copy_memory_to_memory', 'nodeType': 'YulFunctionDefinition', 'parameters': [{'name': 'src', 'nodeType': 'YulTypedName', 'src': '1350:3:5', 'type': ''}, {'name': 'dst', 'nodeType': 'YulTypedName', 'src': '1355:3:5', 'type': ''}, {'name': 'length', 'nodeType': 'YulTypedName', 'src': '1360:6:5', 'type': ''}], 'src': '1319:258:5'}]}, 'contents': '{\n    { }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), "Address: delegate call to non-co")\n        mstore(add(headStart, 96), "ntract")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n}', 'id': 5, 'language': 'Yul', 'name': '#utility.yul'}], 'immutableReferences': {}, 'linkReferences': {}, 'object': '6080604052600436106100225760003560e01c80635c60da1b1461003957610031565b366100315761002f61006a565b005b61002f61006a565b34801561004557600080fd5b5061004e6100a5565b6040516001600160a01b03909116815260200160405180910390f35b6100a361009e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b61010c565b565b60006100d87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b90565b606061010583836040518060600160405280602781526020016102cb60279139610130565b9392505050565b3660008037600080366000845af43d6000803e80801561012b573d6000f35b3d6000fd5b60606001600160a01b0384163b61019d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101b8919061024b565b600060405180830381855af49150503d80600081146101f3576040519150601f19603f3d011682016040523d82523d6000602084013e6101f8565b606091505b5091509150610208828286610212565b9695505050505050565b60608315610221575081610105565b8251156102315782518084602001fd5b8160405162461bcd60e51b81526004016101949190610267565b6000825161025d81846020870161029a565b9190910192915050565b602081526000825180602084015261028681604085016020870161029a565b601f01601f19169190910160400192915050565b60005b838110156102b557818101518382015260200161029d565b838111156102c4576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122045b505fcd678db15d8e5208e301112e80077189909f1fcd0ef96d40c8b24d2fe64736f6c63430008070033', 'opcodes': 'PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x39 JUMPI PUSH2 0x31 JUMP JUMPDEST CALLDATASIZE PUSH2 0x31 JUMPI PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2F PUSH2 0x6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0xA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH2 0x9E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD8 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x105 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2CB PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x130 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x12B JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0x24B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x208 DUP3 DUP3 DUP7 PUSH2 0x212 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x221 JUMPI POP DUP2 PUSH2 0x105 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x231 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP2 SWAP1 PUSH2 0x267 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x286 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x29A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x29D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122045B505 0xFC 0xD6 PUSH25 0xDB15D8E5208E301112E80077189909F1FCD0EF96D40C8B24D2 INVALID PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ', 'sourceMap': '987:73:4:-:0;;;;;;;;;;;;;;;;;;;;;;;2898:11:0;:9;:11::i;:::-;987:73:4;;2675:11:0;:9;:11::i;1096:97:3:-;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;457:55:5;;;439:74;;427:2;412:18;1096:97:3;;;;;;;2322:110:0;2397:28;2407:17;950:66:3;1284:54;-1:-1:-1;;;;;1284:54:3;;1199:146;2407:17:0;2397:9;:28::i;:::-;2322:110::o;1096:97:3:-;1143:7;1169:17;950:66;1284:54;-1:-1:-1;;;;;1284:54:3;;1199:146;1169:17;1162:24;;1096:97;:::o;1599:147:2:-;1726:4;1599:147::o;6570:198:1:-;6653:12;6684:77;6705:6;6713:4;6684:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6677:84;6570:198;-1:-1:-1;;;6570:198:1:o;948:895:0:-;1286:14;1283:1;1280;1267:34;1500:1;1497;1481:14;1478:1;1462:14;1455:5;1442:60;1576:16;1573:1;1570;1555:38;1614:6;1681:66;;;;1796:16;1793:1;1786:27;1681:66;1716:16;1713:1;1706:27;6954:387:1;7095:12;-1:-1:-1;;;;;1465:19:1;;;7119:69;;;;-1:-1:-1;;;7119:69:1;;1114:2:5;7119:69:1;;;1096:21:5;1153:2;1133:18;;;1126:30;1192:34;1172:18;;;1165:62;-1:-1:-1;;;1243:18:5;;;1236:36;1289:19;;7119:69:1;;;;;;;;;7200:12;7214:23;7241:6;-1:-1:-1;;;;;7241:19:1;7261:4;7241:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7199:67;;;;7283:51;7300:7;7309:10;7321:12;7283:16;:51::i;:::-;7276:58;6954:387;-1:-1:-1;;;;;;6954:387:1:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:1;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:1;;;;;;;;:::i;14:274:5:-;143:3;181:6;175:13;197:53;243:6;238:3;231:4;223:6;219:17;197:53;:::i;:::-;266:16;;;;;14:274;-1:-1:-1;;14:274:5:o;524:383::-;673:2;662:9;655:21;636:4;705:6;699:13;748:6;743:2;732:9;728:18;721:34;764:66;823:6;818:2;807:9;803:18;798:2;790:6;786:15;764:66;:::i;:::-;891:2;870:15;-1:-1:-1;;866:29:5;851:45;;;;898:2;847:54;;524:383;-1:-1:-1;;524:383:5:o;1319:258::-;1391:1;1401:113;1415:6;1412:1;1409:13;1401:113;;;1491:11;;;1485:18;1472:11;;;1465:39;1437:2;1430:10;1401:113;;;1532:6;1529:1;1526:13;1523:48;;;1567:1;1558:6;1553:3;1549:16;1542:27;1523:48;;1319:258;;;:::o'}, 'legacyAssembly': {'.code': [{'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '80'}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '40'}, {'begin': 987, 'end': 1060, 'name': 'MSTORE', 'source': 4}, {'begin': 1025, 'end': 1058, 'name': 'CALLVALUE', 'source': 4}, {'begin': 1025, 'end': 1058, 'name': 'DUP1', 'source': 4}, {'begin': 1025, 'end': 1058, 'name': 'ISZERO', 'source': 4}, {'begin': 1025, 'end': 1058, 'name': 'PUSH [tag]', 'source': 4, 'value': '1'}, {'begin': 1025, 'end': 1058, 'name': 'JUMPI', 'source': 4}, {'begin': 1025, 'end': 1058, 'name': 'PUSH', 'source': 4, 'value': '0'}, {'begin': 1025, 'end': 1058, 'name': 'DUP1', 'source': 4}, {'begin': 1025, 'end': 1058, 'name': 'REVERT', 'source': 4}, {'begin': 1025, 'end': 1058, 'name': 'tag', 'source': 4, 'value': '1'}, {'begin': 1025, 'end': 1058, 'name': 'JUMPDEST', 'source': 4}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 347, 'end': 401, 'name': 'PUSH [tag]', 'source': 3, 'value': '5'}, {'begin': 400, 'end': 401, 'name': 'PUSH', 'source': 3, 'value': '1'}, {'begin': 355, 'end': 396, 'name': 'PUSH', 'source': 3, 'value': '360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD'}, {'begin': 347, 'end': 401, 'name': 'PUSH [tag]', 'source': 3, 'value': '6'}, {'begin': 347, 'end': 401, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 347, 'end': 401, 'name': 'tag', 'source': 3, 'value': '5'}, {'begin': 347, 'end': 401, 'name': 'JUMPDEST', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '0'}, {'begin': -1, 'end': -1, 'name': 'DUP1', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '20'}, {'begin': -1, 'end': -1, 'name': 'PUSH data', 'source': -1, 'value': '75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D'}, {'begin': -1, 'end': -1, 'name': 'DUP4', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'CODECOPY', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'DUP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SWAP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MSTORE', 'source': -1}, {'begin': 315, 'end': 402, 'name': 'EQ', 'source': 3}, {'begin': 308, 'end': 403, 'name': 'PUSH [tag]', 'source': 3, 'value': '8'}, {'begin': 308, 'end': 403, 'name': 'JUMPI', 'source': 3}, {'begin': 308, 'end': 403, 'name': 'PUSH [tag]', 'source': 3, 'value': '8'}, {'begin': 308, 'end': 403, 'name': 'PUSH [tag]', 'source': 3, 'value': '9'}, {'begin': 308, 'end': 403, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 308, 'end': 403, 'name': 'tag', 'source': 3, 'value': '8'}, {'begin': 308, 'end': 403, 'name': 'JUMPDEST', 'source': 3}, {'begin': 470, 'end': 512, 'name': 'PUSH', 'source': 3, 'value': '142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4'}, {'begin': 413, 'end': 461, 'name': 'PUSH [tag]', 'source': 3, 'value': '10'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '0'}, {'begin': -1, 'end': -1, 'name': 'DUP1', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '20'}, {'begin': -1, 'end': -1, 'name': 'PUSH data', 'source': -1, 'value': '75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D'}, {'begin': -1, 'end': -1, 'name': 'DUP4', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'CODECOPY', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'DUP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MLOAD', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SWAP2', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'MSTORE', 'source': -1}, {'begin': 440, 'end': 460, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 440, 'end': 460, 'name': 'SHL', 'source': 3}, {'begin': 413, 'end': 439, 'name': 'PUSH [tag]', 'source': 3, 'value': '11'}, {'begin': 413, 'end': 439, 'name': 'PUSH', 'source': 3, 'value': '20'}, {'begin': 413, 'end': 439, 'name': 'SHL', 'source': 3}, {'begin': 413, 'end': 439, 'name': 'PUSH [tag]', 'source': 3, 'value': '18446744073709551632'}, {'begin': 413, 'end': 439, 'name': 'OR', 'source': 3}, {'begin': 413, 'end': 461, 'name': 'PUSH', 'source': 3, 'value': '20'}, {'begin': 413, 'end': 461, 'name': 'SHR', 'source': 3}, {'begin': 413, 'end': 461, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 413, 'end': 461, 'name': 'tag', 'source': 3, 'value': '10'}, {'begin': 413, 'end': 461, 'name': 'JUMPDEST', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'DUP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 413, 'end': 512, 'name': 'SWAP3', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP3', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'AND', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'NOT', 'source': -1}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP3', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'AND', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP2', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP2', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'OR', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SWAP1', 'source': 3}, {'begin': 413, 'end': 512, 'name': 'SSTORE', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 620, 'end': 659, 'name': 'DUP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MLOAD', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '4'}, {'begin': 620, 'end': 659, 'name': 'DUP2', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MSTORE', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '24'}, {'begin': 620, 'end': 659, 'name': 'DUP2', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'ADD', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'SWAP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'SWAP2', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MSTORE', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'PUSH', 'source': 3, 'value': '20'}, {'begin': 620, 'end': 659, 'name': 'DUP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'DUP3', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'ADD', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'DUP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 620, 'end': 659, 'name': 'AND', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '204A7F07'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E2'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 620, 'end': 659, 'name': 'OR', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'SWAP1', 'source': 3}, {'begin': 620, 'end': 659, 'name': 'MSTORE', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'PUSH [tag]', 'source': 3, 'value': '12'}, {'begin': 522, 'end': 669, 'name': 'SWAP2', 'source': 3}, {'begin': 564, 'end': 606, 'name': 'PUSH', 'source': 3, 'value': '142FD5B9D67721EFDA3A5E2E9BE47A96C9B724A4'}, {'begin': 564, 'end': 606, 'name': 'SWAP2', 'source': 3}, {'begin': 522, 'end': 550, 'name': 'PUSH [tag]', 'source': 3, 'value': '18446744073709551633'}, {'begin': 522, 'end': 550, 'name': 'PUSH [tag]', 'source': 3, 'value': '13'}, {'begin': 522, 'end': 550, 'name': 'DUP3', 'source': 3}, {'begin': 522, 'end': 550, 'name': 'SHL', 'source': 3}, {'begin': 522, 'end': 550, 'name': 'OR', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'SWAP1', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'SHR', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 522, 'end': 669, 'name': 'tag', 'source': 3, 'value': '12'}, {'begin': 522, 'end': 669, 'name': 'JUMPDEST', 'source': 3}, {'begin': 522, 'end': 669, 'name': 'POP', 'source': 3}, {'begin': 987, 'end': 1060, 'name': 'PUSH [tag]', 'source': 4, 'value': '41'}, {'begin': 987, 'end': 1060, 'name': 'JUMP', 'source': 4}, {'begin': 1599, 'end': 1746, 'name': 'tag', 'source': 2, 'value': '11'}, {'begin': 1599, 'end': 1746, 'name': 'JUMPDEST', 'source': 2}, {'begin': 1726, 'end': 1730, 'name': 'SWAP1', 'source': 2}, {'begin': 1599, 'end': 1746, 'name': 'JUMP', 'source': 2, 'value': '[out]'}, {'begin': 6570, 'end': 6768, 'name': 'tag', 'source': 1, 'value': '13'}, {'begin': 6570, 'end': 6768, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6653, 'end': 6665, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH [tag]', 'source': 1, 'value': '18'}, {'begin': 6705, 'end': 6711, 'name': 'DUP4', 'source': 1}, {'begin': 6713, 'end': 6717, 'name': 'DUP4', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MLOAD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'DUP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH data', 'source': 1, 'value': '9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'SWAP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'CODECOPY', 'source': 1}, {'begin': 6684, 'end': 6704, 'name': 'PUSH [tag]', 'source': 1, 'value': '19'}, {'begin': 6684, 'end': 6761, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 6684, 'end': 6761, 'name': 'tag', 'source': 1, 'value': '18'}, {'begin': 6684, 'end': 6761, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6677, 'end': 6761, 'name': 'SWAP4', 'source': 1}, {'begin': 6570, 'end': 6768, 'name': 'SWAP3', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6570, 'end': 6768, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 6954, 'end': 7341, 'name': 'tag', 'source': 1, 'value': '19'}, {'begin': 6954, 'end': 7341, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7095, 'end': 7107, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1465, 'end': 1484, 'name': 'DUP5', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'AND', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'EXTCODESIZE', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH [tag]', 'source': 1, 'value': '23'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPI', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 7119, 'end': 7188, 'name': 'DUP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'MSTORE', 'source': 1}, {'begin': 883, 'end': 885, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 7119, 'end': 7188, 'name': 'DUP3', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'ADD', 'source': 1}, {'begin': 865, 'end': 886, 'name': 'MSTORE', 'source': 5}, {'begin': 922, 'end': 924, 'name': 'PUSH', 'source': 5, 'value': '26'}, {'begin': 902, 'end': 920, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 902, 'end': 920, 'name': 'DUP3', 'source': 5}, {'begin': 902, 'end': 920, 'name': 'ADD', 'source': 5}, {'begin': 895, 'end': 925, 'name': 'MSTORE', 'source': 5}, {'begin': 961, 'end': 995, 'name': 'PUSH', 'source': 5, 'value': '416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F'}, {'begin': 941, 'end': 959, 'name': 'PUSH', 'source': 5, 'value': '44'}, {'begin': 941, 'end': 959, 'name': 'DUP3', 'source': 5}, {'begin': 941, 'end': 959, 'name': 'ADD', 'source': 5}, {'begin': 934, 'end': 996, 'name': 'MSTORE', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1B9D1C9858DD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'D2'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 1012, 'end': 1030, 'name': 'PUSH', 'source': 5, 'value': '64'}, {'begin': 1012, 'end': 1030, 'name': 'DUP3', 'source': 5}, {'begin': 1012, 'end': 1030, 'name': 'ADD', 'source': 5}, {'begin': 1005, 'end': 1041, 'name': 'MSTORE', 'source': 5}, {'begin': 1058, 'end': 1077, 'name': 'PUSH', 'source': 5, 'value': '84'}, {'begin': 1058, 'end': 1077, 'name': 'ADD', 'source': 5}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '24'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'DUP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SUB', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'REVERT', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '23'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7200, 'end': 7212, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7214, 'end': 7237, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7247, 'name': 'DUP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 7241, 'end': 7260, 'name': 'AND', 'source': 1}, {'begin': 7261, 'end': 7265, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '26'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '27'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '26'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP4', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SUB', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'GAS', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DELEGATECALL', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'EQ', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '30'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPI', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '1F'}, {'begin': 7241, 'end': 7266, 'name': 'NOT', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '3F'}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'AND', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 7241, 'end': 7266, 'name': 'DUP5', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATACOPY', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '29'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '30'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '29'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP3', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7283, 'end': 7334, 'name': 'PUSH [tag]', 'source': 1, 'value': '31'}, {'begin': 7199, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7321, 'end': 7333, 'name': 'DUP7', 'source': 1}, {'begin': 7283, 'end': 7299, 'name': 'PUSH [tag]', 'source': 1, 'value': '32'}, {'begin': 7283, 'end': 7334, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7283, 'end': 7334, 'name': 'tag', 'source': 1, 'value': '31'}, {'begin': 7283, 'end': 7334, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7276, 'end': 7334, 'name': 'SWAP7', 'source': 1}, {'begin': 6954, 'end': 7341, 'name': 'SWAP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6954, 'end': 7341, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 7561, 'end': 8253, 'name': 'tag', 'source': 1, 'value': '32'}, {'begin': 7561, 'end': 8253, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7707, 'end': 7719, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7735, 'end': 7742, 'name': 'DUP4', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'ISZERO', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'PUSH [tag]', 'source': 1, 'value': '35'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPI', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7765, 'end': 7775, 'name': 'DUP2', 'source': 1}, {'begin': 7758, 'end': 7775, 'name': 'PUSH [tag]', 'source': 1, 'value': '18'}, {'begin': 7758, 'end': 7775, 'name': 'JUMP', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'tag', 'source': 1, 'value': '35'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'DUP3', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'MLOAD', 'source': 1}, {'begin': 7876, 'end': 7897, 'name': 'ISZERO', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'PUSH [tag]', 'source': 1, 'value': '37'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPI', 'source': 1}, {'begin': 8070, 'end': 8080, 'name': 'DUP3', 'source': 1}, {'begin': 8064, 'end': 8081, 'name': 'MLOAD', 'source': 1}, {'begin': 8130, 'end': 8145, 'name': 'DUP1', 'source': 1}, {'begin': 8117, 'end': 8127, 'name': 'DUP5', 'source': 1}, {'begin': 8113, 'end': 8115, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 8109, 'end': 8128, 'name': 'ADD', 'source': 1}, {'begin': 8102, 'end': 8146, 'name': 'REVERT', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'tag', 'source': 1, 'value': '37'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPDEST', 'source': 1}, {'begin': 8209, 'end': 8221, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 8202, 'end': 8222, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 8202, 'end': 8222, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'MSTORE', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 8202, 'end': 8222, 'name': 'ADD', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '24'}, {'begin': 8202, 'end': 8222, 'name': 'SWAP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'SWAP1', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '40'}, {'begin': 8202, 'end': 8222, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 14, 'end': 288, 'name': 'tag', 'source': 5, 'value': '27'}, {'begin': 14, 'end': 288, 'name': 'JUMPDEST', 'source': 5}, {'begin': 143, 'end': 146, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 181, 'end': 187, 'name': 'DUP3', 'source': 5}, {'begin': 175, 'end': 188, 'name': 'MLOAD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '43'}, {'begin': 243, 'end': 249, 'name': 'DUP2', 'source': 5}, {'begin': 238, 'end': 241, 'name': 'DUP5', 'source': 5}, {'begin': 231, 'end': 235, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 223, 'end': 229, 'name': 'DUP8', 'source': 5}, {'begin': 219, 'end': 236, 'name': 'ADD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '44'}, {'begin': 197, 'end': 250, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 197, 'end': 250, 'name': 'tag', 'source': 5, 'value': '43'}, {'begin': 197, 'end': 250, 'name': 'JUMPDEST', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP1', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'ADD', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP3', 'source': 5}, {'begin': 14, 'end': 288, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 14, 'end': 288, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 293, 'end': 676, 'name': 'tag', 'source': 5, 'value': '40'}, {'begin': 293, 'end': 676, 'name': 'JUMPDEST', 'source': 5}, {'begin': 442, 'end': 444, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 431, 'end': 440, 'name': 'DUP2', 'source': 5}, {'begin': 424, 'end': 445, 'name': 'MSTORE', 'source': 5}, {'begin': 405, 'end': 409, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 474, 'end': 480, 'name': 'DUP3', 'source': 5}, {'begin': 468, 'end': 481, 'name': 'MLOAD', 'source': 5}, {'begin': 517, 'end': 523, 'name': 'DUP1', 'source': 5}, {'begin': 512, 'end': 514, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 501, 'end': 510, 'name': 'DUP5', 'source': 5}, {'begin': 497, 'end': 515, 'name': 'ADD', 'source': 5}, {'begin': 490, 'end': 524, 'name': 'MSTORE', 'source': 5}, {'begin': 533, 'end': 599, 'name': 'PUSH [tag]', 'source': 5, 'value': '46'}, {'begin': 592, 'end': 598, 'name': 'DUP2', 'source': 5}, {'begin': 587, 'end': 589, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 576, 'end': 585, 'name': 'DUP6', 'source': 5}, {'begin': 572, 'end': 590, 'name': 'ADD', 'source': 5}, {'begin': 567, 'end': 569, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 559, 'end': 565, 'name': 'DUP8', 'source': 5}, {'begin': 555, 'end': 570, 'name': 'ADD', 'source': 5}, {'begin': 533, 'end': 599, 'name': 'PUSH [tag]', 'source': 5, 'value': '44'}, {'begin': 533, 'end': 599, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 533, 'end': 599, 'name': 'tag', 'source': 5, 'value': '46'}, {'begin': 533, 'end': 599, 'name': 'JUMPDEST', 'source': 5}, {'begin': 660, 'end': 662, 'name': 'PUSH', 'source': 5, 'value': '1F'}, {'begin': 639, 'end': 654, 'name': 'ADD', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1F'}, {'begin': -1, 'end': -1, 'name': 'NOT', 'source': -1}, {'begin': 635, 'end': 664, 'name': 'AND', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'SWAP2', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'SWAP1', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'SWAP2', 'source': 5}, {'begin': 620, 'end': 665, 'name': 'ADD', 'source': 5}, {'begin': 667, 'end': 669, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 616, 'end': 670, 'name': 'ADD', 'source': 5}, {'begin': 616, 'end': 670, 'name': 'SWAP3', 'source': 5}, {'begin': 293, 'end': 676, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 293, 'end': 676, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1088, 'end': 1310, 'name': 'tag', 'source': 5, 'value': '6'}, {'begin': 1088, 'end': 1310, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1128, 'end': 1132, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1156, 'end': 1157, 'name': 'DUP3', 'source': 5}, {'begin': 1153, 'end': 1154, 'name': 'DUP3', 'source': 5}, {'begin': 1150, 'end': 1158, 'name': 'LT', 'source': 5}, {'begin': 1147, 'end': 1278, 'name': 'ISZERO', 'source': 5}, {'begin': 1147, 'end': 1278, 'name': 'PUSH [tag]', 'source': 5, 'value': '49'}, {'begin': 1147, 'end': 1278, 'name': 'JUMPI', 'source': 5}, {'begin': 1200, 'end': 1210, 'name': 'PUSH', 'source': 5, 'value': '4E487B71'}, {'begin': 1195, 'end': 1198, 'name': 'PUSH', 'source': 5, 'value': 'E0'}, {'begin': 1191, 'end': 1211, 'name': 'SHL', 'source': 5}, {'begin': 1188, 'end': 1189, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1181, 'end': 1212, 'name': 'MSTORE', 'source': 5}, {'begin': 1235, 'end': 1239, 'name': 'PUSH', 'source': 5, 'value': '11'}, {'begin': 1232, 'end': 1233, 'name': 'PUSH', 'source': 5, 'value': '4'}, {'begin': 1225, 'end': 1240, 'name': 'MSTORE', 'source': 5}, {'begin': 1263, 'end': 1267, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 1260, 'end': 1261, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1253, 'end': 1268, 'name': 'REVERT', 'source': 5}, {'begin': 1147, 'end': 1278, 'name': 'tag', 'source': 5, 'value': '49'}, {'begin': 1147, 'end': 1278, 'name': 'JUMPDEST', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 1295, 'end': 1304, 'name': 'SUB', 'source': 5}, {'begin': 1295, 'end': 1304, 'name': 'SWAP1', 'source': 5}, {'begin': 1088, 'end': 1310, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1315, 'end': 1573, 'name': 'tag', 'source': 5, 'value': '44'}, {'begin': 1315, 'end': 1573, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1387, 'end': 1388, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1397, 'end': 1510, 'name': 'tag', 'source': 5, 'value': '51'}, {'begin': 1397, 'end': 1510, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1411, 'end': 1417, 'name': 'DUP4', 'source': 5}, {'begin': 1408, 'end': 1409, 'name': 'DUP2', 'source': 5}, {'begin': 1405, 'end': 1418, 'name': 'LT', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'ISZERO', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'PUSH [tag]', 'source': 5, 'value': '53'}, {'begin': 1397, 'end': 1510, 'name': 'JUMPI', 'source': 5}, {'begin': 1487, 'end': 1498, 'name': 'DUP2', 'source': 5}, {'begin': 1487, 'end': 1498, 'name': 'DUP2', 'source': 5}, {'begin': 1487, 'end': 1498, 'name': 'ADD', 'source': 5}, {'begin': 1481, 'end': 1499, 'name': 'MLOAD', 'source': 5}, {'begin': 1468, 'end': 1479, 'name': 'DUP4', 'source': 5}, {'begin': 1468, 'end': 1479, 'name': 'DUP3', 'source': 5}, {'begin': 1468, 'end': 1479, 'name': 'ADD', 'source': 5}, {'begin': 1461, 'end': 1500, 'name': 'MSTORE', 'source': 5}, {'begin': 1433, 'end': 1435, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 1426, 'end': 1436, 'name': 'ADD', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'PUSH [tag]', 'source': 5, 'value': '51'}, {'begin': 1397, 'end': 1510, 'name': 'JUMP', 'source': 5}, {'begin': 1397, 'end': 1510, 'name': 'tag', 'source': 5, 'value': '53'}, {'begin': 1397, 'end': 1510, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1528, 'end': 1534, 'name': 'DUP4', 'source': 5}, {'begin': 1525, 'end': 1526, 'name': 'DUP2', 'source': 5}, {'begin': 1522, 'end': 1535, 'name': 'GT', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'ISZERO', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'PUSH [tag]', 'source': 5, 'value': '54'}, {'begin': 1519, 'end': 1567, 'name': 'JUMPI', 'source': 5}, {'begin': 1563, 'end': 1564, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1554, 'end': 1560, 'name': 'DUP5', 'source': 5}, {'begin': 1549, 'end': 1552, 'name': 'DUP5', 'source': 5}, {'begin': 1545, 'end': 1561, 'name': 'ADD', 'source': 5}, {'begin': 1538, 'end': 1565, 'name': 'MSTORE', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'tag', 'source': 5, 'value': '54'}, {'begin': 1519, 'end': 1567, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1519, 'end': 1567, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'POP', 'source': 5}, {'begin': 1315, 'end': 1573, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1578, 'end': 1705, 'name': 'tag', 'source': 5, 'value': '9'}, {'begin': 1578, 'end': 1705, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1639, 'end': 1649, 'name': 'PUSH', 'source': 5, 'value': '4E487B71'}, {'begin': 1634, 'end': 1637, 'name': 'PUSH', 'source': 5, 'value': 'E0'}, {'begin': 1630, 'end': 1650, 'name': 'SHL', 'source': 5}, {'begin': 1627, 'end': 1628, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1620, 'end': 1651, 'name': 'MSTORE', 'source': 5}, {'begin': 1670, 'end': 1674, 'name': 'PUSH', 'source': 5, 'value': '1'}, {'begin': 1667, 'end': 1668, 'name': 'PUSH', 'source': 5, 'value': '4'}, {'begin': 1660, 'end': 1675, 'name': 'MSTORE', 'source': 5}, {'begin': 1694, 'end': 1698, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 1691, 'end': 1692, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1684, 'end': 1699, 'name': 'REVERT', 'source': 5}, {'begin': 1578, 'end': 1705, 'name': 'tag', 'source': 5, 'value': '41'}, {'begin': 1578, 'end': 1705, 'name': 'JUMPDEST', 'source': 5}, {'begin': 987, 'end': 1060, 'name': 'PUSH #[$]', 'source': 4, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 987, 'end': 1060, 'name': 'DUP1', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH [$]', 'source': 4, 'value': '0000000000000000000000000000000000000000000000000000000000000000'}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '0'}, {'begin': 987, 'end': 1060, 'name': 'CODECOPY', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '0'}, {'begin': 987, 'end': 1060, 'name': 'RETURN', 'source': 4}], '.data': {'0': {'.auxdata': 'a264697066735822122045b505fcd678db15d8e5208e301112e80077189909f1fcd0ef96d40c8b24d2fe64736f6c63430008070033', '.code': [{'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '80'}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '40'}, {'begin': 987, 'end': 1060, 'name': 'MSTORE', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '4'}, {'begin': 987, 'end': 1060, 'name': 'CALLDATASIZE', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'LT', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH [tag]', 'source': 4, 'value': '1'}, {'begin': 987, 'end': 1060, 'name': 'JUMPI', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '0'}, {'begin': 987, 'end': 1060, 'name': 'CALLDATALOAD', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': 'E0'}, {'begin': 987, 'end': 1060, 'name': 'SHR', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'DUP1', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH', 'source': 4, 'value': '5C60DA1B'}, {'begin': 987, 'end': 1060, 'name': 'EQ', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH [tag]', 'source': 4, 'value': '3'}, {'begin': 987, 'end': 1060, 'name': 'JUMPI', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH [tag]', 'source': 4, 'value': '2'}, {'begin': 987, 'end': 1060, 'name': 'JUMP', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'tag', 'source': 4, 'value': '1'}, {'begin': 987, 'end': 1060, 'name': 'JUMPDEST', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'CALLDATASIZE', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'PUSH [tag]', 'source': 4, 'value': '2'}, {'begin': 987, 'end': 1060, 'name': 'JUMPI', 'source': 4}, {'begin': 2898, 'end': 2909, 'name': 'PUSH [tag]', 'source': 0, 'value': '6'}, {'begin': 2898, 'end': 2907, 'name': 'PUSH [tag]', 'source': 0, 'value': '7'}, {'begin': 2898, 'end': 2909, 'name': 'JUMP', 'source': 0, 'value': '[in]'}, {'begin': 2898, 'end': 2909, 'name': 'tag', 'source': 0, 'value': '6'}, {'begin': 2898, 'end': 2909, 'name': 'JUMPDEST', 'source': 0}, {'begin': 987, 'end': 1060, 'name': 'STOP', 'source': 4}, {'begin': 987, 'end': 1060, 'name': 'tag', 'source': 4, 'value': '2'}, {'begin': 987, 'end': 1060, 'name': 'JUMPDEST', 'source': 4}, {'begin': 2675, 'end': 2686, 'name': 'PUSH [tag]', 'source': 0, 'value': '6'}, {'begin': 2675, 'end': 2684, 'name': 'PUSH [tag]', 'source': 0, 'value': '7'}, {'begin': 2675, 'end': 2686, 'name': 'JUMP', 'source': 0, 'value': '[in]'}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '3'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'CALLVALUE', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'DUP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'ISZERO', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH [tag]', 'source': 3, 'value': '11'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPI', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 1096, 'end': 1193, 'name': 'DUP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'REVERT', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '11'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'POP', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH [tag]', 'source': 3, 'value': '12'}, {'begin': 1096, 'end': 1193, 'name': 'PUSH [tag]', 'source': 3, 'value': '13'}, {'begin': 1096, 'end': 1193, 'name': 'JUMP', 'source': 3, 'value': '[in]'}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '12'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 1096, 'end': 1193, 'name': 'MLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 457, 'end': 512, 'name': 'SWAP1', 'source': 5}, {'begin': 457, 'end': 512, 'name': 'SWAP2', 'source': 5}, {'begin': 457, 'end': 512, 'name': 'AND', 'source': 5}, {'begin': 439, 'end': 513, 'name': 'DUP2', 'source': 5}, {'begin': 439, 'end': 513, 'name': 'MSTORE', 'source': 5}, {'begin': 427, 'end': 429, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 412, 'end': 430, 'name': 'ADD', 'source': 5}, {'begin': 1096, 'end': 1193, 'name': 'PUSH', 'source': 3, 'value': '40'}, {'begin': 1096, 'end': 1193, 'name': 'MLOAD', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'DUP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SWAP2', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SUB', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SWAP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'RETURN', 'source': 3}, {'begin': 2322, 'end': 2432, 'name': 'tag', 'source': 0, 'value': '7'}, {'begin': 2322, 'end': 2432, 'name': 'JUMPDEST', 'source': 0}, {'begin': 2397, 'end': 2425, 'name': 'PUSH [tag]', 'source': 0, 'value': '21'}, {'begin': 2407, 'end': 2424, 'name': 'PUSH [tag]', 'source': 0, 'value': '22'}, {'begin': 950, 'end': 1016, 'name': 'PUSH', 'source': 3, 'value': '360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC'}, {'begin': 1284, 'end': 1338, 'name': 'SLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1284, 'end': 1338, 'name': 'AND', 'source': 3}, {'begin': 1284, 'end': 1338, 'name': 'SWAP1', 'source': 3}, {'begin': 1199, 'end': 1345, 'name': 'JUMP', 'source': 3}, {'begin': 2407, 'end': 2424, 'name': 'tag', 'source': 0, 'value': '22'}, {'begin': 2407, 'end': 2424, 'name': 'JUMPDEST', 'source': 0}, {'begin': 2397, 'end': 2406, 'name': 'PUSH [tag]', 'source': 0, 'value': '24'}, {'begin': 2397, 'end': 2425, 'name': 'JUMP', 'source': 0, 'value': '[in]'}, {'begin': 2397, 'end': 2425, 'name': 'tag', 'source': 0, 'value': '21'}, {'begin': 2397, 'end': 2425, 'name': 'JUMPDEST', 'source': 0}, {'begin': 2322, 'end': 2432, 'name': 'JUMP', 'source': 0, 'value': '[out]'}, {'begin': 1096, 'end': 1193, 'name': 'tag', 'source': 3, 'value': '13'}, {'begin': 1096, 'end': 1193, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1143, 'end': 1150, 'name': 'PUSH', 'source': 3, 'value': '0'}, {'begin': 1169, 'end': 1186, 'name': 'PUSH [tag]', 'source': 3, 'value': '26'}, {'begin': 950, 'end': 1016, 'name': 'PUSH', 'source': 3, 'value': '360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC'}, {'begin': 1284, 'end': 1338, 'name': 'SLOAD', 'source': 3}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1284, 'end': 1338, 'name': 'AND', 'source': 3}, {'begin': 1284, 'end': 1338, 'name': 'SWAP1', 'source': 3}, {'begin': 1199, 'end': 1345, 'name': 'JUMP', 'source': 3}, {'begin': 1169, 'end': 1186, 'name': 'tag', 'source': 3, 'value': '26'}, {'begin': 1169, 'end': 1186, 'name': 'JUMPDEST', 'source': 3}, {'begin': 1162, 'end': 1186, 'name': 'SWAP1', 'source': 3}, {'begin': 1162, 'end': 1186, 'name': 'POP', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'SWAP1', 'source': 3}, {'begin': 1096, 'end': 1193, 'name': 'JUMP', 'source': 3, 'value': '[out]'}, {'begin': 1599, 'end': 1746, 'name': 'tag', 'source': 2, 'value': '16'}, {'begin': 1599, 'end': 1746, 'name': 'JUMPDEST', 'source': 2}, {'begin': 1726, 'end': 1730, 'name': 'SWAP1', 'source': 2}, {'begin': 1599, 'end': 1746, 'name': 'JUMP', 'source': 2, 'value': '[out]'}, {'begin': 6570, 'end': 6768, 'name': 'tag', 'source': 1, 'value': '17'}, {'begin': 6570, 'end': 6768, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6653, 'end': 6665, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH [tag]', 'source': 1, 'value': '29'}, {'begin': 6705, 'end': 6711, 'name': 'DUP4', 'source': 1}, {'begin': 6713, 'end': 6717, 'name': 'DUP4', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MLOAD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'DUP1', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'DUP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'MSTORE', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 6684, 'end': 6761, 'name': 'ADD', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'PUSH data', 'source': 1, 'value': '9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398'}, {'begin': 6684, 'end': 6761, 'name': 'PUSH', 'source': 1, 'value': '27'}, {'begin': 6684, 'end': 6761, 'name': 'SWAP2', 'source': 1}, {'begin': 6684, 'end': 6761, 'name': 'CODECOPY', 'source': 1}, {'begin': 6684, 'end': 6704, 'name': 'PUSH [tag]', 'source': 1, 'value': '30'}, {'begin': 6684, 'end': 6761, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 6684, 'end': 6761, 'name': 'tag', 'source': 1, 'value': '29'}, {'begin': 6684, 'end': 6761, 'name': 'JUMPDEST', 'source': 1}, {'begin': 6677, 'end': 6761, 'name': 'SWAP4', 'source': 1}, {'begin': 6570, 'end': 6768, 'name': 'SWAP3', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6570, 'end': 6768, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 948, 'end': 1843, 'name': 'tag', 'source': 0, 'value': '24'}, {'begin': 948, 'end': 1843, 'name': 'JUMPDEST', 'source': 0}, {'begin': 1286, 'end': 1300, 'name': 'CALLDATASIZE', 'source': 0}, {'begin': 1283, 'end': 1284, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1280, 'end': 1281, 'name': 'DUP1', 'source': 0}, {'begin': 1267, 'end': 1301, 'name': 'CALLDATACOPY', 'source': 0}, {'begin': 1500, 'end': 1501, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1497, 'end': 1498, 'name': 'DUP1', 'source': 0}, {'begin': 1481, 'end': 1495, 'name': 'CALLDATASIZE', 'source': 0}, {'begin': 1478, 'end': 1479, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1462, 'end': 1476, 'name': 'DUP5', 'source': 0}, {'begin': 1455, 'end': 1460, 'name': 'GAS', 'source': 0}, {'begin': 1442, 'end': 1502, 'name': 'DELEGATECALL', 'source': 0}, {'begin': 1576, 'end': 1592, 'name': 'RETURNDATASIZE', 'source': 0}, {'begin': 1573, 'end': 1574, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1570, 'end': 1571, 'name': 'DUP1', 'source': 0}, {'begin': 1555, 'end': 1593, 'name': 'RETURNDATACOPY', 'source': 0}, {'begin': 1614, 'end': 1620, 'name': 'DUP1', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'DUP1', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'ISZERO', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'PUSH [tag]', 'source': 0, 'value': '36'}, {'begin': 1681, 'end': 1747, 'name': 'JUMPI', 'source': 0}, {'begin': 1796, 'end': 1812, 'name': 'RETURNDATASIZE', 'source': 0}, {'begin': 1793, 'end': 1794, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1786, 'end': 1813, 'name': 'RETURN', 'source': 0}, {'begin': 1681, 'end': 1747, 'name': 'tag', 'source': 0, 'value': '36'}, {'begin': 1681, 'end': 1747, 'name': 'JUMPDEST', 'source': 0}, {'begin': 1716, 'end': 1732, 'name': 'RETURNDATASIZE', 'source': 0}, {'begin': 1713, 'end': 1714, 'name': 'PUSH', 'source': 0, 'value': '0'}, {'begin': 1706, 'end': 1733, 'name': 'REVERT', 'source': 0}, {'begin': 6954, 'end': 7341, 'name': 'tag', 'source': 1, 'value': '30'}, {'begin': 6954, 'end': 7341, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7095, 'end': 7107, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 1465, 'end': 1484, 'name': 'DUP5', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'AND', 'source': 1}, {'begin': 1465, 'end': 1484, 'name': 'EXTCODESIZE', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH [tag]', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPI', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 7119, 'end': 7188, 'name': 'DUP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'MSTORE', 'source': 1}, {'begin': 1114, 'end': 1116, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 7119, 'end': 7188, 'name': 'DUP3', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'ADD', 'source': 1}, {'begin': 1096, 'end': 1117, 'name': 'MSTORE', 'source': 5}, {'begin': 1153, 'end': 1155, 'name': 'PUSH', 'source': 5, 'value': '26'}, {'begin': 1133, 'end': 1151, 'name': 'PUSH', 'source': 5, 'value': '24'}, {'begin': 1133, 'end': 1151, 'name': 'DUP3', 'source': 5}, {'begin': 1133, 'end': 1151, 'name': 'ADD', 'source': 5}, {'begin': 1126, 'end': 1156, 'name': 'MSTORE', 'source': 5}, {'begin': 1192, 'end': 1226, 'name': 'PUSH', 'source': 5, 'value': '416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F'}, {'begin': 1172, 'end': 1190, 'name': 'PUSH', 'source': 5, 'value': '44'}, {'begin': 1172, 'end': 1190, 'name': 'DUP3', 'source': 5}, {'begin': 1172, 'end': 1190, 'name': 'ADD', 'source': 5}, {'begin': 1165, 'end': 1227, 'name': 'MSTORE', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1B9D1C9858DD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'D2'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 1243, 'end': 1261, 'name': 'PUSH', 'source': 5, 'value': '64'}, {'begin': 1243, 'end': 1261, 'name': 'DUP3', 'source': 5}, {'begin': 1243, 'end': 1261, 'name': 'ADD', 'source': 5}, {'begin': 1236, 'end': 1272, 'name': 'MSTORE', 'source': 5}, {'begin': 1289, 'end': 1308, 'name': 'PUSH', 'source': 5, 'value': '84'}, {'begin': 1289, 'end': 1308, 'name': 'ADD', 'source': 5}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '41'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'MLOAD', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'DUP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP2', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SUB', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'SWAP1', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'REVERT', 'source': 1}, {'begin': 7119, 'end': 7188, 'name': 'tag', 'source': 1, 'value': '40'}, {'begin': 7119, 'end': 7188, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7200, 'end': 7212, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7214, 'end': 7237, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7247, 'name': 'DUP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'A0'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'SUB', 'source': -1}, {'begin': 7241, 'end': 7260, 'name': 'AND', 'source': 1}, {'begin': 7261, 'end': 7265, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '43'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '44'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '43'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP4', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SUB', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP6', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'GAS', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DELEGATECALL', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP1', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'DUP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'EQ', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '47'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPI', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MLOAD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '1F'}, {'begin': 7241, 'end': 7266, 'name': 'NOT', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '3F'}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'AND', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'DUP3', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'MSTORE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATASIZE', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '0'}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 7241, 'end': 7266, 'name': 'DUP5', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'ADD', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'RETURNDATACOPY', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH [tag]', 'source': 1, 'value': '46'}, {'begin': 7241, 'end': 7266, 'name': 'JUMP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '47'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7241, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'tag', 'source': 1, 'value': '46'}, {'begin': 7241, 'end': 7266, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7241, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'SWAP2', 'source': 1}, {'begin': 7199, 'end': 7266, 'name': 'POP', 'source': 1}, {'begin': 7283, 'end': 7334, 'name': 'PUSH [tag]', 'source': 1, 'value': '48'}, {'begin': 7300, 'end': 7307, 'name': 'DUP3', 'source': 1}, {'begin': 7309, 'end': 7319, 'name': 'DUP3', 'source': 1}, {'begin': 7321, 'end': 7333, 'name': 'DUP7', 'source': 1}, {'begin': 7283, 'end': 7299, 'name': 'PUSH [tag]', 'source': 1, 'value': '49'}, {'begin': 7283, 'end': 7334, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 7283, 'end': 7334, 'name': 'tag', 'source': 1, 'value': '48'}, {'begin': 7283, 'end': 7334, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7276, 'end': 7334, 'name': 'SWAP7', 'source': 1}, {'begin': 6954, 'end': 7341, 'name': 'SWAP6', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 6954, 'end': 7341, 'name': 'JUMP', 'source': 1, 'value': '[out]'}, {'begin': 7561, 'end': 8253, 'name': 'tag', 'source': 1, 'value': '49'}, {'begin': 7561, 'end': 8253, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7707, 'end': 7719, 'name': 'PUSH', 'source': 1, 'value': '60'}, {'begin': 7735, 'end': 7742, 'name': 'DUP4', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'ISZERO', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'PUSH [tag]', 'source': 1, 'value': '52'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPI', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 7765, 'end': 7775, 'name': 'DUP2', 'source': 1}, {'begin': 7758, 'end': 7775, 'name': 'PUSH [tag]', 'source': 1, 'value': '29'}, {'begin': 7758, 'end': 7775, 'name': 'JUMP', 'source': 1}, {'begin': 7731, 'end': 8247, 'name': 'tag', 'source': 1, 'value': '52'}, {'begin': 7731, 'end': 8247, 'name': 'JUMPDEST', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'DUP3', 'source': 1}, {'begin': 7876, 'end': 7893, 'name': 'MLOAD', 'source': 1}, {'begin': 7876, 'end': 7897, 'name': 'ISZERO', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'PUSH [tag]', 'source': 1, 'value': '54'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPI', 'source': 1}, {'begin': 8070, 'end': 8080, 'name': 'DUP3', 'source': 1}, {'begin': 8064, 'end': 8081, 'name': 'MLOAD', 'source': 1}, {'begin': 8130, 'end': 8145, 'name': 'DUP1', 'source': 1}, {'begin': 8117, 'end': 8127, 'name': 'DUP5', 'source': 1}, {'begin': 8113, 'end': 8115, 'name': 'PUSH', 'source': 1, 'value': '20'}, {'begin': 8109, 'end': 8128, 'name': 'ADD', 'source': 1}, {'begin': 8102, 'end': 8146, 'name': 'REVERT', 'source': 1}, {'begin': 7872, 'end': 8237, 'name': 'tag', 'source': 1, 'value': '54'}, {'begin': 7872, 'end': 8237, 'name': 'JUMPDEST', 'source': 1}, {'begin': 8209, 'end': 8221, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '40'}, {'begin': 8202, 'end': 8222, 'name': 'MLOAD', 'source': 1}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '461BCD'}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': 'E5'}, {'begin': -1, 'end': -1, 'name': 'SHL', 'source': -1}, {'begin': 8202, 'end': 8222, 'name': 'DUP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'MSTORE', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH', 'source': 1, 'value': '4'}, {'begin': 8202, 'end': 8222, 'name': 'ADD', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '41'}, {'begin': 8202, 'end': 8222, 'name': 'SWAP2', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'SWAP1', 'source': 1}, {'begin': 8202, 'end': 8222, 'name': 'PUSH [tag]', 'source': 1, 'value': '57'}, {'begin': 8202, 'end': 8222, 'name': 'JUMP', 'source': 1, 'value': '[in]'}, {'begin': 14, 'end': 288, 'name': 'tag', 'source': 5, 'value': '44'}, {'begin': 14, 'end': 288, 'name': 'JUMPDEST', 'source': 5}, {'begin': 143, 'end': 146, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 181, 'end': 187, 'name': 'DUP3', 'source': 5}, {'begin': 175, 'end': 188, 'name': 'MLOAD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '60'}, {'begin': 243, 'end': 249, 'name': 'DUP2', 'source': 5}, {'begin': 238, 'end': 241, 'name': 'DUP5', 'source': 5}, {'begin': 231, 'end': 235, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 223, 'end': 229, 'name': 'DUP8', 'source': 5}, {'begin': 219, 'end': 236, 'name': 'ADD', 'source': 5}, {'begin': 197, 'end': 250, 'name': 'PUSH [tag]', 'source': 5, 'value': '61'}, {'begin': 197, 'end': 250, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 197, 'end': 250, 'name': 'tag', 'source': 5, 'value': '60'}, {'begin': 197, 'end': 250, 'name': 'JUMPDEST', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP1', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP2', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'ADD', 'source': 5}, {'begin': 266, 'end': 282, 'name': 'SWAP3', 'source': 5}, {'begin': 14, 'end': 288, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 14, 'end': 288, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 524, 'end': 907, 'name': 'tag', 'source': 5, 'value': '57'}, {'begin': 524, 'end': 907, 'name': 'JUMPDEST', 'source': 5}, {'begin': 673, 'end': 675, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 662, 'end': 671, 'name': 'DUP2', 'source': 5}, {'begin': 655, 'end': 676, 'name': 'MSTORE', 'source': 5}, {'begin': 636, 'end': 640, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 705, 'end': 711, 'name': 'DUP3', 'source': 5}, {'begin': 699, 'end': 712, 'name': 'MLOAD', 'source': 5}, {'begin': 748, 'end': 754, 'name': 'DUP1', 'source': 5}, {'begin': 743, 'end': 745, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 732, 'end': 741, 'name': 'DUP5', 'source': 5}, {'begin': 728, 'end': 746, 'name': 'ADD', 'source': 5}, {'begin': 721, 'end': 755, 'name': 'MSTORE', 'source': 5}, {'begin': 764, 'end': 830, 'name': 'PUSH [tag]', 'source': 5, 'value': '64'}, {'begin': 823, 'end': 829, 'name': 'DUP2', 'source': 5}, {'begin': 818, 'end': 820, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 807, 'end': 816, 'name': 'DUP6', 'source': 5}, {'begin': 803, 'end': 821, 'name': 'ADD', 'source': 5}, {'begin': 798, 'end': 800, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 790, 'end': 796, 'name': 'DUP8', 'source': 5}, {'begin': 786, 'end': 801, 'name': 'ADD', 'source': 5}, {'begin': 764, 'end': 830, 'name': 'PUSH [tag]', 'source': 5, 'value': '61'}, {'begin': 764, 'end': 830, 'name': 'JUMP', 'source': 5, 'value': '[in]'}, {'begin': 764, 'end': 830, 'name': 'tag', 'source': 5, 'value': '64'}, {'begin': 764, 'end': 830, 'name': 'JUMPDEST', 'source': 5}, {'begin': 891, 'end': 893, 'name': 'PUSH', 'source': 5, 'value': '1F'}, {'begin': 870, 'end': 885, 'name': 'ADD', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'PUSH', 'source': -1, 'value': '1F'}, {'begin': -1, 'end': -1, 'name': 'NOT', 'source': -1}, {'begin': 866, 'end': 895, 'name': 'AND', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'SWAP2', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'SWAP1', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'SWAP2', 'source': 5}, {'begin': 851, 'end': 896, 'name': 'ADD', 'source': 5}, {'begin': 898, 'end': 900, 'name': 'PUSH', 'source': 5, 'value': '40'}, {'begin': 847, 'end': 901, 'name': 'ADD', 'source': 5}, {'begin': 847, 'end': 901, 'name': 'SWAP3', 'source': 5}, {'begin': 524, 'end': 907, 'name': 'SWAP2', 'source': 5}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': -1, 'end': -1, 'name': 'POP', 'source': -1}, {'begin': 524, 'end': 907, 'name': 'JUMP', 'source': 5, 'value': '[out]'}, {'begin': 1319, 'end': 1577, 'name': 'tag', 'source': 5, 'value': '61'}, {'begin': 1319, 'end': 1577, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1391, 'end': 1392, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1401, 'end': 1514, 'name': 'tag', 'source': 5, 'value': '67'}, {'begin': 1401, 'end': 1514, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1415, 'end': 1421, 'name': 'DUP4', 'source': 5}, {'begin': 1412, 'end': 1413, 'name': 'DUP2', 'source': 5}, {'begin': 1409, 'end': 1422, 'name': 'LT', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'ISZERO', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'PUSH [tag]', 'source': 5, 'value': '69'}, {'begin': 1401, 'end': 1514, 'name': 'JUMPI', 'source': 5}, {'begin': 1491, 'end': 1502, 'name': 'DUP2', 'source': 5}, {'begin': 1491, 'end': 1502, 'name': 'DUP2', 'source': 5}, {'begin': 1491, 'end': 1502, 'name': 'ADD', 'source': 5}, {'begin': 1485, 'end': 1503, 'name': 'MLOAD', 'source': 5}, {'begin': 1472, 'end': 1483, 'name': 'DUP4', 'source': 5}, {'begin': 1472, 'end': 1483, 'name': 'DUP3', 'source': 5}, {'begin': 1472, 'end': 1483, 'name': 'ADD', 'source': 5}, {'begin': 1465, 'end': 1504, 'name': 'MSTORE', 'source': 5}, {'begin': 1437, 'end': 1439, 'name': 'PUSH', 'source': 5, 'value': '20'}, {'begin': 1430, 'end': 1440, 'name': 'ADD', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'PUSH [tag]', 'source': 5, 'value': '67'}, {'begin': 1401, 'end': 1514, 'name': 'JUMP', 'source': 5}, {'begin': 1401, 'end': 1514, 'name': 'tag', 'source': 5, 'value': '69'}, {'begin': 1401, 'end': 1514, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1532, 'end': 1538, 'name': 'DUP4', 'source': 5}, {'begin': 1529, 'end': 1530, 'name': 'DUP2', 'source': 5}, {'begin': 1526, 'end': 1539, 'name': 'GT', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'ISZERO', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'PUSH [tag]', 'source': 5, 'value': '70'}, {'begin': 1523, 'end': 1571, 'name': 'JUMPI', 'source': 5}, {'begin': 1567, 'end': 1568, 'name': 'PUSH', 'source': 5, 'value': '0'}, {'begin': 1558, 'end': 1564, 'name': 'DUP5', 'source': 5}, {'begin': 1553, 'end': 1556, 'name': 'DUP5', 'source': 5}, {'begin': 1549, 'end': 1565, 'name': 'ADD', 'source': 5}, {'begin': 1542, 'end': 1569, 'name': 'MSTORE', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'tag', 'source': 5, 'value': '70'}, {'begin': 1523, 'end': 1571, 'name': 'JUMPDEST', 'source': 5}, {'begin': 1523, 'end': 1571, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'POP', 'source': 5}, {'begin': 1319, 'end': 1577, 'name': 'JUMP', 'source': 5, 'value': '[out]'}], '.data': {'9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398': '416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564'}}, '75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D': '360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc', '9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398': '416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564'}}, 'methodIdentifiers': {'implementation()': '5c60da1b'}}, 'ir': '/*=====================================================*\n *                       WARNING                       *\n *  Solidity to Yul compilation is still EXPERIMENTAL  *\n *       It can result in LOSS OF FUNDS or worse       *\n *                !USE AT YOUR OWN RISK!               *\n *=====================================================*/\n\n\n/// @use-src 0:"@openzeppelin/contracts/proxy/Proxy.sol", 1:"@openzeppelin/contracts/utils/Address.sol", 2:"@openzeppelin/contracts/utils/StorageSlot.sol", 3:"ERC1155Creator.sol", 4:"TREA.sol", 5:"#utility.yul"\nobject "TREA_492" {\n    code {\n        /// @src 4:987:1060\n        mstore(64, 128)\n        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }\n\n        constructor_TREA_492()\n\n        let _1 := allocate_unbounded()\n        codecopy(_1, dataoffset("TREA_492_deployed"), datasize("TREA_492_deployed"))\n\n        return(_1, datasize("TREA_492_deployed"))\n\n        function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n            let length := array_length_t_string_memory_ptr(value)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n            copy_memory_to_memory(add(value, 0x20), pos, length)\n            end := add(pos, round_up_to_mul_of_32(length))\n        }\n\n        function abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n            store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple__to__fromStack(headStart ) -> tail {\n            tail := add(headStart, 0)\n\n        }\n\n        function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        }\n\n        function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function allocate_memory(size) -> memPtr {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n\n        function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr {\n            let allocSize := array_allocation_size_t_bytes_memory_ptr(length)\n            memPtr := allocate_memory(allocSize)\n\n            mstore(memPtr, length)\n\n        }\n\n        function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {\n            let allocSize := array_allocation_size_t_string_memory_ptr(length)\n            memPtr := allocate_memory(allocSize)\n\n            mstore(memPtr, length)\n\n        }\n\n        function allocate_unbounded() -> memPtr {\n            memPtr := mload(64)\n        }\n\n        function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n            // Make sure we can allocate memory without overflow\n            if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n            size := round_up_to_mul_of_32(length)\n\n            // add length slot\n            size := add(size, 0x20)\n\n        }\n\n        function array_allocation_size_t_string_memory_ptr(length) -> size {\n            // Make sure we can allocate memory without overflow\n            if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n            size := round_up_to_mul_of_32(length)\n\n            // add length slot\n            size := add(size, 0x20)\n\n        }\n\n        function array_length_t_bytes_memory_ptr(value) -> length {\n\n            length := mload(value)\n\n        }\n\n        function array_length_t_string_memory_ptr(value) -> length {\n\n            length := mload(value)\n\n        }\n\n        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n            mstore(pos, length)\n            updated_pos := add(pos, 0x20)\n        }\n\n        function assert_helper(condition) {\n            if iszero(condition) { panic_error_0x01() }\n        }\n\n        function checked_sub_t_uint256(x, y) -> diff {\n            x := cleanup_t_uint256(x)\n            y := cleanup_t_uint256(y)\n\n            if lt(x, y) { panic_error_0x11() }\n\n            diff := sub(x, y)\n        }\n\n        function cleanup_t_bytes32(value) -> cleaned {\n            cleaned := value\n        }\n\n        function cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value) -> cleaned {\n            cleaned := value\n        }\n\n        function cleanup_t_uint160(value) -> cleaned {\n            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n\n        function cleanup_t_uint256(value) -> cleaned {\n            cleaned := value\n        }\n\n        /// @src 3:901:1016\n        function constant__IMPLEMENTATION_SLOT_456() -> ret {\n            /// @src 3:950:1016\n            let expr_455 := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n            let _2 := convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(expr_455)\n\n            ret := _2\n        }\n\n        /// @src 3:284:676\n        function constructor_ERC1155Creator_480() {\n\n            /// @src 3:284:676\n            constructor_Proxy_51()\n\n            /// @src 3:315:335\n            let expr_417 := constant__IMPLEMENTATION_SLOT_456()\n            /// @src 3:355:396\n            let expr_424 := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd\n            /// @src 3:347:397\n            let expr_425 := convert_t_bytes32_to_t_uint256(expr_424)\n            /// @src 3:400:401\n            let expr_426 := 0x01\n            /// @src 3:347:401\n            let expr_427 := checked_sub_t_uint256(expr_425, convert_t_rational_1_by_1_to_t_uint256(expr_426))\n\n            /// @src 3:339:402\n            let expr_428 := convert_t_uint256_to_t_bytes32(expr_427)\n            /// @src 3:315:402\n            let expr_429 := eq(cleanup_t_bytes32(expr_417), cleanup_t_bytes32(expr_428))\n            /// @src 3:308:403\n            assert_helper(expr_429)\n            /// @src 3:470:512\n            let expr_438 := 0x142fd5b9d67721efda3a5e2e9be47a96c9b724a4\n            /// @src 3:413:424\n            let expr_432_address := linkersymbol("@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot")\n            /// @src 3:440:460\n            let expr_435 := constant__IMPLEMENTATION_SLOT_456()\n            /// @src 3:413:461\n            let expr_436_slot := fun_getAddressSlot_372(expr_435)\n            /// @src 3:413:467\n            let _3 := add(expr_436_slot, 0)\n            /// @src 3:413:512\n            update_storage_value_offset_0t_address_to_t_address(_3, expr_438)\n            let expr_439 := expr_438\n            /// @src 3:522:529\n            let expr_441_address := linkersymbol("@openzeppelin/contracts/utils/Address.sol:Address")\n            /// @src 3:564:606\n            let expr_444 := 0x142fd5b9d67721efda3a5e2e9be47a96c9b724a4\n            /// @src 3:620:659\n\n            let expr_448_mpos := allocate_unbounded()\n            let _4 := add(expr_448_mpos, 0x20)\n\n            mstore(_4, 0x8129fc1c00000000000000000000000000000000000000000000000000000000)\n            _4 := add(_4, 4)\n\n            let _5 := abi_encode_tuple__to__fromStack(_4)\n            mstore(expr_448_mpos, sub(_5, add(expr_448_mpos, 0x20)))\n            finalize_allocation(expr_448_mpos, sub(_5, expr_448_mpos))\n            /// @src 3:522:669\n            let expr_449_mpos := fun_functionDelegateCall_279(expr_444, expr_448_mpos)\n\n        }\n        /// @src 4:987:1060\n\n        /// @src 0:723:3245\n        function constructor_Proxy_51() {\n\n            /// @src 0:723:3245\n\n        }\n        /// @src 4:987:1060\n\n        /// @src 4:1025:1058\n        function constructor_TREA_492() {\n\n            /// @src 4:1025:1058\n            constructor_ERC1155Creator_480()\n\n        }\n        /// @src 4:987:1060\n\n        function convert_t_address_to_t_address(value) -> converted {\n            converted := convert_t_uint160_to_t_address(value)\n        }\n\n        function convert_t_bytes32_to_t_uint256(value) -> converted {\n            converted := convert_t_uint256_to_t_uint256(shift_right_0_unsigned(value))\n        }\n\n        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {\n            converted := cleanup_t_uint256(value)\n        }\n\n        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {\n            converted := cleanup_t_uint256(value)\n        }\n\n        function convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(value) -> converted {\n            converted := shift_left_0(cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value))\n        }\n\n        function convert_t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398_to_t_string_memory_ptr() -> converted {\n            converted := copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398()\n        }\n\n        function convert_t_uint160_to_t_address(value) -> converted {\n            converted := convert_t_uint160_to_t_uint160(value)\n        }\n\n        function convert_t_uint160_to_t_uint160(value) -> converted {\n            converted := cleanup_t_uint160(value)\n        }\n\n        function convert_t_uint256_to_t_bytes32(value) -> converted {\n            converted := shift_left_0(cleanup_t_uint256(value))\n        }\n\n        function convert_t_uint256_to_t_uint256(value) -> converted {\n            converted := cleanup_t_uint256(value)\n        }\n\n        function copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398() -> memPtr {\n            memPtr := allocate_memory_array_t_string_memory_ptr(39)\n            store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398(add(memPtr, 32))\n        }\n\n        function copy_memory_to_memory(src, dst, length) {\n            let i := 0\n            for { } lt(i, length) { i := add(i, 32) }\n            {\n                mstore(add(dst, i), mload(add(src, i)))\n            }\n            if gt(i, length)\n            {\n                // clear end\n                mstore(add(dst, length), 0)\n            }\n        }\n\n        function extract_returndata() -> data {\n\n            switch returndatasize()\n            case 0 {\n                data := zero_value_for_split_t_bytes_memory_ptr()\n            }\n            default {\n                data := allocate_memory_array_t_bytes_memory_ptr(returndatasize())\n                returndatacopy(add(data, 0x20), 0, returndatasize())\n            }\n\n        }\n\n        function finalize_allocation(memPtr, size) {\n            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n            // protect against overflow\n            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n\n        /// @src 1:6570:6768\n        function fun_functionDelegateCall_279(var_target_265, var_data_267_mpos) -> var__270_mpos {\n            /// @src 1:6653:6665\n            let zero_t_bytes_memory_ptr_6_mpos := zero_value_for_split_t_bytes_memory_ptr()\n            var__270_mpos := zero_t_bytes_memory_ptr_6_mpos\n\n            /// @src 1:6705:6711\n            let _7 := var_target_265\n            let expr_273 := _7\n            /// @src 1:6713:6717\n            let _8_mpos := var_data_267_mpos\n            let expr_274_mpos := _8_mpos\n            /// @src 1:6684:6761\n            let _9_mpos := convert_t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398_to_t_string_memory_ptr()\n            let expr_276_mpos := fun_functionDelegateCall_314(expr_273, expr_274_mpos, _9_mpos)\n            /// @src 1:6677:6761\n            var__270_mpos := expr_276_mpos\n            leave\n\n        }\n        /// @src 4:987:1060\n\n        /// @src 1:6954:7341\n        function fun_functionDelegateCall_314(var_target_282, var_data_284_mpos, var_errorMessage_286_mpos) -> var__289_mpos {\n            /// @src 1:7095:7107\n            let zero_t_bytes_memory_ptr_10_mpos := zero_value_for_split_t_bytes_memory_ptr()\n            var__289_mpos := zero_t_bytes_memory_ptr_10_mpos\n\n            /// @src 1:7138:7144\n            let _11 := var_target_282\n            let expr_293 := _11\n            /// @src 1:7127:7145\n            let expr_294 := fun_isContract_69(expr_293)\n            /// @src 1:7119:7188\n            require_helper_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(expr_294)\n            /// @src 1:7241:7247\n            let _12 := var_target_282\n            let expr_302 := _12\n            /// @src 1:7241:7260\n            let expr_303_address := expr_302\n            /// @src 1:7261:7265\n            let _13_mpos := var_data_284_mpos\n            let expr_304_mpos := _13_mpos\n            /// @src 1:7241:7266\n\n            let _14 := add(expr_304_mpos, 0x20)\n            let _15 := mload(expr_304_mpos)\n\n            let expr_305_component_1 := delegatecall(gas(), expr_303_address,  _14, _15, 0, 0)\n            let expr_305_component_2_mpos := extract_returndata()\n            /// @src 1:7199:7266\n            let var_success_299 := expr_305_component_1\n            let var_returndata_301_mpos := expr_305_component_2_mpos\n            /// @src 1:7300:7307\n            let _16 := var_success_299\n            let expr_308 := _16\n            /// @src 1:7309:7319\n            let _17_mpos := var_returndata_301_mpos\n            let expr_309_mpos := _17_mpos\n            /// @src 1:7321:7333\n            let _18_mpos := var_errorMessage_286_mpos\n            let expr_310_mpos := _18_mpos\n            /// @src 1:7283:7334\n            let expr_311_mpos := fun_verifyCallResult_345(expr_308, expr_309_mpos, expr_310_mpos)\n            /// @src 1:7276:7334\n            var__289_mpos := expr_311_mpos\n            leave\n\n        }\n        /// @src 4:987:1060\n\n        /// @src 2:1599:1746\n        function fun_getAddressSlot_372(var_slot_364) -> var_r_368_slot {\n\n            /// @src 2:1693:1740\n            {\n                var_r_368_slot := var_slot_364\n            }\n\n        }\n        /// @src 4:987:1060\n\n        /// @src 1:1175:1495\n        function fun_isContract_69(var_account_57) -> var__60 {\n            /// @src 1:1235:1239\n            let zero_t_bool_19 := zero_value_for_split_t_bool()\n            var__60 := zero_t_bool_19\n\n            /// @src 1:1465:1472\n            let _20 := var_account_57\n            let expr_62 := _20\n            /// @src 1:1465:1484\n            let expr_64 := extcodesize(expr_62)\n            /// @src 1:1487:1488\n            let expr_65 := 0x00\n            /// @src 1:1465:1488\n            let expr_66 := gt(cleanup_t_uint256(expr_64), convert_t_rational_0_by_1_to_t_uint256(expr_65))\n            /// @src 1:1458:1488\n            var__60 := expr_66\n            leave\n\n        }\n        /// @src 4:987:1060\n\n        /// @src 1:7561:8253\n        function fun_verifyCallResult_345(var_success_317, var_returndata_319_mpos, var_errorMessage_321_mpos) -> var__324_mpos {\n            /// @src 1:7707:7719\n            let zero_t_bytes_memory_ptr_21_mpos := zero_value_for_split_t_bytes_memory_ptr()\n            var__324_mpos := zero_t_bytes_memory_ptr_21_mpos\n\n            /// @src 1:7735:7742\n            let _22 := var_success_317\n            let expr_326 := _22\n            /// @src 1:7731:8247\n            switch expr_326\n            case 0 {\n                /// @src 1:7876:7886\n                let _23_mpos := var_returndata_319_mpos\n                let expr_330_mpos := _23_mpos\n                /// @src 1:7876:7893\n                let expr_331 := array_length_t_bytes_memory_ptr(expr_330_mpos)\n                /// @src 1:7896:7897\n                let expr_332 := 0x00\n                /// @src 1:7876:7897\n                let expr_333 := gt(cleanup_t_uint256(expr_331), convert_t_rational_0_by_1_to_t_uint256(expr_332))\n                /// @src 1:7872:8237\n                switch expr_333\n                case 0 {\n                    /// @src 1:8209:8221\n                    let _24_mpos := var_errorMessage_321_mpos\n                    let expr_337_mpos := _24_mpos\n                    /// @src 1:8202:8222\n                    {\n                        let _25 := allocate_unbounded()\n                        mstore(_25, 3963877391197344453575983046348115674221700746820753546331534351508065746944)\n                        let _26 := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(add(_25, 4) , expr_337_mpos)\n                        revert(_25, sub(_26, _25))\n                    }/// @src 1:7872:8237\n                }\n                default {\n                    /// @src 1:8010:8164\n                    {\n                        let usr$returndata_size := mload(var_returndata_319_mpos)\n                        revert(add(32, var_returndata_319_mpos), usr$returndata_size)\n                    }\n                    /// @src 1:7872:8237\n                }\n                /// @src 1:7731:8247\n            }\n            default {\n                /// @src 1:7765:7775\n                let _27_mpos := var_returndata_319_mpos\n                let expr_327_mpos := _27_mpos\n                /// @src 1:7758:7775\n                var__324_mpos := expr_327_mpos\n                leave\n                /// @src 1:7731:8247\n            }\n\n        }\n        /// @src 4:987:1060\n\n        function panic_error_0x01() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x01)\n            revert(0, 0x24)\n        }\n\n        function panic_error_0x11() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n\n        function panic_error_0x41() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n\n        function prepare_store_t_address(value) -> ret {\n            ret := value\n        }\n\n        function require_helper_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(condition ) {\n            if iszero(condition) {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                let end := abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {\n            revert(0, 0)\n        }\n\n        function round_up_to_mul_of_32(value) -> result {\n            result := and(add(value, 31), not(31))\n        }\n\n        function shift_left_0(value) -> newValue {\n            newValue :=\n\n            shl(0, value)\n\n        }\n\n        function shift_right_0_unsigned(value) -> newValue {\n            newValue :=\n\n            shr(0, value)\n\n        }\n\n        function store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398(memPtr) {\n\n            mstore(add(memPtr, 0), "Address: low-level delegate call")\n\n            mstore(add(memPtr, 32), " failed")\n\n        }\n\n        function store_literal_in_memory_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520(memPtr) {\n\n            mstore(add(memPtr, 0), "Address: delegate call to non-co")\n\n            mstore(add(memPtr, 32), "ntract")\n\n        }\n\n        function update_byte_slice_20_shift_0(value, toInsert) -> result {\n            let mask := 0xffffffffffffffffffffffffffffffffffffffff\n            toInsert := shift_left_0(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n\n        function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {\n            let convertedValue_0 := convert_t_address_to_t_address(value_0)\n            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))\n        }\n\n        function zero_value_for_split_t_bool() -> ret {\n            ret := 0\n        }\n\n        function zero_value_for_split_t_bytes_memory_ptr() -> ret {\n            ret := 96\n        }\n\n    }\n    object "TREA_492_deployed" {\n        code {\n            /// @src 4:987:1060\n            mstore(64, 128)\n\n            if iszero(lt(calldatasize(), 4))\n            {\n                let selector := shift_right_224_unsigned(calldataload(0))\n                switch selector\n\n                case 0x5c60da1b\n                {\n                    // implementation()\n\n                    if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }\n                    abi_decode_tuple_(4, calldatasize())\n                    let ret_0 :=  fun_implementation_466()\n                    let memPos := allocate_unbounded()\n                    let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)\n                    return(memPos, sub(memEnd, memPos))\n                }\n\n                default {}\n            }\n            if iszero(calldatasize()) { fun__45() stop() }\n            fun__37() stop()\n\n            function abi_decode_tuple_(headStart, dataEnd)   {\n                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n            }\n\n            function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n                mstore(pos, cleanup_t_address(value))\n            }\n\n            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart , value0) -> tail {\n                tail := add(headStart, 32)\n\n                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n            }\n\n            function allocate_unbounded() -> memPtr {\n                memPtr := mload(64)\n            }\n\n            function cleanup_from_storage_t_address(value) -> cleaned {\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n\n            function cleanup_t_address(value) -> cleaned {\n                cleaned := cleanup_t_uint160(value)\n            }\n\n            function cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value) -> cleaned {\n                cleaned := value\n            }\n\n            function cleanup_t_uint160(value) -> cleaned {\n                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n\n            /// @src 3:901:1016\n            function constant__IMPLEMENTATION_SLOT_456() -> ret {\n                /// @src 3:950:1016\n                let expr_455 := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n                let _3 := convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(expr_455)\n\n                ret := _3\n            }\n\n            function convert_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1_to_t_bytes32(value) -> converted {\n                converted := shift_left_0(cleanup_t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1(value))\n            }\n\n            function extract_from_storage_value_offset_0t_address(slot_value) -> value {\n                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))\n            }\n\n            /// @src 0:2629:2693\n            function fun__37() {\n\n                fun__fallback_29()\n\n            }\n            /// @src 4:987:1060\n\n            /// @src 0:2853:2916\n            function fun__45() {\n\n                fun__fallback_29()\n\n            }\n            /// @src 4:987:1060\n\n            /// @src 0:3197:3243\n            function fun__beforeFallback_50() {\n\n            }\n            /// @src 4:987:1060\n\n            /// @src 0:948:1843\n            function fun__delegate_10(var_implementation_5) {\n\n                /// @src 0:1018:1837\n                {\n                    calldatacopy(0, 0, calldatasize())\n                    let usr$result := delegatecall(gas(), var_implementation_5, 0, calldatasize(), 0, 0)\n                    returndatacopy(0, 0, returndatasize())\n                    switch usr$result\n                    case 0 { revert(0, returndatasize()) }\n                    default { return(0, returndatasize()) }\n                }\n\n            }\n            /// @src 4:987:1060\n\n            /// @src 0:2322:2432\n            function fun__fallback_29() {\n\n                fun__beforeFallback_50()\n                /// @src 0:2407:2424\n                let expr_25 := fun__implementation_479()\n                fun__delegate_10(expr_25)\n\n            }\n            /// @src 4:987:1060\n\n            /// @src 3:1199:1345\n            function fun__implementation_479() -> var__470 {\n                /// @src 3:1258:1265\n                let zero_t_address_2 := zero_value_for_split_t_address()\n                var__470 := zero_t_address_2\n\n                /// @src 3:1284:1295\n                let expr_472_address := linkersymbol("@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot")\n                /// @src 3:1311:1331\n                let expr_474 := constant__IMPLEMENTATION_SLOT_456()\n                /// @src 3:1284:1332\n                let expr_475_slot := fun_getAddressSlot_372(expr_474)\n                /// @src 3:1284:1338\n                let _4 := add(expr_475_slot, 0)\n                let _5 := read_from_storage_split_offset_0_t_address(_4)\n                let expr_476 := _5\n                /// @src 3:1277:1338\n                var__470 := expr_476\n                leave\n\n            }\n            /// @src 4:987:1060\n\n            /// @src 2:1599:1746\n            function fun_getAddressSlot_372(var_slot_364) -> var_r_368_slot {\n\n                /// @src 2:1693:1740\n                {\n                    var_r_368_slot := var_slot_364\n                }\n\n            }\n            /// @src 4:987:1060\n\n            /// @src 3:1096:1193\n            function fun_implementation_466() -> var__460 {\n                /// @src 3:1143:1150\n                let zero_t_address_1 := zero_value_for_split_t_address()\n                var__460 := zero_t_address_1\n\n                /// @src 3:1169:1186\n                let expr_463 := fun__implementation_479()\n                /// @src 3:1162:1186\n                var__460 := expr_463\n                leave\n\n            }\n            /// @src 4:987:1060\n\n            function read_from_storage_split_offset_0_t_address(slot) -> value {\n                value := extract_from_storage_value_offset_0t_address(sload(slot))\n\n            }\n\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {\n                revert(0, 0)\n            }\n\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n                revert(0, 0)\n            }\n\n            function shift_left_0(value) -> newValue {\n                newValue :=\n\n                shl(0, value)\n\n            }\n\n            function shift_right_0_unsigned(value) -> newValue {\n                newValue :=\n\n                shr(0, value)\n\n            }\n\n            function shift_right_224_unsigned(value) -> newValue {\n                newValue :=\n\n                shr(224, value)\n\n            }\n\n            function zero_value_for_split_t_address() -> ret {\n                ret := 0\n            }\n\n        }\n\n        data ".metadata" hex"a264697066735822122045b505fcd678db15d8e5208e301112e80077189909f1fcd0ef96d40c8b24d2fe64736f6c63430008070033"\n    }\n\n}\n\n', 'metadata': '{"compiler":{"version":"0.8.7+commit.e28d00a7"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"implementation()":{"details":"Returns the current implementation address."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"TREA.sol":"TREA"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":300},"remappings":[]},"sources":{"@openzeppelin/contracts/proxy/Proxy.sol":{"keccak256":"0x89f52157f90f3962cb9b784fbccd879748e9e937f0906123101c05d594bb88c8","license":"MIT","urls":["bzz-raw://3b2c3e179e16a9d67ec76aecc396288099691d903e2ad4bd77b6af8852518eab","dweb:/ipfs/QmQ3pWYxbDzp2HyMYKjp4ivqpVKMtVGtSQwgdZr2HG7Th9"]},"@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0x4f73eedf878079f3c11b05bb9db39c789ae782c0c1a15a8a31ad36aa7047a32f","license":"MIT","urls":["bzz-raw://c23c79bf4124e0b203677c5ab55ce73d8faf43f0d5c49b071c9f9f16fee74249","dweb:/ipfs/QmNsMhnyeFS22LXmGGG7j6eto36bz8SEGbfDGPVu1EZcB8"]},"@openzeppelin/contracts/utils/StorageSlot.sol":{"keccak256":"0xe90e5c5523f942613ebb55bd155de9489a185910338307b891adbd4b7604fc13","license":"MIT","urls":["bzz-raw://baa83fd3ea84f65b9d53eb42437f1c644d938582513b7e13d080ffdcb1a8653c","dweb:/ipfs/QmYF12uEQ1KmjqCxfPMc5HK7sCHXj1FNKtaaAwhVCgwKcn"]},"ERC1155Creator.sol":{"keccak256":"0x5dfe7f94d2fe99d399ae2904f472429271f479e0311d91e4f325eb7704c223fa","license":"MIT","urls":["bzz-raw://39feb1e3431ad72287a88e25e3af6765f64e7f4d1be2c37159d5271a20fdb2eb","dweb:/ipfs/QmXATFZmAUfBKcpkWNdNahKTPiQFVo69vdqW9zXTKeJcD9"]},"TREA.sol":{"keccak256":"0x8b9c13ce321228cfaadbee341def2ab65dc1c51a6dd8d65a933dfe1a5847b39b","license":"MIT","urls":["bzz-raw://127f8c9c1e16cc1f97158848e99b2ac896e01140478d48d74639a335ba91fbd4","dweb:/ipfs/QmToeSifPfxhescDKzUfJoMUGg1Z5rHgsHS4yVS6nP3PdF"]}},"version":1}'}}}, 'sources': {'@openzeppelin/contracts/proxy/Proxy.sol': {'ast': {'absolutePath': '@openzeppelin/contracts/proxy/Proxy.sol', 'exportedSymbols': {'Proxy': [51]}, 'id': 52, 'license': 'MIT', 'nodeType': 'SourceUnit', 'nodes': [{'id': 1, 'literals': ['solidity', '^', '0.8', '.0'], 'nodeType': 'PragmaDirective', 'src': '99:23:0'}, {'abstract': True, 'baseContracts': [], 'contractDependencies': [], 'contractKind': 'contract', 'documentation': {'id': 2, 'nodeType': 'StructuredDocumentation', 'src': '124:598:0', 'text': ' @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy.'}, 'fullyImplemented': False, 'id': 51, 'linearizedBaseContracts': [51], 'name': 'Proxy', 'nameLocation': '741:5:0', 'nodeType': 'ContractDefinition', 'nodes': [{'body': {'id': 9, 'nodeType': 'Block', 'src': '1008:835:0', 'statements': [{'AST': {'nodeType': 'YulBlock', 'src': '1027:810:0', 'statements': [{'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1280:1:0', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1283:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'calldatasize', 'nodeType': 'YulIdentifier', 'src': '1286:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '1286:14:0'}], 'functionName': {'name': 'calldatacopy', 'nodeType': 'YulIdentifier', 'src': '1267:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '1267:34:0'}, 'nodeType': 'YulExpressionStatement', 'src': '1267:34:0'}, {'nodeType': 'YulVariableDeclaration', 'src': '1428:74:0', 'value': {'arguments': [{'arguments': [], 'functionName': {'name': 'gas', 'nodeType': 'YulIdentifier', 'src': '1455:3:0'}, 'nodeType': 'YulFunctionCall', 'src': '1455:5:0'}, {'name': 'implementation', 'nodeType': 'YulIdentifier', 'src': '1462:14:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1478:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'calldatasize', 'nodeType': 'YulIdentifier', 'src': '1481:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '1481:14:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1497:1:0', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1500:1:0', 'type': '', 'value': '0'}], 'functionName': {'name': 'delegatecall', 'nodeType': 'YulIdentifier', 'src': '1442:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '1442:60:0'}, 'variables': [{'name': 'result', 'nodeType': 'YulTypedName', 'src': '1432:6:0', 'type': ''}]}, {'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1570:1:0', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1573:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '1576:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '1576:16:0'}], 'functionName': {'name': 'returndatacopy', 'nodeType': 'YulIdentifier', 'src': '1555:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '1555:38:0'}, 'nodeType': 'YulExpressionStatement', 'src': '1555:38:0'}, {'cases': [{'body': {'nodeType': 'YulBlock', 'src': '1688:59:0', 'statements': [{'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1713:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '1716:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '1716:16:0'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '1706:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '1706:27:0'}, 'nodeType': 'YulExpressionStatement', 'src': '1706:27:0'}]}, 'nodeType': 'YulCase', 'src': '1681:66:0', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1686:1:0', 'type': '', 'value': '0'}}, {'body': {'nodeType': 'YulBlock', 'src': '1768:59:0', 'statements': [{'expression': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '1793:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '1796:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '1796:16:0'}], 'functionName': {'name': 'return', 'nodeType': 'YulIdentifier', 'src': '1786:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '1786:27:0'}, 'nodeType': 'YulExpressionStatement', 'src': '1786:27:0'}]}, 'nodeType': 'YulCase', 'src': '1760:67:0', 'value': 'default'}], 'expression': {'name': 'result', 'nodeType': 'YulIdentifier', 'src': '1614:6:0'}, 'nodeType': 'YulSwitch', 'src': '1607:220:0'}]}, 'evmVersion': 'berlin', 'externalReferences': [{'declaration': 5, 'isOffset': False, 'isSlot': False, 'src': '1462:14:0', 'valueSize': 1}], 'id': 8, 'nodeType': 'InlineAssembly', 'src': '1018:819:0'}]}, 'documentation': {'id': 3, 'nodeType': 'StructuredDocumentation', 'src': '753:190:0', 'text': ' @dev Delegates the current call to `implementation`.\n This function does not return to its internal call site, it will return directly to the external caller.'}, 'id': 10, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': '_delegate', 'nameLocation': '957:9:0', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 6, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 5, 'mutability': 'mutable', 'name': 'implementation', 'nameLocation': '975:14:0', 'nodeType': 'VariableDeclaration', 'scope': 10, 'src': '967:22:0', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 4, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '967:7:0', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}], 'src': '966:24:0'}, 'returnParameters': {'id': 7, 'nodeType': 'ParameterList', 'parameters': [], 'src': '1008:0:0'}, 'scope': 51, 'src': '948:895:0', 'stateMutability': 'nonpayable', 'virtual': True, 'visibility': 'internal'}, {'documentation': {'id': 11, 'nodeType': 'StructuredDocumentation', 'src': '1849:172:0', 'text': ' @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n and {_fallback} should delegate.'}, 'id': 16, 'implemented': False, 'kind': 'function', 'modifiers': [], 'name': '_implementation', 'nameLocation': '2035:15:0', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 12, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2050:2:0'}, 'returnParameters': {'id': 15, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 14, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 16, 'src': '2084:7:0', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 13, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '2084:7:0', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}], 'src': '2083:9:0'}, 'scope': 51, 'src': '2026:67:0', 'stateMutability': 'view', 'virtual': True, 'visibility': 'internal'}, {'body': {'id': 28, 'nodeType': 'Block', 'src': '2360:72:0', 'statements': [{'expression': {'arguments': [], 'expression': {'argumentTypes': [], 'id': 20, 'name': '_beforeFallback', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 50, 'src': '2370:15:0', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$__$returns$__$', 'typeString': 'function ()'}}, 'id': 21, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2370:17:0', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 22, 'nodeType': 'ExpressionStatement', 'src': '2370:17:0'}, {'expression': {'arguments': [{'arguments': [], 'expression': {'argumentTypes': [], 'id': 24, 'name': '_implementation', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 16, 'src': '2407:15:0', 'typeDescriptions': {'typeIdentifier': 't_function_internal_view$__$returns$_t_address_$', 'typeString': 'function () view returns (address)'}}, 'id': 25, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2407:17:0', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}], 'id': 23, 'name': '_delegate', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 10, 'src': '2397:9:0', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$_t_address_$returns$__$', 'typeString': 'function (address)'}}, 'id': 26, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2397:28:0', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 27, 'nodeType': 'ExpressionStatement', 'src': '2397:28:0'}]}, 'documentation': {'id': 17, 'nodeType': 'StructuredDocumentation', 'src': '2099:218:0', 'text': ' @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internall call site, it will return directly to the external caller.'}, 'id': 29, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': '_fallback', 'nameLocation': '2331:9:0', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 18, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2340:2:0'}, 'returnParameters': {'id': 19, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2360:0:0'}, 'scope': 51, 'src': '2322:110:0', 'stateMutability': 'nonpayable', 'virtual': True, 'visibility': 'internal'}, {'body': {'id': 36, 'nodeType': 'Block', 'src': '2665:28:0', 'statements': [{'expression': {'arguments': [], 'expression': {'argumentTypes': [], 'id': 33, 'name': '_fallback', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 29, 'src': '2675:9:0', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$__$returns$__$', 'typeString': 'function ()'}}, 'id': 34, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2675:11:0', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 35, 'nodeType': 'ExpressionStatement', 'src': '2675:11:0'}]}, 'documentation': {'id': 30, 'nodeType': 'StructuredDocumentation', 'src': '2438:186:0', 'text': ' @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data.'}, 'id': 37, 'implemented': True, 'kind': 'fallback', 'modifiers': [], 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 31, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2637:2:0'}, 'returnParameters': {'id': 32, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2665:0:0'}, 'scope': 51, 'src': '2629:64:0', 'stateMutability': 'payable', 'virtual': True, 'visibility': 'external'}, {'body': {'id': 44, 'nodeType': 'Block', 'src': '2888:28:0', 'statements': [{'expression': {'arguments': [], 'expression': {'argumentTypes': [], 'id': 41, 'name': '_fallback', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 29, 'src': '2898:9:0', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$__$returns$__$', 'typeString': 'function ()'}}, 'id': 42, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2898:11:0', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 43, 'nodeType': 'ExpressionStatement', 'src': '2898:11:0'}]}, 'documentation': {'id': 38, 'nodeType': 'StructuredDocumentation', 'src': '2699:149:0', 'text': ' @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n is empty.'}, 'id': 45, 'implemented': True, 'kind': 'receive', 'modifiers': [], 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 39, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2860:2:0'}, 'returnParameters': {'id': 40, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2888:0:0'}, 'scope': 51, 'src': '2853:63:0', 'stateMutability': 'payable', 'virtual': True, 'visibility': 'external'}, {'body': {'id': 49, 'nodeType': 'Block', 'src': '3241:2:0', 'statements': []}, 'documentation': {'id': 46, 'nodeType': 'StructuredDocumentation', 'src': '2922:270:0', 'text': ' @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n call, or as part of the Solidity `fallback` or `receive` functions.\n If overriden should call `super._beforeFallback()`.'}, 'id': 50, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': '_beforeFallback', 'nameLocation': '3206:15:0', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 47, 'nodeType': 'ParameterList', 'parameters': [], 'src': '3221:2:0'}, 'returnParameters': {'id': 48, 'nodeType': 'ParameterList', 'parameters': [], 'src': '3241:0:0'}, 'scope': 51, 'src': '3197:46:0', 'stateMutability': 'nonpayable', 'virtual': True, 'visibility': 'internal'}], 'scope': 52, 'src': '723:2522:0', 'usedErrors': []}], 'src': '99:3146:0'}, 'id': 0}, '@openzeppelin/contracts/utils/Address.sol': {'ast': {'absolutePath': '@openzeppelin/contracts/utils/Address.sol', 'exportedSymbols': {'Address': [346]}, 'id': 347, 'license': 'MIT', 'nodeType': 'SourceUnit', 'nodes': [{'id': 53, 'literals': ['solidity', '^', '0.8', '.1'], 'nodeType': 'PragmaDirective', 'src': '101:23:1'}, {'abstract': False, 'baseContracts': [], 'contractDependencies': [], 'contractKind': 'library', 'documentation': {'id': 54, 'nodeType': 'StructuredDocumentation', 'src': '126:67:1', 'text': ' @dev Collection of functions related to the address type'}, 'fullyImplemented': True, 'id': 346, 'linearizedBaseContracts': [346], 'name': 'Address', 'nameLocation': '202:7:1', 'nodeType': 'ContractDefinition', 'nodes': [{'body': {'id': 68, 'nodeType': 'Block', 'src': '1241:254:1', 'statements': [{'expression': {'commonType': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'id': 66, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'leftExpression': {'expression': {'expression': {'id': 62, 'name': 'account', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 57, 'src': '1465:7:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'id': 63, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'code', 'nodeType': 'MemberAccess', 'src': '1465:12:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'id': 64, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'length', 'nodeType': 'MemberAccess', 'src': '1465:19:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'nodeType': 'BinaryOperation', 'operator': '>', 'rightExpression': {'hexValue': '30', 'id': 65, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'number', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '1487:1:1', 'typeDescriptions': {'typeIdentifier': 't_rational_0_by_1', 'typeString': 'int_const 0'}, 'value': '0'}, 'src': '1465:23:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'functionReturnParameters': 61, 'id': 67, 'nodeType': 'Return', 'src': '1458:30:1'}]}, 'documentation': {'id': 55, 'nodeType': 'StructuredDocumentation', 'src': '216:954:1', 'text': " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="}, 'id': 69, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'isContract', 'nameLocation': '1184:10:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 58, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 57, 'mutability': 'mutable', 'name': 'account', 'nameLocation': '1203:7:1', 'nodeType': 'VariableDeclaration', 'scope': 69, 'src': '1195:15:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 56, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '1195:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}], 'src': '1194:17:1'}, 'returnParameters': {'id': 61, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 60, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 69, 'src': '1235:4:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}, 'typeName': {'id': 59, 'name': 'bool', 'nodeType': 'ElementaryTypeName', 'src': '1235:4:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'visibility': 'internal'}], 'src': '1234:6:1'}, 'scope': 346, 'src': '1175:320:1', 'stateMutability': 'view', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 102, 'nodeType': 'Block', 'src': '2483:241:1', 'statements': [{'expression': {'arguments': [{'commonType': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'id': 84, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'leftExpression': {'expression': {'arguments': [{'id': 80, 'name': 'this', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': -28, 'src': '2509:4:1', 'typeDescriptions': {'typeIdentifier': 't_contract$_Address_$346', 'typeString': 'library Address'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_contract$_Address_$346', 'typeString': 'library Address'}], 'id': 79, 'isConstant': False, 'isLValue': False, 'isPure': True, 'lValueRequested': False, 'nodeType': 'ElementaryTypeNameExpression', 'src': '2501:7:1', 'typeDescriptions': {'typeIdentifier': 't_type$_t_address_$', 'typeString': 'type(address)'}, 'typeName': {'id': 78, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '2501:7:1', 'typeDescriptions': {}}}, 'id': 81, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'typeConversion', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2501:13:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'id': 82, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'balance', 'nodeType': 'MemberAccess', 'src': '2501:21:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'nodeType': 'BinaryOperation', 'operator': '>=', 'rightExpression': {'id': 83, 'name': 'amount', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 74, 'src': '2526:6:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'src': '2501:31:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'hexValue': '416464726573733a20696e73756666696369656e742062616c616e6365', 'id': 85, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '2534:31:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9', 'typeString': 'literal_string "Address: insufficient balance"'}, 'value': 'Address: insufficient balance'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9', 'typeString': 'literal_string "Address: insufficient balance"'}], 'id': 77, 'name': 'require', 'nodeType': 'Identifier', 'overloadedDeclarations': [-18, -18], 'referencedDeclaration': -18, 'src': '2493:7:1', 'typeDescriptions': {'typeIdentifier': 't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$', 'typeString': 'function (bool,string memory) pure'}}, 'id': 86, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2493:73:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 87, 'nodeType': 'ExpressionStatement', 'src': '2493:73:1'}, {'assignments': [89, None], 'declarations': [{'constant': False, 'id': 89, 'mutability': 'mutable', 'name': 'success', 'nameLocation': '2583:7:1', 'nodeType': 'VariableDeclaration', 'scope': 102, 'src': '2578:12:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}, 'typeName': {'id': 88, 'name': 'bool', 'nodeType': 'ElementaryTypeName', 'src': '2578:4:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'visibility': 'internal'}, None], 'id': 96, 'initialValue': {'arguments': [{'hexValue': '', 'id': 94, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '2626:2:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 'typeString': 'literal_string ""'}, 'value': ''}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 'typeString': 'literal_string ""'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', 'typeString': 'literal_string ""'}], 'expression': {'id': 90, 'name': 'recipient', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 72, 'src': '2596:9:1', 'typeDescriptions': {'typeIdentifier': 't_address_payable', 'typeString': 'address payable'}}, 'id': 91, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'call', 'nodeType': 'MemberAccess', 'src': '2596:14:1', 'typeDescriptions': {'typeIdentifier': 't_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'function (bytes memory) payable returns (bool,bytes memory)'}}, 'id': 93, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'names': ['value'], 'nodeType': 'FunctionCallOptions', 'options': [{'id': 92, 'name': 'amount', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 74, 'src': '2618:6:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}], 'src': '2596:29:1', 'typeDescriptions': {'typeIdentifier': 't_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value', 'typeString': 'function (bytes memory) payable returns (bool,bytes memory)'}}, 'id': 95, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2596:33:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'tuple(bool,bytes memory)'}}, 'nodeType': 'VariableDeclarationStatement', 'src': '2577:52:1'}, {'expression': {'arguments': [{'id': 98, 'name': 'success', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 89, 'src': '2647:7:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'hexValue': '416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564', 'id': 99, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '2656:60:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae', 'typeString': 'literal_string "Address: unable to send value, recipient may have reverted"'}, 'value': 'Address: unable to send value, recipient may have reverted'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae', 'typeString': 'literal_string "Address: unable to send value, recipient may have reverted"'}], 'id': 97, 'name': 'require', 'nodeType': 'Identifier', 'overloadedDeclarations': [-18, -18], 'referencedDeclaration': -18, 'src': '2639:7:1', 'typeDescriptions': {'typeIdentifier': 't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$', 'typeString': 'function (bool,string memory) pure'}}, 'id': 100, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '2639:78:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 101, 'nodeType': 'ExpressionStatement', 'src': '2639:78:1'}]}, 'documentation': {'id': 70, 'nodeType': 'StructuredDocumentation', 'src': '1501:906:1', 'text': " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."}, 'id': 103, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'sendValue', 'nameLocation': '2421:9:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 75, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 72, 'mutability': 'mutable', 'name': 'recipient', 'nameLocation': '2447:9:1', 'nodeType': 'VariableDeclaration', 'scope': 103, 'src': '2431:25:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address_payable', 'typeString': 'address payable'}, 'typeName': {'id': 71, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '2431:15:1', 'stateMutability': 'payable', 'typeDescriptions': {'typeIdentifier': 't_address_payable', 'typeString': 'address payable'}}, 'visibility': 'internal'}, {'constant': False, 'id': 74, 'mutability': 'mutable', 'name': 'amount', 'nameLocation': '2466:6:1', 'nodeType': 'VariableDeclaration', 'scope': 103, 'src': '2458:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'typeName': {'id': 73, 'name': 'uint256', 'nodeType': 'ElementaryTypeName', 'src': '2458:7:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'visibility': 'internal'}], 'src': '2430:43:1'}, 'returnParameters': {'id': 76, 'nodeType': 'ParameterList', 'parameters': [], 'src': '2483:0:1'}, 'scope': 346, 'src': '2412:312:1', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 119, 'nodeType': 'Block', 'src': '3555:84:1', 'statements': [{'expression': {'arguments': [{'id': 114, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 106, 'src': '3585:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, {'id': 115, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 108, 'src': '3593:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'hexValue': '416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564', 'id': 116, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '3599:32:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df', 'typeString': 'literal_string "Address: low-level call failed"'}, 'value': 'Address: low-level call failed'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df', 'typeString': 'literal_string "Address: low-level call failed"'}], 'id': 113, 'name': 'functionCall', 'nodeType': 'Identifier', 'overloadedDeclarations': [120, 140], 'referencedDeclaration': 140, 'src': '3572:12:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (address,bytes memory,string memory) returns (bytes memory)'}}, 'id': 117, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '3572:60:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 112, 'id': 118, 'nodeType': 'Return', 'src': '3565:67:1'}]}, 'documentation': {'id': 104, 'nodeType': 'StructuredDocumentation', 'src': '2730:731:1', 'text': ' @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._'}, 'id': 120, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionCall', 'nameLocation': '3475:12:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 109, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 106, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '3496:6:1', 'nodeType': 'VariableDeclaration', 'scope': 120, 'src': '3488:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 105, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '3488:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 108, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '3517:4:1', 'nodeType': 'VariableDeclaration', 'scope': 120, 'src': '3504:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 107, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '3504:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '3487:35:1'}, 'returnParameters': {'id': 112, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 111, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 120, 'src': '3541:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 110, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '3541:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '3540:14:1'}, 'scope': 346, 'src': '3466:173:1', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 139, 'nodeType': 'Block', 'src': '4008:76:1', 'statements': [{'expression': {'arguments': [{'id': 133, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 123, 'src': '4047:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, {'id': 134, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 125, 'src': '4055:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'hexValue': '30', 'id': 135, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'number', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '4061:1:1', 'typeDescriptions': {'typeIdentifier': 't_rational_0_by_1', 'typeString': 'int_const 0'}, 'value': '0'}, {'id': 136, 'name': 'errorMessage', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 127, 'src': '4064:12:1', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_rational_0_by_1', 'typeString': 'int_const 0'}, {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}], 'id': 132, 'name': 'functionCallWithValue', 'nodeType': 'Identifier', 'overloadedDeclarations': [160, 210], 'referencedDeclaration': 210, 'src': '4025:21:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (address,bytes memory,uint256,string memory) returns (bytes memory)'}}, 'id': 137, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '4025:52:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 131, 'id': 138, 'nodeType': 'Return', 'src': '4018:59:1'}]}, 'documentation': {'id': 121, 'nodeType': 'StructuredDocumentation', 'src': '3645:211:1', 'text': ' @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._'}, 'id': 140, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionCall', 'nameLocation': '3870:12:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 128, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 123, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '3900:6:1', 'nodeType': 'VariableDeclaration', 'scope': 140, 'src': '3892:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 122, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '3892:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 125, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '3929:4:1', 'nodeType': 'VariableDeclaration', 'scope': 140, 'src': '3916:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 124, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '3916:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}, {'constant': False, 'id': 127, 'mutability': 'mutable', 'name': 'errorMessage', 'nameLocation': '3957:12:1', 'nodeType': 'VariableDeclaration', 'scope': 140, 'src': '3943:26:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string'}, 'typeName': {'id': 126, 'name': 'string', 'nodeType': 'ElementaryTypeName', 'src': '3943:6:1', 'typeDescriptions': {'typeIdentifier': 't_string_storage_ptr', 'typeString': 'string'}}, 'visibility': 'internal'}], 'src': '3882:93:1'}, 'returnParameters': {'id': 131, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 130, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 140, 'src': '3994:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 129, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '3994:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '3993:14:1'}, 'scope': 346, 'src': '3861:223:1', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 159, 'nodeType': 'Block', 'src': '4589:111:1', 'statements': [{'expression': {'arguments': [{'id': 153, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 143, 'src': '4628:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, {'id': 154, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 145, 'src': '4636:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'id': 155, 'name': 'value', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 147, 'src': '4642:5:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, {'hexValue': '416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564', 'id': 156, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '4649:43:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc', 'typeString': 'literal_string "Address: low-level call with value failed"'}, 'value': 'Address: low-level call with value failed'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, {'typeIdentifier': 't_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc', 'typeString': 'literal_string "Address: low-level call with value failed"'}], 'id': 152, 'name': 'functionCallWithValue', 'nodeType': 'Identifier', 'overloadedDeclarations': [160, 210], 'referencedDeclaration': 210, 'src': '4606:21:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (address,bytes memory,uint256,string memory) returns (bytes memory)'}}, 'id': 157, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '4606:87:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 151, 'id': 158, 'nodeType': 'Return', 'src': '4599:94:1'}]}, 'documentation': {'id': 141, 'nodeType': 'StructuredDocumentation', 'src': '4090:351:1', 'text': ' @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._'}, 'id': 160, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionCallWithValue', 'nameLocation': '4455:21:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 148, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 143, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '4494:6:1', 'nodeType': 'VariableDeclaration', 'scope': 160, 'src': '4486:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 142, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '4486:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 145, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '4523:4:1', 'nodeType': 'VariableDeclaration', 'scope': 160, 'src': '4510:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 144, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '4510:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}, {'constant': False, 'id': 147, 'mutability': 'mutable', 'name': 'value', 'nameLocation': '4545:5:1', 'nodeType': 'VariableDeclaration', 'scope': 160, 'src': '4537:13:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'typeName': {'id': 146, 'name': 'uint256', 'nodeType': 'ElementaryTypeName', 'src': '4537:7:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'visibility': 'internal'}], 'src': '4476:80:1'}, 'returnParameters': {'id': 151, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 150, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 160, 'src': '4575:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 149, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '4575:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '4574:14:1'}, 'scope': 346, 'src': '4446:254:1', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 209, 'nodeType': 'Block', 'src': '5127:320:1', 'statements': [{'expression': {'arguments': [{'commonType': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'id': 181, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'leftExpression': {'expression': {'arguments': [{'id': 177, 'name': 'this', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': -28, 'src': '5153:4:1', 'typeDescriptions': {'typeIdentifier': 't_contract$_Address_$346', 'typeString': 'library Address'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_contract$_Address_$346', 'typeString': 'library Address'}], 'id': 176, 'isConstant': False, 'isLValue': False, 'isPure': True, 'lValueRequested': False, 'nodeType': 'ElementaryTypeNameExpression', 'src': '5145:7:1', 'typeDescriptions': {'typeIdentifier': 't_type$_t_address_$', 'typeString': 'type(address)'}, 'typeName': {'id': 175, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '5145:7:1', 'typeDescriptions': {}}}, 'id': 178, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'typeConversion', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '5145:13:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'id': 179, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'balance', 'nodeType': 'MemberAccess', 'src': '5145:21:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'nodeType': 'BinaryOperation', 'operator': '>=', 'rightExpression': {'id': 180, 'name': 'value', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 167, 'src': '5170:5:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'src': '5145:30:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'hexValue': '416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c', 'id': 182, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '5177:40:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c', 'typeString': 'literal_string "Address: insufficient balance for call"'}, 'value': 'Address: insufficient balance for call'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c', 'typeString': 'literal_string "Address: insufficient balance for call"'}], 'id': 174, 'name': 'require', 'nodeType': 'Identifier', 'overloadedDeclarations': [-18, -18], 'referencedDeclaration': -18, 'src': '5137:7:1', 'typeDescriptions': {'typeIdentifier': 't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$', 'typeString': 'function (bool,string memory) pure'}}, 'id': 183, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '5137:81:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 184, 'nodeType': 'ExpressionStatement', 'src': '5137:81:1'}, {'expression': {'arguments': [{'arguments': [{'id': 187, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 163, 'src': '5247:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}], 'id': 186, 'name': 'isContract', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 69, 'src': '5236:10:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_view$_t_address_$returns$_t_bool_$', 'typeString': 'function (address) view returns (bool)'}}, 'id': 188, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '5236:18:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'hexValue': '416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374', 'id': 189, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '5256:31:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad', 'typeString': 'literal_string "Address: call to non-contract"'}, 'value': 'Address: call to non-contract'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad', 'typeString': 'literal_string "Address: call to non-contract"'}], 'id': 185, 'name': 'require', 'nodeType': 'Identifier', 'overloadedDeclarations': [-18, -18], 'referencedDeclaration': -18, 'src': '5228:7:1', 'typeDescriptions': {'typeIdentifier': 't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$', 'typeString': 'function (bool,string memory) pure'}}, 'id': 190, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '5228:60:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 191, 'nodeType': 'ExpressionStatement', 'src': '5228:60:1'}, {'assignments': [193, 195], 'declarations': [{'constant': False, 'id': 193, 'mutability': 'mutable', 'name': 'success', 'nameLocation': '5305:7:1', 'nodeType': 'VariableDeclaration', 'scope': 209, 'src': '5300:12:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}, 'typeName': {'id': 192, 'name': 'bool', 'nodeType': 'ElementaryTypeName', 'src': '5300:4:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'visibility': 'internal'}, {'constant': False, 'id': 195, 'mutability': 'mutable', 'name': 'returndata', 'nameLocation': '5327:10:1', 'nodeType': 'VariableDeclaration', 'scope': 209, 'src': '5314:23:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 194, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '5314:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'id': 202, 'initialValue': {'arguments': [{'id': 200, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 165, 'src': '5367:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}], 'expression': {'id': 196, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 163, 'src': '5341:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'id': 197, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'call', 'nodeType': 'MemberAccess', 'src': '5341:11:1', 'typeDescriptions': {'typeIdentifier': 't_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'function (bytes memory) payable returns (bool,bytes memory)'}}, 'id': 199, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'names': ['value'], 'nodeType': 'FunctionCallOptions', 'options': [{'id': 198, 'name': 'value', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 167, 'src': '5360:5:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}], 'src': '5341:25:1', 'typeDescriptions': {'typeIdentifier': 't_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value', 'typeString': 'function (bytes memory) payable returns (bool,bytes memory)'}}, 'id': 201, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '5341:31:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'tuple(bool,bytes memory)'}}, 'nodeType': 'VariableDeclarationStatement', 'src': '5299:73:1'}, {'expression': {'arguments': [{'id': 204, 'name': 'success', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 193, 'src': '5406:7:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'id': 205, 'name': 'returndata', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 195, 'src': '5415:10:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'id': 206, 'name': 'errorMessage', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 169, 'src': '5427:12:1', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}], 'id': 203, 'name': 'verifyCallResult', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 345, 'src': '5389:16:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (bool,bytes memory,string memory) pure returns (bytes memory)'}}, 'id': 207, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '5389:51:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 173, 'id': 208, 'nodeType': 'Return', 'src': '5382:58:1'}]}, 'documentation': {'id': 161, 'nodeType': 'StructuredDocumentation', 'src': '4706:237:1', 'text': ' @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._'}, 'id': 210, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionCallWithValue', 'nameLocation': '4957:21:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 170, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 163, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '4996:6:1', 'nodeType': 'VariableDeclaration', 'scope': 210, 'src': '4988:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 162, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '4988:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 165, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '5025:4:1', 'nodeType': 'VariableDeclaration', 'scope': 210, 'src': '5012:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 164, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '5012:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}, {'constant': False, 'id': 167, 'mutability': 'mutable', 'name': 'value', 'nameLocation': '5047:5:1', 'nodeType': 'VariableDeclaration', 'scope': 210, 'src': '5039:13:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'typeName': {'id': 166, 'name': 'uint256', 'nodeType': 'ElementaryTypeName', 'src': '5039:7:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'visibility': 'internal'}, {'constant': False, 'id': 169, 'mutability': 'mutable', 'name': 'errorMessage', 'nameLocation': '5076:12:1', 'nodeType': 'VariableDeclaration', 'scope': 210, 'src': '5062:26:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string'}, 'typeName': {'id': 168, 'name': 'string', 'nodeType': 'ElementaryTypeName', 'src': '5062:6:1', 'typeDescriptions': {'typeIdentifier': 't_string_storage_ptr', 'typeString': 'string'}}, 'visibility': 'internal'}], 'src': '4978:116:1'}, 'returnParameters': {'id': 173, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 172, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 210, 'src': '5113:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 171, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '5113:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '5112:14:1'}, 'scope': 346, 'src': '4948:499:1', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 226, 'nodeType': 'Block', 'src': '5724:97:1', 'statements': [{'expression': {'arguments': [{'id': 221, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 213, 'src': '5760:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, {'id': 222, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 215, 'src': '5768:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'hexValue': '416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564', 'id': 223, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '5774:39:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0', 'typeString': 'literal_string "Address: low-level static call failed"'}, 'value': 'Address: low-level static call failed'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0', 'typeString': 'literal_string "Address: low-level static call failed"'}], 'id': 220, 'name': 'functionStaticCall', 'nodeType': 'Identifier', 'overloadedDeclarations': [227, 262], 'referencedDeclaration': 262, 'src': '5741:18:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (address,bytes memory,string memory) view returns (bytes memory)'}}, 'id': 224, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '5741:73:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 219, 'id': 225, 'nodeType': 'Return', 'src': '5734:80:1'}]}, 'documentation': {'id': 211, 'nodeType': 'StructuredDocumentation', 'src': '5453:166:1', 'text': ' @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._'}, 'id': 227, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionStaticCall', 'nameLocation': '5633:18:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 216, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 213, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '5660:6:1', 'nodeType': 'VariableDeclaration', 'scope': 227, 'src': '5652:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 212, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '5652:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 215, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '5681:4:1', 'nodeType': 'VariableDeclaration', 'scope': 227, 'src': '5668:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 214, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '5668:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '5651:35:1'}, 'returnParameters': {'id': 219, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 218, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 227, 'src': '5710:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 217, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '5710:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '5709:14:1'}, 'scope': 346, 'src': '5624:197:1', 'stateMutability': 'view', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 261, 'nodeType': 'Block', 'src': '6163:228:1', 'statements': [{'expression': {'arguments': [{'arguments': [{'id': 241, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 230, 'src': '6192:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}], 'id': 240, 'name': 'isContract', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 69, 'src': '6181:10:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_view$_t_address_$returns$_t_bool_$', 'typeString': 'function (address) view returns (bool)'}}, 'id': 242, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '6181:18:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'hexValue': '416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374', 'id': 243, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '6201:38:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9', 'typeString': 'literal_string "Address: static call to non-contract"'}, 'value': 'Address: static call to non-contract'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9', 'typeString': 'literal_string "Address: static call to non-contract"'}], 'id': 239, 'name': 'require', 'nodeType': 'Identifier', 'overloadedDeclarations': [-18, -18], 'referencedDeclaration': -18, 'src': '6173:7:1', 'typeDescriptions': {'typeIdentifier': 't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$', 'typeString': 'function (bool,string memory) pure'}}, 'id': 244, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '6173:67:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 245, 'nodeType': 'ExpressionStatement', 'src': '6173:67:1'}, {'assignments': [247, 249], 'declarations': [{'constant': False, 'id': 247, 'mutability': 'mutable', 'name': 'success', 'nameLocation': '6257:7:1', 'nodeType': 'VariableDeclaration', 'scope': 261, 'src': '6252:12:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}, 'typeName': {'id': 246, 'name': 'bool', 'nodeType': 'ElementaryTypeName', 'src': '6252:4:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'visibility': 'internal'}, {'constant': False, 'id': 249, 'mutability': 'mutable', 'name': 'returndata', 'nameLocation': '6279:10:1', 'nodeType': 'VariableDeclaration', 'scope': 261, 'src': '6266:23:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 248, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '6266:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'id': 254, 'initialValue': {'arguments': [{'id': 252, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 232, 'src': '6311:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}], 'expression': {'id': 250, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 230, 'src': '6293:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'id': 251, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'staticcall', 'nodeType': 'MemberAccess', 'src': '6293:17:1', 'typeDescriptions': {'typeIdentifier': 't_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'function (bytes memory) view returns (bool,bytes memory)'}}, 'id': 253, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '6293:23:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'tuple(bool,bytes memory)'}}, 'nodeType': 'VariableDeclarationStatement', 'src': '6251:65:1'}, {'expression': {'arguments': [{'id': 256, 'name': 'success', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 247, 'src': '6350:7:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'id': 257, 'name': 'returndata', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 249, 'src': '6359:10:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'id': 258, 'name': 'errorMessage', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 234, 'src': '6371:12:1', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}], 'id': 255, 'name': 'verifyCallResult', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 345, 'src': '6333:16:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (bool,bytes memory,string memory) pure returns (bytes memory)'}}, 'id': 259, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '6333:51:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 238, 'id': 260, 'nodeType': 'Return', 'src': '6326:58:1'}]}, 'documentation': {'id': 228, 'nodeType': 'StructuredDocumentation', 'src': '5827:173:1', 'text': ' @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._'}, 'id': 262, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionStaticCall', 'nameLocation': '6014:18:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 235, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 230, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '6050:6:1', 'nodeType': 'VariableDeclaration', 'scope': 262, 'src': '6042:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 229, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '6042:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 232, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '6079:4:1', 'nodeType': 'VariableDeclaration', 'scope': 262, 'src': '6066:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 231, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '6066:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}, {'constant': False, 'id': 234, 'mutability': 'mutable', 'name': 'errorMessage', 'nameLocation': '6107:12:1', 'nodeType': 'VariableDeclaration', 'scope': 262, 'src': '6093:26:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string'}, 'typeName': {'id': 233, 'name': 'string', 'nodeType': 'ElementaryTypeName', 'src': '6093:6:1', 'typeDescriptions': {'typeIdentifier': 't_string_storage_ptr', 'typeString': 'string'}}, 'visibility': 'internal'}], 'src': '6032:93:1'}, 'returnParameters': {'id': 238, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 237, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 262, 'src': '6149:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 236, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '6149:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '6148:14:1'}, 'scope': 346, 'src': '6005:386:1', 'stateMutability': 'view', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 278, 'nodeType': 'Block', 'src': '6667:101:1', 'statements': [{'expression': {'arguments': [{'id': 273, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 265, 'src': '6705:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, {'id': 274, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 267, 'src': '6713:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'hexValue': '416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564', 'id': 275, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '6719:41:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398', 'typeString': 'literal_string "Address: low-level delegate call failed"'}, 'value': 'Address: low-level delegate call failed'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398', 'typeString': 'literal_string "Address: low-level delegate call failed"'}], 'id': 272, 'name': 'functionDelegateCall', 'nodeType': 'Identifier', 'overloadedDeclarations': [279, 314], 'referencedDeclaration': 314, 'src': '6684:20:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (address,bytes memory,string memory) returns (bytes memory)'}}, 'id': 276, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '6684:77:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 271, 'id': 277, 'nodeType': 'Return', 'src': '6677:84:1'}]}, 'documentation': {'id': 263, 'nodeType': 'StructuredDocumentation', 'src': '6397:168:1', 'text': ' @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._'}, 'id': 279, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionDelegateCall', 'nameLocation': '6579:20:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 268, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 265, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '6608:6:1', 'nodeType': 'VariableDeclaration', 'scope': 279, 'src': '6600:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 264, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '6600:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 267, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '6629:4:1', 'nodeType': 'VariableDeclaration', 'scope': 279, 'src': '6616:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 266, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '6616:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '6599:35:1'}, 'returnParameters': {'id': 271, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 270, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 279, 'src': '6653:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 269, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '6653:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '6652:14:1'}, 'scope': 346, 'src': '6570:198:1', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 313, 'nodeType': 'Block', 'src': '7109:232:1', 'statements': [{'expression': {'arguments': [{'arguments': [{'id': 293, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 282, 'src': '7138:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}], 'id': 292, 'name': 'isContract', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 69, 'src': '7127:10:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_view$_t_address_$returns$_t_bool_$', 'typeString': 'function (address) view returns (bool)'}}, 'id': 294, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '7127:18:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'hexValue': '416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374', 'id': 295, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '7147:40:1', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520', 'typeString': 'literal_string "Address: delegate call to non-contract"'}, 'value': 'Address: delegate call to non-contract'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520', 'typeString': 'literal_string "Address: delegate call to non-contract"'}], 'id': 291, 'name': 'require', 'nodeType': 'Identifier', 'overloadedDeclarations': [-18, -18], 'referencedDeclaration': -18, 'src': '7119:7:1', 'typeDescriptions': {'typeIdentifier': 't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$', 'typeString': 'function (bool,string memory) pure'}}, 'id': 296, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '7119:69:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 297, 'nodeType': 'ExpressionStatement', 'src': '7119:69:1'}, {'assignments': [299, 301], 'declarations': [{'constant': False, 'id': 299, 'mutability': 'mutable', 'name': 'success', 'nameLocation': '7205:7:1', 'nodeType': 'VariableDeclaration', 'scope': 313, 'src': '7200:12:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}, 'typeName': {'id': 298, 'name': 'bool', 'nodeType': 'ElementaryTypeName', 'src': '7200:4:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'visibility': 'internal'}, {'constant': False, 'id': 301, 'mutability': 'mutable', 'name': 'returndata', 'nameLocation': '7227:10:1', 'nodeType': 'VariableDeclaration', 'scope': 313, 'src': '7214:23:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 300, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '7214:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'id': 306, 'initialValue': {'arguments': [{'id': 304, 'name': 'data', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 284, 'src': '7261:4:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}], 'expression': {'id': 302, 'name': 'target', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 282, 'src': '7241:6:1', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'id': 303, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'delegatecall', 'nodeType': 'MemberAccess', 'src': '7241:19:1', 'typeDescriptions': {'typeIdentifier': 't_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'function (bytes memory) returns (bool,bytes memory)'}}, 'id': 305, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '7241:25:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$_t_bool_$_t_bytes_memory_ptr_$', 'typeString': 'tuple(bool,bytes memory)'}}, 'nodeType': 'VariableDeclarationStatement', 'src': '7199:67:1'}, {'expression': {'arguments': [{'id': 308, 'name': 'success', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 299, 'src': '7300:7:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, {'id': 309, 'name': 'returndata', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 301, 'src': '7309:10:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, {'id': 310, 'name': 'errorMessage', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 286, 'src': '7321:12:1', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}, {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}], 'id': 307, 'name': 'verifyCallResult', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 345, 'src': '7283:16:1', 'typeDescriptions': {'typeIdentifier': 't_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (bool,bytes memory,string memory) pure returns (bytes memory)'}}, 'id': 311, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '7283:51:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 290, 'id': 312, 'nodeType': 'Return', 'src': '7276:58:1'}]}, 'documentation': {'id': 280, 'nodeType': 'StructuredDocumentation', 'src': '6774:175:1', 'text': ' @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._'}, 'id': 314, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'functionDelegateCall', 'nameLocation': '6963:20:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 287, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 282, 'mutability': 'mutable', 'name': 'target', 'nameLocation': '7001:6:1', 'nodeType': 'VariableDeclaration', 'scope': 314, 'src': '6993:14:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 281, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '6993:7:1', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}, {'constant': False, 'id': 284, 'mutability': 'mutable', 'name': 'data', 'nameLocation': '7030:4:1', 'nodeType': 'VariableDeclaration', 'scope': 314, 'src': '7017:17:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 283, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '7017:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}, {'constant': False, 'id': 286, 'mutability': 'mutable', 'name': 'errorMessage', 'nameLocation': '7058:12:1', 'nodeType': 'VariableDeclaration', 'scope': 314, 'src': '7044:26:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string'}, 'typeName': {'id': 285, 'name': 'string', 'nodeType': 'ElementaryTypeName', 'src': '7044:6:1', 'typeDescriptions': {'typeIdentifier': 't_string_storage_ptr', 'typeString': 'string'}}, 'visibility': 'internal'}], 'src': '6983:93:1'}, 'returnParameters': {'id': 290, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 289, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 314, 'src': '7095:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 288, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '7095:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '7094:14:1'}, 'scope': 346, 'src': '6954:387:1', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 344, 'nodeType': 'Block', 'src': '7721:532:1', 'statements': [{'condition': {'id': 326, 'name': 'success', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 317, 'src': '7735:7:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'falseBody': {'id': 342, 'nodeType': 'Block', 'src': '7792:455:1', 'statements': [{'condition': {'commonType': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'id': 333, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'leftExpression': {'expression': {'id': 330, 'name': 'returndata', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 319, 'src': '7876:10:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'id': 331, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'length', 'nodeType': 'MemberAccess', 'src': '7876:17:1', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'nodeType': 'BinaryOperation', 'operator': '>', 'rightExpression': {'hexValue': '30', 'id': 332, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'number', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '7896:1:1', 'typeDescriptions': {'typeIdentifier': 't_rational_0_by_1', 'typeString': 'int_const 0'}, 'value': '0'}, 'src': '7876:21:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'falseBody': {'id': 340, 'nodeType': 'Block', 'src': '8184:53:1', 'statements': [{'expression': {'arguments': [{'id': 337, 'name': 'errorMessage', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 321, 'src': '8209:12:1', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string memory'}], 'id': 336, 'name': 'revert', 'nodeType': 'Identifier', 'overloadedDeclarations': [-19, -19], 'referencedDeclaration': -19, 'src': '8202:6:1', 'typeDescriptions': {'typeIdentifier': 't_function_revert_pure$_t_string_memory_ptr_$returns$__$', 'typeString': 'function (string memory) pure'}}, 'id': 338, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '8202:20:1', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 339, 'nodeType': 'ExpressionStatement', 'src': '8202:20:1'}]}, 'id': 341, 'nodeType': 'IfStatement', 'src': '7872:365:1', 'trueBody': {'id': 335, 'nodeType': 'Block', 'src': '7899:279:1', 'statements': [{'AST': {'nodeType': 'YulBlock', 'src': '8019:145:1', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '8041:40:1', 'value': {'arguments': [{'name': 'returndata', 'nodeType': 'YulIdentifier', 'src': '8070:10:1'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '8064:5:1'}, 'nodeType': 'YulFunctionCall', 'src': '8064:17:1'}, 'variables': [{'name': 'returndata_size', 'nodeType': 'YulTypedName', 'src': '8045:15:1', 'type': ''}]}, {'expression': {'arguments': [{'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '8113:2:1', 'type': '', 'value': '32'}, {'name': 'returndata', 'nodeType': 'YulIdentifier', 'src': '8117:10:1'}], 'functionName': {'name': 'add', 'nodeType': 'YulIdentifier', 'src': '8109:3:1'}, 'nodeType': 'YulFunctionCall', 'src': '8109:19:1'}, {'name': 'returndata_size', 'nodeType': 'YulIdentifier', 'src': '8130:15:1'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '8102:6:1'}, 'nodeType': 'YulFunctionCall', 'src': '8102:44:1'}, 'nodeType': 'YulExpressionStatement', 'src': '8102:44:1'}]}, 'evmVersion': 'berlin', 'externalReferences': [{'declaration': 319, 'isOffset': False, 'isSlot': False, 'src': '8070:10:1', 'valueSize': 1}, {'declaration': 319, 'isOffset': False, 'isSlot': False, 'src': '8117:10:1', 'valueSize': 1}], 'id': 334, 'nodeType': 'InlineAssembly', 'src': '8010:154:1'}]}}]}, 'id': 343, 'nodeType': 'IfStatement', 'src': '7731:516:1', 'trueBody': {'id': 329, 'nodeType': 'Block', 'src': '7744:42:1', 'statements': [{'expression': {'id': 327, 'name': 'returndata', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 319, 'src': '7765:10:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'functionReturnParameters': 325, 'id': 328, 'nodeType': 'Return', 'src': '7758:17:1'}]}}]}, 'documentation': {'id': 315, 'nodeType': 'StructuredDocumentation', 'src': '7347:209:1', 'text': " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"}, 'id': 345, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'verifyCallResult', 'nameLocation': '7570:16:1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 322, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 317, 'mutability': 'mutable', 'name': 'success', 'nameLocation': '7601:7:1', 'nodeType': 'VariableDeclaration', 'scope': 345, 'src': '7596:12:1', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}, 'typeName': {'id': 316, 'name': 'bool', 'nodeType': 'ElementaryTypeName', 'src': '7596:4:1', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'visibility': 'internal'}, {'constant': False, 'id': 319, 'mutability': 'mutable', 'name': 'returndata', 'nameLocation': '7631:10:1', 'nodeType': 'VariableDeclaration', 'scope': 345, 'src': '7618:23:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 318, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '7618:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}, {'constant': False, 'id': 321, 'mutability': 'mutable', 'name': 'errorMessage', 'nameLocation': '7665:12:1', 'nodeType': 'VariableDeclaration', 'scope': 345, 'src': '7651:26:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_string_memory_ptr', 'typeString': 'string'}, 'typeName': {'id': 320, 'name': 'string', 'nodeType': 'ElementaryTypeName', 'src': '7651:6:1', 'typeDescriptions': {'typeIdentifier': 't_string_storage_ptr', 'typeString': 'string'}}, 'visibility': 'internal'}], 'src': '7586:97:1'}, 'returnParameters': {'id': 325, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 324, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 345, 'src': '7707:12:1', 'stateVariable': False, 'storageLocation': 'memory', 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes'}, 'typeName': {'id': 323, 'name': 'bytes', 'nodeType': 'ElementaryTypeName', 'src': '7707:5:1', 'typeDescriptions': {'typeIdentifier': 't_bytes_storage_ptr', 'typeString': 'bytes'}}, 'visibility': 'internal'}], 'src': '7706:14:1'}, 'scope': 346, 'src': '7561:692:1', 'stateMutability': 'pure', 'virtual': False, 'visibility': 'internal'}], 'scope': 347, 'src': '194:8061:1', 'usedErrors': []}], 'src': '101:8154:1'}, 'id': 1}, '@openzeppelin/contracts/utils/StorageSlot.sol': {'ast': {'absolutePath': '@openzeppelin/contracts/utils/StorageSlot.sol', 'exportedSymbols': {'StorageSlot': [406]}, 'id': 407, 'license': 'MIT', 'nodeType': 'SourceUnit', 'nodes': [{'id': 348, 'literals': ['solidity', '^', '0.8', '.0'], 'nodeType': 'PragmaDirective', 'src': '90:23:2'}, {'abstract': False, 'baseContracts': [], 'contractDependencies': [], 'contractKind': 'library', 'documentation': {'id': 349, 'nodeType': 'StructuredDocumentation', 'src': '115:1148:2', 'text': ' @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._'}, 'fullyImplemented': True, 'id': 406, 'linearizedBaseContracts': [406], 'name': 'StorageSlot', 'nameLocation': '1272:11:2', 'nodeType': 'ContractDefinition', 'nodes': [{'canonicalName': 'StorageSlot.AddressSlot', 'id': 352, 'members': [{'constant': False, 'id': 351, 'mutability': 'mutable', 'name': 'value', 'nameLocation': '1327:5:2', 'nodeType': 'VariableDeclaration', 'scope': 352, 'src': '1319:13:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 350, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '1319:7:2', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}], 'name': 'AddressSlot', 'nameLocation': '1297:11:2', 'nodeType': 'StructDefinition', 'scope': 406, 'src': '1290:49:2', 'visibility': 'public'}, {'canonicalName': 'StorageSlot.BooleanSlot', 'id': 355, 'members': [{'constant': False, 'id': 354, 'mutability': 'mutable', 'name': 'value', 'nameLocation': '1379:5:2', 'nodeType': 'VariableDeclaration', 'scope': 355, 'src': '1374:10:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}, 'typeName': {'id': 353, 'name': 'bool', 'nodeType': 'ElementaryTypeName', 'src': '1374:4:2', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}, 'visibility': 'internal'}], 'name': 'BooleanSlot', 'nameLocation': '1352:11:2', 'nodeType': 'StructDefinition', 'scope': 406, 'src': '1345:46:2', 'visibility': 'public'}, {'canonicalName': 'StorageSlot.Bytes32Slot', 'id': 358, 'members': [{'constant': False, 'id': 357, 'mutability': 'mutable', 'name': 'value', 'nameLocation': '1434:5:2', 'nodeType': 'VariableDeclaration', 'scope': 358, 'src': '1426:13:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}, 'typeName': {'id': 356, 'name': 'bytes32', 'nodeType': 'ElementaryTypeName', 'src': '1426:7:2', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'visibility': 'internal'}], 'name': 'Bytes32Slot', 'nameLocation': '1404:11:2', 'nodeType': 'StructDefinition', 'scope': 406, 'src': '1397:49:2', 'visibility': 'public'}, {'canonicalName': 'StorageSlot.Uint256Slot', 'id': 361, 'members': [{'constant': False, 'id': 360, 'mutability': 'mutable', 'name': 'value', 'nameLocation': '1489:5:2', 'nodeType': 'VariableDeclaration', 'scope': 361, 'src': '1481:13:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'typeName': {'id': 359, 'name': 'uint256', 'nodeType': 'ElementaryTypeName', 'src': '1481:7:2', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'visibility': 'internal'}], 'name': 'Uint256Slot', 'nameLocation': '1459:11:2', 'nodeType': 'StructDefinition', 'scope': 406, 'src': '1452:49:2', 'visibility': 'public'}, {'body': {'id': 371, 'nodeType': 'Block', 'src': '1683:63:2', 'statements': [{'AST': {'nodeType': 'YulBlock', 'src': '1702:38:2', 'statements': [{'nodeType': 'YulAssignment', 'src': '1716:14:2', 'value': {'name': 'slot', 'nodeType': 'YulIdentifier', 'src': '1726:4:2'}, 'variableNames': [{'name': 'r.slot', 'nodeType': 'YulIdentifier', 'src': '1716:6:2'}]}]}, 'evmVersion': 'berlin', 'externalReferences': [{'declaration': 368, 'isOffset': False, 'isSlot': True, 'src': '1716:6:2', 'suffix': 'slot', 'valueSize': 1}, {'declaration': 364, 'isOffset': False, 'isSlot': False, 'src': '1726:4:2', 'valueSize': 1}], 'id': 370, 'nodeType': 'InlineAssembly', 'src': '1693:47:2'}]}, 'documentation': {'id': 362, 'nodeType': 'StructuredDocumentation', 'src': '1507:87:2', 'text': ' @dev Returns an `AddressSlot` with member `value` located at `slot`.'}, 'id': 372, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'getAddressSlot', 'nameLocation': '1608:14:2', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 365, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 364, 'mutability': 'mutable', 'name': 'slot', 'nameLocation': '1631:4:2', 'nodeType': 'VariableDeclaration', 'scope': 372, 'src': '1623:12:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}, 'typeName': {'id': 363, 'name': 'bytes32', 'nodeType': 'ElementaryTypeName', 'src': '1623:7:2', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'visibility': 'internal'}], 'src': '1622:14:2'}, 'returnParameters': {'id': 369, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 368, 'mutability': 'mutable', 'name': 'r', 'nameLocation': '1680:1:2', 'nodeType': 'VariableDeclaration', 'scope': 372, 'src': '1660:21:2', 'stateVariable': False, 'storageLocation': 'storage', 'typeDescriptions': {'typeIdentifier': 't_struct$_AddressSlot_$352_storage_ptr', 'typeString': 'struct StorageSlot.AddressSlot'}, 'typeName': {'id': 367, 'nodeType': 'UserDefinedTypeName', 'pathNode': {'id': 366, 'name': 'AddressSlot', 'nodeType': 'IdentifierPath', 'referencedDeclaration': 352, 'src': '1660:11:2'}, 'referencedDeclaration': 352, 'src': '1660:11:2', 'typeDescriptions': {'typeIdentifier': 't_struct$_AddressSlot_$352_storage_ptr', 'typeString': 'struct StorageSlot.AddressSlot'}}, 'visibility': 'internal'}], 'src': '1659:23:2'}, 'scope': 406, 'src': '1599:147:2', 'stateMutability': 'pure', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 382, 'nodeType': 'Block', 'src': '1928:63:2', 'statements': [{'AST': {'nodeType': 'YulBlock', 'src': '1947:38:2', 'statements': [{'nodeType': 'YulAssignment', 'src': '1961:14:2', 'value': {'name': 'slot', 'nodeType': 'YulIdentifier', 'src': '1971:4:2'}, 'variableNames': [{'name': 'r.slot', 'nodeType': 'YulIdentifier', 'src': '1961:6:2'}]}]}, 'evmVersion': 'berlin', 'externalReferences': [{'declaration': 379, 'isOffset': False, 'isSlot': True, 'src': '1961:6:2', 'suffix': 'slot', 'valueSize': 1}, {'declaration': 375, 'isOffset': False, 'isSlot': False, 'src': '1971:4:2', 'valueSize': 1}], 'id': 381, 'nodeType': 'InlineAssembly', 'src': '1938:47:2'}]}, 'documentation': {'id': 373, 'nodeType': 'StructuredDocumentation', 'src': '1752:87:2', 'text': ' @dev Returns an `BooleanSlot` with member `value` located at `slot`.'}, 'id': 383, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'getBooleanSlot', 'nameLocation': '1853:14:2', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 376, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 375, 'mutability': 'mutable', 'name': 'slot', 'nameLocation': '1876:4:2', 'nodeType': 'VariableDeclaration', 'scope': 383, 'src': '1868:12:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}, 'typeName': {'id': 374, 'name': 'bytes32', 'nodeType': 'ElementaryTypeName', 'src': '1868:7:2', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'visibility': 'internal'}], 'src': '1867:14:2'}, 'returnParameters': {'id': 380, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 379, 'mutability': 'mutable', 'name': 'r', 'nameLocation': '1925:1:2', 'nodeType': 'VariableDeclaration', 'scope': 383, 'src': '1905:21:2', 'stateVariable': False, 'storageLocation': 'storage', 'typeDescriptions': {'typeIdentifier': 't_struct$_BooleanSlot_$355_storage_ptr', 'typeString': 'struct StorageSlot.BooleanSlot'}, 'typeName': {'id': 378, 'nodeType': 'UserDefinedTypeName', 'pathNode': {'id': 377, 'name': 'BooleanSlot', 'nodeType': 'IdentifierPath', 'referencedDeclaration': 355, 'src': '1905:11:2'}, 'referencedDeclaration': 355, 'src': '1905:11:2', 'typeDescriptions': {'typeIdentifier': 't_struct$_BooleanSlot_$355_storage_ptr', 'typeString': 'struct StorageSlot.BooleanSlot'}}, 'visibility': 'internal'}], 'src': '1904:23:2'}, 'scope': 406, 'src': '1844:147:2', 'stateMutability': 'pure', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 393, 'nodeType': 'Block', 'src': '2173:63:2', 'statements': [{'AST': {'nodeType': 'YulBlock', 'src': '2192:38:2', 'statements': [{'nodeType': 'YulAssignment', 'src': '2206:14:2', 'value': {'name': 'slot', 'nodeType': 'YulIdentifier', 'src': '2216:4:2'}, 'variableNames': [{'name': 'r.slot', 'nodeType': 'YulIdentifier', 'src': '2206:6:2'}]}]}, 'evmVersion': 'berlin', 'externalReferences': [{'declaration': 390, 'isOffset': False, 'isSlot': True, 'src': '2206:6:2', 'suffix': 'slot', 'valueSize': 1}, {'declaration': 386, 'isOffset': False, 'isSlot': False, 'src': '2216:4:2', 'valueSize': 1}], 'id': 392, 'nodeType': 'InlineAssembly', 'src': '2183:47:2'}]}, 'documentation': {'id': 384, 'nodeType': 'StructuredDocumentation', 'src': '1997:87:2', 'text': ' @dev Returns an `Bytes32Slot` with member `value` located at `slot`.'}, 'id': 394, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'getBytes32Slot', 'nameLocation': '2098:14:2', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 387, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 386, 'mutability': 'mutable', 'name': 'slot', 'nameLocation': '2121:4:2', 'nodeType': 'VariableDeclaration', 'scope': 394, 'src': '2113:12:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}, 'typeName': {'id': 385, 'name': 'bytes32', 'nodeType': 'ElementaryTypeName', 'src': '2113:7:2', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'visibility': 'internal'}], 'src': '2112:14:2'}, 'returnParameters': {'id': 391, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 390, 'mutability': 'mutable', 'name': 'r', 'nameLocation': '2170:1:2', 'nodeType': 'VariableDeclaration', 'scope': 394, 'src': '2150:21:2', 'stateVariable': False, 'storageLocation': 'storage', 'typeDescriptions': {'typeIdentifier': 't_struct$_Bytes32Slot_$358_storage_ptr', 'typeString': 'struct StorageSlot.Bytes32Slot'}, 'typeName': {'id': 389, 'nodeType': 'UserDefinedTypeName', 'pathNode': {'id': 388, 'name': 'Bytes32Slot', 'nodeType': 'IdentifierPath', 'referencedDeclaration': 358, 'src': '2150:11:2'}, 'referencedDeclaration': 358, 'src': '2150:11:2', 'typeDescriptions': {'typeIdentifier': 't_struct$_Bytes32Slot_$358_storage_ptr', 'typeString': 'struct StorageSlot.Bytes32Slot'}}, 'visibility': 'internal'}], 'src': '2149:23:2'}, 'scope': 406, 'src': '2089:147:2', 'stateMutability': 'pure', 'virtual': False, 'visibility': 'internal'}, {'body': {'id': 404, 'nodeType': 'Block', 'src': '2418:63:2', 'statements': [{'AST': {'nodeType': 'YulBlock', 'src': '2437:38:2', 'statements': [{'nodeType': 'YulAssignment', 'src': '2451:14:2', 'value': {'name': 'slot', 'nodeType': 'YulIdentifier', 'src': '2461:4:2'}, 'variableNames': [{'name': 'r.slot', 'nodeType': 'YulIdentifier', 'src': '2451:6:2'}]}]}, 'evmVersion': 'berlin', 'externalReferences': [{'declaration': 401, 'isOffset': False, 'isSlot': True, 'src': '2451:6:2', 'suffix': 'slot', 'valueSize': 1}, {'declaration': 397, 'isOffset': False, 'isSlot': False, 'src': '2461:4:2', 'valueSize': 1}], 'id': 403, 'nodeType': 'InlineAssembly', 'src': '2428:47:2'}]}, 'documentation': {'id': 395, 'nodeType': 'StructuredDocumentation', 'src': '2242:87:2', 'text': ' @dev Returns an `Uint256Slot` with member `value` located at `slot`.'}, 'id': 405, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'getUint256Slot', 'nameLocation': '2343:14:2', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 398, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 397, 'mutability': 'mutable', 'name': 'slot', 'nameLocation': '2366:4:2', 'nodeType': 'VariableDeclaration', 'scope': 405, 'src': '2358:12:2', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}, 'typeName': {'id': 396, 'name': 'bytes32', 'nodeType': 'ElementaryTypeName', 'src': '2358:7:2', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'visibility': 'internal'}], 'src': '2357:14:2'}, 'returnParameters': {'id': 402, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 401, 'mutability': 'mutable', 'name': 'r', 'nameLocation': '2415:1:2', 'nodeType': 'VariableDeclaration', 'scope': 405, 'src': '2395:21:2', 'stateVariable': False, 'storageLocation': 'storage', 'typeDescriptions': {'typeIdentifier': 't_struct$_Uint256Slot_$361_storage_ptr', 'typeString': 'struct StorageSlot.Uint256Slot'}, 'typeName': {'id': 400, 'nodeType': 'UserDefinedTypeName', 'pathNode': {'id': 399, 'name': 'Uint256Slot', 'nodeType': 'IdentifierPath', 'referencedDeclaration': 361, 'src': '2395:11:2'}, 'referencedDeclaration': 361, 'src': '2395:11:2', 'typeDescriptions': {'typeIdentifier': 't_struct$_Uint256Slot_$361_storage_ptr', 'typeString': 'struct StorageSlot.Uint256Slot'}}, 'visibility': 'internal'}], 'src': '2394:23:2'}, 'scope': 406, 'src': '2334:147:2', 'stateMutability': 'pure', 'virtual': False, 'visibility': 'internal'}], 'scope': 407, 'src': '1264:1219:2', 'usedErrors': []}], 'src': '90:2393:2'}, 'id': 2}, 'ERC1155Creator.sol': {'ast': {'absolutePath': 'ERC1155Creator.sol', 'exportedSymbols': {'Address': [346], 'ERC1155Creator': [480], 'Proxy': [51], 'StorageSlot': [406]}, 'id': 481, 'license': 'MIT', 'nodeType': 'SourceUnit', 'nodes': [{'id': 408, 'literals': ['solidity', '^', '0.8', '.0'], 'nodeType': 'PragmaDirective', 'src': '33:23:3'}, {'absolutePath': '@openzeppelin/contracts/proxy/Proxy.sol', 'file': '@openzeppelin/contracts/proxy/Proxy.sol', 'id': 409, 'nameLocation': '-1:-1:-1', 'nodeType': 'ImportDirective', 'scope': 481, 'sourceUnit': 52, 'src': '85:49:3', 'symbolAliases': [], 'unitAlias': ''}, {'absolutePath': '@openzeppelin/contracts/utils/Address.sol', 'file': '@openzeppelin/contracts/utils/Address.sol', 'id': 410, 'nameLocation': '-1:-1:-1', 'nodeType': 'ImportDirective', 'scope': 481, 'sourceUnit': 347, 'src': '135:51:3', 'symbolAliases': [], 'unitAlias': ''}, {'absolutePath': '@openzeppelin/contracts/utils/StorageSlot.sol', 'file': '@openzeppelin/contracts/utils/StorageSlot.sol', 'id': 411, 'nameLocation': '-1:-1:-1', 'nodeType': 'ImportDirective', 'scope': 481, 'sourceUnit': 407, 'src': '187:55:3', 'symbolAliases': [], 'unitAlias': ''}, {'abstract': False, 'baseContracts': [{'baseName': {'id': 412, 'name': 'Proxy', 'nodeType': 'IdentifierPath', 'referencedDeclaration': 51, 'src': '271:5:3'}, 'id': 413, 'nodeType': 'InheritanceSpecifier', 'src': '271:5:3'}], 'contractDependencies': [], 'contractKind': 'contract', 'fullyImplemented': True, 'id': 480, 'linearizedBaseContracts': [480, 51], 'name': 'ERC1155Creator', 'nameLocation': '253:14:3', 'nodeType': 'ContractDefinition', 'nodes': [{'body': {'id': 451, 'nodeType': 'Block', 'src': '298:378:3', 'statements': [{'expression': {'arguments': [{'commonType': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}, 'id': 429, 'isConstant': False, 'isLValue': False, 'isPure': True, 'lValueRequested': False, 'leftExpression': {'id': 417, 'name': '_IMPLEMENTATION_SLOT', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 456, 'src': '315:20:3', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'nodeType': 'BinaryOperation', 'operator': '==', 'rightExpression': {'arguments': [{'commonType': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}, 'id': 427, 'isConstant': False, 'isLValue': False, 'isPure': True, 'lValueRequested': False, 'leftExpression': {'arguments': [{'arguments': [{'hexValue': '656970313936372e70726f78792e696d706c656d656e746174696f6e', 'id': 423, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '365:30:3', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd', 'typeString': 'literal_string "eip1967.proxy.implementation"'}, 'value': 'eip1967.proxy.implementation'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_stringliteral_360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd', 'typeString': 'literal_string "eip1967.proxy.implementation"'}], 'id': 422, 'name': 'keccak256', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': -8, 'src': '355:9:3', 'typeDescriptions': {'typeIdentifier': 't_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$', 'typeString': 'function (bytes memory) pure returns (bytes32)'}}, 'id': 424, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '355:41:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}], 'id': 421, 'isConstant': False, 'isLValue': False, 'isPure': True, 'lValueRequested': False, 'nodeType': 'ElementaryTypeNameExpression', 'src': '347:7:3', 'typeDescriptions': {'typeIdentifier': 't_type$_t_uint256_$', 'typeString': 'type(uint256)'}, 'typeName': {'id': 420, 'name': 'uint256', 'nodeType': 'ElementaryTypeName', 'src': '347:7:3', 'typeDescriptions': {}}}, 'id': 425, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'typeConversion', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '347:50:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}, 'nodeType': 'BinaryOperation', 'operator': '-', 'rightExpression': {'hexValue': '31', 'id': 426, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'number', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '400:1:3', 'typeDescriptions': {'typeIdentifier': 't_rational_1_by_1', 'typeString': 'int_const 1'}, 'value': '1'}, 'src': '347:54:3', 'typeDescriptions': {'typeIdentifier': 't_uint256', 'typeString': 'uint256'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_uint256', 'typeString': 'uint256'}], 'id': 419, 'isConstant': False, 'isLValue': False, 'isPure': True, 'lValueRequested': False, 'nodeType': 'ElementaryTypeNameExpression', 'src': '339:7:3', 'typeDescriptions': {'typeIdentifier': 't_type$_t_bytes32_$', 'typeString': 'type(bytes32)'}, 'typeName': {'id': 418, 'name': 'bytes32', 'nodeType': 'ElementaryTypeName', 'src': '339:7:3', 'typeDescriptions': {}}}, 'id': 428, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'typeConversion', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '339:63:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'src': '315:87:3', 'typeDescriptions': {'typeIdentifier': 't_bool', 'typeString': 'bool'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bool', 'typeString': 'bool'}], 'id': 416, 'name': 'assert', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': -3, 'src': '308:6:3', 'typeDescriptions': {'typeIdentifier': 't_function_assert_pure$_t_bool_$returns$__$', 'typeString': 'function (bool) pure'}}, 'id': 430, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '308:95:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_tuple$__$', 'typeString': 'tuple()'}}, 'id': 431, 'nodeType': 'ExpressionStatement', 'src': '308:95:3'}, {'expression': {'id': 439, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'leftHandSide': {'expression': {'arguments': [{'id': 435, 'name': '_IMPLEMENTATION_SLOT', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 456, 'src': '440:20:3', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}], 'expression': {'id': 432, 'name': 'StorageSlot', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 406, 'src': '413:11:3', 'typeDescriptions': {'typeIdentifier': 't_type$_t_contract$_StorageSlot_$406_$', 'typeString': 'type(library StorageSlot)'}}, 'id': 434, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'getAddressSlot', 'nodeType': 'MemberAccess', 'referencedDeclaration': 372, 'src': '413:26:3', 'typeDescriptions': {'typeIdentifier': 't_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$352_storage_ptr_$', 'typeString': 'function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)'}}, 'id': 436, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '413:48:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_struct$_AddressSlot_$352_storage_ptr', 'typeString': 'struct StorageSlot.AddressSlot storage pointer'}}, 'id': 437, 'isConstant': False, 'isLValue': True, 'isPure': False, 'lValueRequested': True, 'memberName': 'value', 'nodeType': 'MemberAccess', 'referencedDeclaration': 351, 'src': '413:54:3', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'nodeType': 'Assignment', 'operator': '=', 'rightHandSide': {'hexValue': '307831343246443562396436373732314566444133413545324539626534374139366339423732344134', 'id': 438, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'number', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '470:42:3', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'value': '0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4'}, 'src': '413:99:3', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'id': 440, 'nodeType': 'ExpressionStatement', 'src': '413:99:3'}, {'expression': {'arguments': [{'hexValue': '307831343246443562396436373732314566444133413545324539626534374139366339423732344134', 'id': 444, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'number', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '564:42:3', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'value': '0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4'}, {'arguments': [{'hexValue': '696e697469616c697a652829', 'id': 447, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'string', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '644:14:3', 'typeDescriptions': {'typeIdentifier': 't_stringliteral_8129fc1cf5a76b8b9d76c7ab5059b1685decddb2380c6e4cebb774b7c17ae83f', 'typeString': 'literal_string "initialize()"'}, 'value': 'initialize()'}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_stringliteral_8129fc1cf5a76b8b9d76c7ab5059b1685decddb2380c6e4cebb774b7c17ae83f', 'typeString': 'literal_string "initialize()"'}], 'expression': {'id': 445, 'name': 'abi', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': -1, 'src': '620:3:3', 'typeDescriptions': {'typeIdentifier': 't_magic_abi', 'typeString': 'abi'}}, 'id': 446, 'isConstant': False, 'isLValue': False, 'isPure': True, 'lValueRequested': False, 'memberName': 'encodeWithSignature', 'nodeType': 'MemberAccess', 'src': '620:23:3', 'typeDescriptions': {'typeIdentifier': 't_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (string memory) pure returns (bytes memory)'}}, 'id': 448, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '620:39:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_address', 'typeString': 'address'}, {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}], 'expression': {'id': 441, 'name': 'Address', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 346, 'src': '522:7:3', 'typeDescriptions': {'typeIdentifier': 't_type$_t_contract$_Address_$346_$', 'typeString': 'type(library Address)'}}, 'id': 443, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'functionDelegateCall', 'nodeType': 'MemberAccess', 'referencedDeclaration': 279, 'src': '522:28:3', 'typeDescriptions': {'typeIdentifier': 't_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$', 'typeString': 'function (address,bytes memory) returns (bytes memory)'}}, 'id': 449, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '522:147:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_bytes_memory_ptr', 'typeString': 'bytes memory'}}, 'id': 450, 'nodeType': 'ExpressionStatement', 'src': '522:147:3'}]}, 'id': 452, 'implemented': True, 'kind': 'constructor', 'modifiers': [], 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 414, 'nodeType': 'ParameterList', 'parameters': [], 'src': '295:2:3'}, 'returnParameters': {'id': 415, 'nodeType': 'ParameterList', 'parameters': [], 'src': '298:0:3'}, 'scope': 480, 'src': '284:392:3', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'public'}, {'constant': True, 'documentation': {'id': 453, 'nodeType': 'StructuredDocumentation', 'src': '682:214:3', 'text': ' @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n validated in the constructor.'}, 'id': 456, 'mutability': 'constant', 'name': '_IMPLEMENTATION_SLOT', 'nameLocation': '927:20:3', 'nodeType': 'VariableDeclaration', 'scope': 480, 'src': '901:115:3', 'stateVariable': True, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}, 'typeName': {'id': 454, 'name': 'bytes32', 'nodeType': 'ElementaryTypeName', 'src': '901:7:3', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}, 'value': {'hexValue': '307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263', 'id': 455, 'isConstant': False, 'isLValue': False, 'isPure': True, 'kind': 'number', 'lValueRequested': False, 'nodeType': 'Literal', 'src': '950:66:3', 'typeDescriptions': {'typeIdentifier': 't_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1', 'typeString': 'int_const 2444...(69 digits omitted)...5612'}, 'value': '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc'}, 'visibility': 'internal'}, {'body': {'id': 465, 'nodeType': 'Block', 'src': '1152:41:3', 'statements': [{'expression': {'arguments': [], 'expression': {'argumentTypes': [], 'id': 462, 'name': '_implementation', 'nodeType': 'Identifier', 'overloadedDeclarations': [479], 'referencedDeclaration': 479, 'src': '1169:15:3', 'typeDescriptions': {'typeIdentifier': 't_function_internal_view$__$returns$_t_address_$', 'typeString': 'function () view returns (address)'}}, 'id': 463, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '1169:17:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'functionReturnParameters': 461, 'id': 464, 'nodeType': 'Return', 'src': '1162:24:3'}]}, 'documentation': {'id': 457, 'nodeType': 'StructuredDocumentation', 'src': '1023:67:3', 'text': ' @dev Returns the current implementation address.'}, 'functionSelector': '5c60da1b', 'id': 466, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': 'implementation', 'nameLocation': '1105:14:3', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 458, 'nodeType': 'ParameterList', 'parameters': [], 'src': '1119:2:3'}, 'returnParameters': {'id': 461, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 460, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 466, 'src': '1143:7:3', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 459, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '1143:7:3', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}], 'src': '1142:9:3'}, 'scope': 480, 'src': '1096:97:3', 'stateMutability': 'view', 'virtual': False, 'visibility': 'public'}, {'baseFunctions': [16], 'body': {'id': 478, 'nodeType': 'Block', 'src': '1267:78:3', 'statements': [{'expression': {'expression': {'arguments': [{'id': 474, 'name': '_IMPLEMENTATION_SLOT', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 456, 'src': '1311:20:3', 'typeDescriptions': {'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}}], 'expression': {'argumentTypes': [{'typeIdentifier': 't_bytes32', 'typeString': 'bytes32'}], 'expression': {'id': 472, 'name': 'StorageSlot', 'nodeType': 'Identifier', 'overloadedDeclarations': [], 'referencedDeclaration': 406, 'src': '1284:11:3', 'typeDescriptions': {'typeIdentifier': 't_type$_t_contract$_StorageSlot_$406_$', 'typeString': 'type(library StorageSlot)'}}, 'id': 473, 'isConstant': False, 'isLValue': False, 'isPure': False, 'lValueRequested': False, 'memberName': 'getAddressSlot', 'nodeType': 'MemberAccess', 'referencedDeclaration': 372, 'src': '1284:26:3', 'typeDescriptions': {'typeIdentifier': 't_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$352_storage_ptr_$', 'typeString': 'function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)'}}, 'id': 475, 'isConstant': False, 'isLValue': False, 'isPure': False, 'kind': 'functionCall', 'lValueRequested': False, 'names': [], 'nodeType': 'FunctionCall', 'src': '1284:48:3', 'tryCall': False, 'typeDescriptions': {'typeIdentifier': 't_struct$_AddressSlot_$352_storage_ptr', 'typeString': 'struct StorageSlot.AddressSlot storage pointer'}}, 'id': 476, 'isConstant': False, 'isLValue': True, 'isPure': False, 'lValueRequested': False, 'memberName': 'value', 'nodeType': 'MemberAccess', 'referencedDeclaration': 351, 'src': '1284:54:3', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'functionReturnParameters': 471, 'id': 477, 'nodeType': 'Return', 'src': '1277:61:3'}]}, 'id': 479, 'implemented': True, 'kind': 'function', 'modifiers': [], 'name': '_implementation', 'nameLocation': '1208:15:3', 'nodeType': 'FunctionDefinition', 'overrides': {'id': 468, 'nodeType': 'OverrideSpecifier', 'overrides': [], 'src': '1235:8:3'}, 'parameters': {'id': 467, 'nodeType': 'ParameterList', 'parameters': [], 'src': '1223:2:3'}, 'returnParameters': {'id': 471, 'nodeType': 'ParameterList', 'parameters': [{'constant': False, 'id': 470, 'mutability': 'mutable', 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'VariableDeclaration', 'scope': 479, 'src': '1258:7:3', 'stateVariable': False, 'storageLocation': 'default', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}, 'typeName': {'id': 469, 'name': 'address', 'nodeType': 'ElementaryTypeName', 'src': '1258:7:3', 'stateMutability': 'nonpayable', 'typeDescriptions': {'typeIdentifier': 't_address', 'typeString': 'address'}}, 'visibility': 'internal'}], 'src': '1257:9:3'}, 'scope': 480, 'src': '1199:146:3', 'stateMutability': 'view', 'virtual': False, 'visibility': 'internal'}], 'scope': 481, 'src': '244:1108:3', 'usedErrors': []}], 'src': '33:1319:3'}, 'id': 3}, 'TREA.sol': {'ast': {'absolutePath': 'TREA.sol', 'exportedSymbols': {'Address': [346], 'ERC1155Creator': [480], 'Proxy': [51], 'StorageSlot': [406], 'TREA': [492]}, 'id': 493, 'license': 'MIT', 'nodeType': 'SourceUnit', 'nodes': [{'id': 482, 'literals': ['solidity', '^', '0.8', '.0'], 'nodeType': 'PragmaDirective', 'src': '33:23:4'}, {'absolutePath': 'ERC1155Creator.sol', 'file': './ERC1155Creator.sol', 'id': 483, 'nameLocation': '-1:-1:-1', 'nodeType': 'ImportDirective', 'scope': 493, 'sourceUnit': 481, 'src': '108:30:4', 'symbolAliases': [], 'unitAlias': ''}, {'abstract': False, 'baseContracts': [{'baseName': {'id': 484, 'name': 'ERC1155Creator', 'nodeType': 'IdentifierPath', 'referencedDeclaration': 480, 'src': '1004:14:4'}, 'id': 485, 'nodeType': 'InheritanceSpecifier', 'src': '1004:14:4'}], 'contractDependencies': [], 'contractKind': 'contract', 'fullyImplemented': True, 'id': 492, 'linearizedBaseContracts': [492, 480, 51], 'name': 'TREA', 'nameLocation': '996:4:4', 'nodeType': 'ContractDefinition', 'nodes': [{'body': {'id': 490, 'nodeType': 'Block', 'src': '1056:2:4', 'statements': []}, 'id': 491, 'implemented': True, 'kind': 'constructor', 'modifiers': [{'arguments': [], 'id': 488, 'kind': 'baseConstructorSpecifier', 'modifierName': {'id': 487, 'name': 'ERC1155Creator', 'nodeType': 'IdentifierPath', 'referencedDeclaration': 480, 'src': '1039:14:4'}, 'nodeType': 'ModifierInvocation', 'src': '1039:16:4'}], 'name': '', 'nameLocation': '-1:-1:-1', 'nodeType': 'FunctionDefinition', 'parameters': {'id': 486, 'nodeType': 'ParameterList', 'parameters': [], 'src': '1036:2:4'}, 'returnParameters': {'id': 489, 'nodeType': 'ParameterList', 'parameters': [], 'src': '1056:0:4'}, 'scope': 492, 'src': '1025:33:4', 'stateMutability': 'nonpayable', 'virtual': False, 'visibility': 'public'}], 'scope': 493, 'src': '987:73:4', 'usedErrors': []}], 'src': '33:1027:4'}, 'id': 4}}}